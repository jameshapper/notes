rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function editOnlyAllowedFields(allowedFields){
      let affectedKeys = request.resource.data.diff(resource.data).affectedKeys();
      return affectedKeys.hasOnly(allowedFields);
    }

    function documentFieldsCheckin(requiredFields, optionalFields) {
      let allFields = requiredFields.concat(optionalFields);
      return request.resource.data.keys().hasAll(requiredFields) && request.resource.data.keys().hasOnly(allFields);
    }

    function resourceHasAuthUid() {
      return request.auth.uid == resource.data.uid
    }

    function requestResourceHasAuthUid() {
      return request.auth.uid == request.resource.data.uid
    }

    function isAdmin() {
      //uses Map.get(returned value if field exists, default), but may be a string so we check "truthiness"?
      //previous try get(/databases/$(database)/documents/users/$(request.auth.uid)).data.get("admin",false) ? get(/databases/$(database)/documents/users/$(request.auth.uid)).data.admin == true : false
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.get("admin",false);
    }

    function isPublished(badgeId) {
      return get(/databases/$(database)/documents/badges/$(badgeId)).data.get("status","Dev") == "Published";
    }

    match /{somePath=**}/notes/{noteId} {

      function optional() {
        return ['title', 'body', 'uid', 'createdAt', 'timestamp','activities','author','avatar', 'rt', 'commentNum','status','evidence','plannedHrs','completedHrs','actionType','noteType']
      }

      function onlyEdit() {
        return ['title', 'body', 'createdAt', 'timestamp', 'activities','rt','commentNum','status','evidence','plannedHrs','completedHrs','actionType','noteType']
      }

      function statusOptionOk(){
        return request.resource.data.status in ['Active', 'Archived','Paused']
      }

      allow read: if resourceHasAuthUid()
      allow read: if isAdmin()

      allow create: if requestResourceHasAuthUid() && documentFieldsCheckin([],optional()) && statusOptionOk()
      allow update, delete: if resourceHasAuthUid() && documentFieldsCheckin([],optional()) && editOnlyAllowedFields(onlyEdit())
      allow update: if isAdmin()

    }

    match /users/{userId} {

      function optional() {
        return ['firstName', 'lastName', 'fullName', 'email','avatar','myBadgesMap']
      }

      allow read: if (request.auth.uid == userId) || isAdmin()
      allow create: if request.auth.uid == userId && documentFieldsCheckin([],optional())
      allow update: if request.auth.uid == userId && editOnlyAllowedFields(['avatar','myBadgesMap'])
      allow update: if isAdmin()
    }

    match /{somePath=**}/comments/{commentId} {

      function optional() {
        return ['body', 'uid', 'createdAt', 'timestamp','author','avatar','rt','studentId','noteId']
      }

      function onlyEdit() {
        return ['body', 'createdAt', 'timestamp', 'activities','rt']
      }

      allow read: if resourceHasAuthUid()
      allow read: if request.auth.uid == resource.data.studentId
      allow read: if isAdmin()

      allow create: if requestResourceHasAuthUid() && documentFieldsCheckin([],optional())
      allow update: if resourceHasAuthUid() && documentFieldsCheckin([],optional()) && editOnlyAllowedFields(onlyEdit())

    }

    match /badges/{badgeId} {

      allow read: if true
      allow create, update: if isAdmin()
    }
    
    match /{somePath=**}/myBadges/{badgeId} {

      //allow read: if true
      allow read: if resourceHasAuthUid()
      allow read: if isAdmin()
      allow create: if requestResourceHasAuthUid() && isPublished(request.resource.data.badgeId)
      allow update, delete: if resourceHasAuthUid() || isAdmin()

    }

    match /{somePath=**}/myBadges {
      
      allow read: if resourceHasAuthUid()
      allow read: if isAdmin()
      allow create: if requestResourceHasAuthUid()
      allow update, delete: if resourceHasAuthUid() || isAdmin()

    }

    match /{somePath=**}/fbForms/{fbFormId} {

      allow read: if resourceHasAuthUid()
      allow read: if isAdmin()

      allow create, update: if isAdmin()
    }

    match /adminDocs/studentList {

      allow read: if true
      allow create, update: if isAdmin()
      allow update: if request.auth != null && request.resource.data.students.size() - resource.data.students.size() == 1 

    }
    
    match /{somePath=**}/teacherClasses/{classId} {

      allow read: if resourceHasAuthUid()
      allow read: if isAdmin()

      allow write: if isAdmin()

    }
    
    match /users/{userId}/teacherClasses/{classId}/privateData {

      allow read: if isAdmin()

      allow write: if isAdmin()

    }

    match /{somePath=**}/feedback/{feedbackId} {

      allow read: if resourceHasAuthUid()
      allow read: if request.auth.uid == resource.data.studentId
      allow read: if isAdmin()

      allow write: if isAdmin()

    }

    match /adminDocs/badgeList {

      allow read: if true
      allow create, update: if isAdmin()
    }

    match /adminDocs/classesList {

      allow read: if true
      allow create, update: if isAdmin()
    }
  }
}