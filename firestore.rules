rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function editOnlyChangesFields(allowedFields){
      let affectedKeys = request.resource.data.diff(resource.data).affectedKeys();
      return affectedKeys.hasOnly(allowedFields);
    }

    function documentFieldsCheckout(requiredFields, optionalFields) {
      let allFields = requiredFields.concat(optionalFields);
      return request.resource.data.keys().hasAll(requiredFields) && request.resource.data.keys().hasOnly(allFields);
    }

    function resourceHasAuthUid() {
      return request.auth.uid == resource.data.uid
    }

    function requestResourceHasAuthUid() {
      return request.auth.uid == request.resource.data.uid
    }

    function isAdmin() {
      //uses Map.get(returned value if field exists, default), but may be a string so we check "truthiness"?
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.get("admin",false);
    }

    match /{somePath=**}/notes/{noteId} {

      function optional() {
        return ['title', 'body', 'uid', 'createdAt', 'timestamp','activities','author','avatar', 'rt', 'commentNum']
      }

      function onlyEdit() {
        return ['title', 'body', 'createdAt', 'timestamp', 'activities','rt','commentNum']
      }

      allow read: if resourceHasAuthUid()
      allow read: if isAdmin()

      allow create: if requestResourceHasAuthUid() && documentFieldsCheckout([],optional())
      allow update, delete: if resourceHasAuthUid() && documentFieldsCheckout([],optional()) && editOnlyChangesFields(onlyEdit())

    }

    match /users/{userId} {

      function optional() {
        return ['firstName', 'lastName', 'fullName', 'email','avatar']
      }

      allow read: if (request.auth.uid == userId)
      allow create: if request.auth.uid == userId && documentFieldsCheckout([],optional())
      allow update: if request.auth.uid == userId && editOnlyChangesFields(['avatar'])
    }

    match /{somePath=**}/comments/{commentId} {

      function optional() {
        return ['body', 'uid', 'createdAt', 'timestamp','author','avatar','rt','studentId','noteId']
      }

      function onlyEdit() {
        return ['body', 'createdAt', 'timestamp', 'activities','rt']
      }

      allow read: if resourceHasAuthUid()
      allow read: if request.auth.uid == resource.data.studentId
      allow read: if isAdmin()

      allow create: if requestResourceHasAuthUid() && documentFieldsCheckout([],optional())
      allow update: if resourceHasAuthUid() && noteHasOnlyAllowedFields() && editOnlyChangesFields(onlyEdit())

    }

    match /badges/{badgeId} {

      allow read: if true
      allow create, update: if isAdmin()
    }
    
    match /{somePath=**}/myBadges/{badgeId} {

      allow read: if resourceHasAuthUid()
      allow read: if isAdmin()
      allow create: if requestResourceHasAuthUid()
      allow update, delete: if resourceHasAuthUid()

    }

    match /{somePath=**}/fbForms/{fbFormId} {

      allow read: if resourceHasAuthUid()
      allow read: if isAdmin()

      allow create, update: if isAdmin()
    }
  }
}