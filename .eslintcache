[{"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\index.js":"1","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\App.js":"2","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\reportWebVitals.js":"3","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\pages\\login.js":"4","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\pages\\home.js":"5","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\firebase.js":"6","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\note.js":"7","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\chips.js":"8","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\select.js":"9","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\UserContext.js":"10","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\contextChecker.js":"11","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\userContext.js":"12","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\classes.js":"13","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\account.js":"14","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\editortest2.js":"15","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\listcards.js":"16","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\viewnotes.js":"17","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\temp.js":"18","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\badges.js":"19","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\App2.js":"20","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\layout.js":"21","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\badgedetails.js":"22","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\feedback.js":"23","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\students.js":"24","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\studentdetails.js":"25"},{"size":531,"mtime":1625478177503,"results":"26","hashOfConfig":"27"},{"size":845,"mtime":1625471999625,"results":"28","hashOfConfig":"27"},{"size":362,"mtime":499162500000,"results":"29","hashOfConfig":"27"},{"size":2742,"mtime":1626062957702,"results":"30","hashOfConfig":"27"},{"size":5802,"mtime":1625471999635,"results":"31","hashOfConfig":"27"},{"size":678,"mtime":1618708206546,"results":"32","hashOfConfig":"27"},{"size":12668,"mtime":1625623600677,"results":"33","hashOfConfig":"27"},{"size":275,"mtime":1615975291635,"results":"34","hashOfConfig":"27"},{"size":2789,"mtime":1625471999633,"results":"35","hashOfConfig":"27"},{"size":806,"mtime":1612357304510,"results":"36","hashOfConfig":"27"},{"size":311,"mtime":1612357855261,"results":"37","hashOfConfig":"27"},{"size":1523,"mtime":1625560727913,"results":"38","hashOfConfig":"27"},{"size":15279,"mtime":1626252149228,"results":"39","hashOfConfig":"27"},{"size":3070,"mtime":1625471999626,"results":"40","hashOfConfig":"27"},{"size":1170,"mtime":1624461495102,"results":"41","hashOfConfig":"27"},{"size":2931,"mtime":1625471999630,"results":"42","hashOfConfig":"27"},{"size":4157,"mtime":1625471999633,"results":"43","hashOfConfig":"27"},{"size":15562,"mtime":1620273505241,"results":"44","hashOfConfig":"45"},{"size":3548,"mtime":1625795001821,"results":"46","hashOfConfig":"27"},{"size":2950,"mtime":1626267457010,"results":"47","hashOfConfig":"27"},{"size":5432,"mtime":1626056728515,"results":"48","hashOfConfig":"27"},{"size":5622,"mtime":1625843465429,"results":"49","hashOfConfig":"27"},{"size":3552,"mtime":1626056726065,"results":"50","hashOfConfig":"27"},{"size":20157,"mtime":1626514264418,"results":"51","hashOfConfig":"27"},{"size":2564,"mtime":1626331295216,"results":"52","hashOfConfig":"27"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},"ys4om1",{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"55"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"x9ovq5",{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"55"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"55"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"55"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"55"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"107","messages":"108","errorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"55"},"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\index.js",[],["110","111"],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\App.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\reportWebVitals.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\pages\\login.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\pages\\home.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\firebase.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\note.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\chips.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\select.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\UserContext.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\contextChecker.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\userContext.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\classes.js",["112","113","114"],"import React, { useState, useEffect, useContext } from 'react';\r\nimport firebase, { db, auth } from '../firebase';\r\nimport { UserContext } from '../userContext';\r\nimport ListCards from './listcards'\r\nimport ViewNotes from './viewnotes'\r\n\r\nimport Datepicker from 'react-datepicker'\r\nimport 'react-datepicker/dist/react-datepicker.css'\r\nimport dayjs from 'dayjs';\r\nimport relativeTime from 'dayjs/plugin/relativeTime';\r\nimport MultiSelect from \"react-multi-select-component\";\r\n\r\nimport Box from '@material-ui/core/Box'\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\r\nimport { PanoramaFishEyeSharp } from '@material-ui/icons';\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n\treturn <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nfunction TeacherClasses(props) {\r\n\r\n    const [ user ] = useState(auth.currentUser)\r\n\r\n    const [ title, setTitle ] = useState('')\r\n    const [ body, setBody ] = useState('')\r\n    const [ noteId, setNoteId ] = useState('')\r\n    const [ studentId, setStudentId ] = useState('')\r\n\r\n    const [ students10, setStudents10 ] = useState([])\r\n    const [ students20, setStudents20 ] = useState([])\r\n    const [ students30, setStudents30 ] = useState([])\r\n\r\n    const [ currentClass, setCurrentClass ] = useState([])\r\n    const [ created, setCreated ] = useState(\"\")\r\n    const [ author, setAuthor ] = useState(\"\")\r\n    const [ noteAvatar, setNoteAvatar ] = useState(\"\")\r\n    const [ classForSelect, setClassForSelect ] = useState([])\r\n\r\n    const [ errors, setErrors ] = useState([])\r\n    const [ open, setOpen ] = useState(false)\r\n    const [ viewOpen, setViewOpen ] = useState(false)\r\n    const [ uiLoading, setUiLoading ] = useState(true)\r\n\r\n    const [ teacherClasses, setTeacherClasses ] = useState([]);\r\n    const [ notes, setNotes ] = useState([]);\r\n    const [ selectedDate, setSelectedDate ] = useState(new Date(Date.now() - 604800000))\r\n\r\n    const [ selected, setSelected ] = useState([])\r\n    const [ rt, setRt ] = useState(\"\")\r\n    const [ commentBody, setCommentBody ] = useState(\"\")\r\n    const [ commentRt, setCommentRt ] = useState(\"\")\r\n    const [ comments, setComments ] = useState([])\r\n\r\n    const { avatar } = useContext(UserContext)\r\n\r\n/*     useEffect(() => {\r\n        \r\n        console.log(\"User\",user)\r\n        if(user){\r\n            return db.collection(\"users\").doc(user.uid).get()\r\n            .then((doc) => {\r\n                if (doc.exists) {\r\n                    let teacherData = doc.data()\r\n                    console.log(\"Document data:\", teacherData);\r\n                    setTeacherClasses(teacherData.classes)\r\n                    setUiLoading(false)\r\n                } else {\r\n                    // doc.data() will be undefined in this case\r\n                    console.log(\"No such teacher document!\");\r\n                }\r\n            })\r\n        }\r\n\r\n    }, [user]); */\r\n\r\n    //alternate way to get class data (if stored in teacherClasses collection?)\r\n    useEffect(() => {\r\n        \r\n        if(user){\r\n            return db.collection(\"users\").doc(user.uid).collection('teacherClasses').get()\r\n            .then((snapshot) => {\r\n                const teacherData = []\r\n                snapshot.forEach((doc) => {\r\n                    teacherData.push({...doc.data(), id: doc.id})\r\n                })\r\n                setTeacherClasses(teacherData)\r\n                setUiLoading(false)\r\n            })\r\n            .catch((error) => {\r\n                console.log(\"No classes error: \", error);\r\n            })\r\n        }\r\n\r\n    }, [user]);\r\n\r\n    useEffect(() => {\r\n        //console.log('selected ids are '+selected.map((student) => student.value))\r\n        //setSelectedStudents(selected.map(a => a.value))\r\n        setStudents10(selected.map(a=>a.value).slice(0,10))\r\n        setStudents20(selected.map(a=>a.value).slice(10,20))\r\n        setStudents30(selected.map(a=>a.value).slice(20,30))\r\n\r\n    },[selected])\r\n\r\n    const DialogTitle = ((props) => {\r\n        const { children, onClose, classes, ...other } = props;\r\n        return (\r\n            <MuiDialogTitle disableTypography sx={{minWidth:220}} {...other}>\r\n                <Typography variant=\"h6\">{children}</Typography>\r\n                {onClose ? (\r\n                    <IconButton aria-label=\"close\" sx={{\r\n                        position: 'absolute',\r\n                        right: 8,\r\n                        top: 9,\r\n                        color: '#e0e0e0'\r\n                    }} onClick={onClose}>\r\n                        <CloseIcon />\r\n                    </IconButton>\r\n                ) : null}\r\n            </MuiDialogTitle>\r\n        );\r\n    });\r\n\r\n    dayjs.extend(relativeTime);\r\n    const { classes } = props;\r\n\r\n    const handleSelectOpen = (teacherClass) => {\r\n        setTitle(teacherClass.name)\r\n        setCurrentClass(teacherClass.students)\r\n        setOpen(true)\r\n    };\r\n\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault();\r\n        let notes10 = []\r\n        let notes20 = []\r\n        let notes30 = []\r\n\r\n        let recentDate = selectedDate\r\n        console.log('students in array groups lengths '+students10.length+students20.length+students30.length)\r\n\r\n        if(students10.length>0){\r\n            let first10 = await\r\n            db.collectionGroup('notes')\r\n            .where('uid','in', students10)\r\n            .where(\"timestamp\", \">=\", recentDate)\r\n            .orderBy(\"timestamp\",\"desc\")\r\n            .get()\r\n\r\n            first10.forEach((doc) => {\r\n                notes10.push({ ...doc.data(), id: doc.id })\r\n            })\r\n        }\r\n\r\n        if(students20.length>0){\r\n            let second10 = await\r\n            db.collectionGroup('notes')\r\n            .where('uid','in', students20)\r\n            .where(\"timestamp\", \">=\", recentDate)\r\n            .orderBy(\"timestamp\",\"desc\")\r\n            .get()\r\n\r\n            second10.forEach((doc) => {\r\n            notes20.push({ ...doc.data(), id: doc.id })\r\n            })\r\n        }\r\n\r\n        if(students30.length>0){\r\n            let third10 = await\r\n            db.collectionGroup('notes')\r\n            .where('uid','in', students30)\r\n            .where(\"timestamp\", \">=\", recentDate)\r\n            .orderBy(\"timestamp\",\"desc\")\r\n            .get()\r\n\r\n            third10.forEach((doc) => {\r\n            notes30.push({ ...doc.data(), id: doc.id })\r\n            })\r\n        }\r\n\r\n        setNotes(notes10.concat(notes20,notes30))\r\n        setOpen(false)\r\n        //console.log(\"notes10 is \"+notes10.length+\" notes20 is \"+notes20.length+\" and notes30 is \"+notes30.length)\r\n\r\n    };\r\n\r\n    const handleSubmitComment = (event) => {\r\n        event.preventDefault();\r\n\r\n        if (commentBody) {\r\n            const newComment = {\r\n                body: commentBody,\r\n                createdAt: new Date().toISOString(),\r\n                timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n                uid: user.uid,\r\n                author: user.displayName,\r\n                avatar: avatar,\r\n                rt: commentRt,\r\n                studentId: studentId,\r\n                noteId: noteId\r\n            }\r\n            db.collection('users').doc(studentId).collection('notes').doc(noteId).collection('comments').add(newComment)\r\n            .then((doc)=>{\r\n                console.log(\"New comment added to db\")\r\n                setViewOpen(false);\r\n            })\r\n            .then(() => {\r\n                let noteRef = db.collection('users').doc(studentId).collection('notes').doc(noteId)\r\n                noteRef.update({ commentNum: firebase.firestore.FieldValue.increment(1)})\r\n            })\r\n            .catch((error) => {\r\n                setErrors(error)\r\n                setOpen(true)\r\n                console.error(error);\r\n                alert('Something went wrong' );\r\n            });\r\n        } else {\r\n            alert(\"No empty comments\")\r\n        }\r\n\r\n    };\r\n\r\n    const handleViewOpen = (note) => {\r\n        setTitle(note.title)\r\n        setBody(note.body)\r\n        setNoteId(note.id)\r\n        setStudentId(note.uid)\r\n        setCreated(note.createdAt)\r\n        setAuthor(note.author)\r\n        setRt(note.rt)\r\n        setNoteAvatar(note.avatar)\r\n        setViewOpen(true)\r\n\t}\r\n\r\n    useEffect(() => {\r\n        \r\n        if(noteId){\r\n            return db.collectionGroup(\"comments\")\r\n            .where(\"noteId\",\"==\",noteId)\r\n            .get()\r\n            .then((querySnapshot) => {\r\n                const commentsData = [];\r\n                querySnapshot.forEach((doc) => {\r\n                    commentsData.push({ ...doc.data(), id: doc.id })\r\n                    console.log(\"comment doc id is \"+doc.id)\r\n                })\r\n                setComments(commentsData)\r\n            })\r\n            .catch((error) => {\r\n                alert('something wrong while looking for comments')\r\n                console.log(error)\r\n            })\r\n        }\r\n    }, [noteId]);\r\n\r\n    useEffect(() => {\r\n        const toLabelValue = currentClass.map((student) => {\r\n            return {\r\n                label: student.firstName,\r\n                value: student.uid\r\n            }\r\n        })\r\n        setClassForSelect(toLabelValue)\r\n    },[currentClass])\r\n\r\n    const handleViewClose = () => setViewOpen(false);\r\n\r\n    const handleClose = (event) => setOpen(false);\r\n\r\n    if (uiLoading === true) {\r\n        return (\r\n            <main sx={{flexGrow:1, p:3}} >\r\n                <Toolbar />\r\n                {uiLoading && <CircularProgress size={150} sx={{\r\n                    position: 'fixed',\r\n                    zIndex: '1000',\r\n                    height: '31px',\r\n                    width: '31px',\r\n                    left: '50%',\r\n                    top: '35%'\r\n                }} />}\r\n            </main>\r\n        );\r\n    } else {\r\n        return (\r\n            <main sx={{flexGrow:1, p: 3}}>\r\n                <Toolbar />\r\n\r\n                <Dialog fullScreen open={open} onClose={handleClose} TransitionComponent={Transition}>\r\n                    <AppBar sx={{position: 'relative'}} >\r\n                        <Toolbar>\r\n                            <IconButton edge=\"start\" color=\"inherit\" onClick={handleClose} aria-label=\"close\">\r\n                                <CloseIcon />\r\n                            </IconButton>\r\n                            <Typography variant=\"h6\" sx={{ml:2, flex:1}} >\r\n                                Select students to view recent notes\r\n                            </Typography>\r\n                            <Button\r\n                                autoFocus\r\n                                color=\"inherit\"\r\n                                onClick={handleSubmit}\r\n                                sx={{\r\n                                    display: 'block',\r\n                                    color: 'white',\r\n                                    textAlign: 'center',\r\n                                    position: 'absolute',\r\n                                    top: 14,\r\n                                    right: 10\r\n                                }}\r\n                            >\r\n                                Submit\r\n                            </Button>\r\n                        </Toolbar>\r\n                    </AppBar>\r\n\r\n                    <Box component=\"form\"\r\n                    sx={{\r\n                        width: '98%',\r\n                        marginLeft: 2,\r\n                        marginTop: 3\r\n                    }} noValidate>\r\n                        <Grid container spacing={2}>\r\n                            <Grid item xs={12} key='date'>\r\n                                <Typography>\r\n                                    How far back do you want to see notes?\r\n                                </Typography>\r\n                                <Datepicker \r\n                                    selected={selectedDate} \r\n                                    onChange={date => setSelectedDate(date)}\r\n                                    maxDate={new Date()}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={12} key='title'>\r\n\t\t\t\t\t\t\t\t<DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\r\n\t\t\t\t\t\t\t\t\t{title}\r\n\t\t\t\t\t\t\t\t</DialogTitle>\r\n                            </Grid>\r\n\r\n                            <Grid>\r\n                                <div>\r\n                                    <h1>Select Students</h1>\r\n                                    <MultiSelect\r\n                                    options={classForSelect}\r\n                                    value={selected}\r\n                                    onChange={setSelected}\r\n                                    labelledBy={\"Select\"}\r\n                                    />\r\n                                </div>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Box>\r\n                </Dialog>\r\n\r\n                <Grid container spacing={8} justify='center'>\r\n                    {teacherClasses.map((teacherClass) => (\r\n                        <Grid item xs={8} sm={6} key = {teacherClass.name}>\r\n                            <Card sx={{minWidth:220}} variant=\"outlined\">\r\n                                <CardContent>\r\n                                    <Typography variant=\"h6\" component=\"h3\">\r\n                                        {teacherClass.name}\r\n                                    </Typography>\r\n                                </CardContent>\r\n                                <CardActions>\r\n                                    <Button size=\"small\" color=\"primary\" onClick={() => handleSelectOpen( teacherClass )}>\r\n                                        {' '}\r\n                                        Select Students{' '}\r\n                                    </Button>\r\n                                </CardActions>\r\n                            </Card>\r\n                        </Grid>\r\n                    ))}\r\n                </Grid>\r\n\r\n                { notes && notes.length > 0 && \r\n                    <ListCards notes={notes} handleEditOpen={()=>alert('permission denied')} handleViewOpen={handleViewOpen} deleteNoteHandler={()=>alert('permission denied')} canEdit={false}/>\r\n                }\r\n  \r\n                <ViewNotes handleViewClose={handleViewClose} viewOpen={viewOpen} title={title} author={author} created={created} avatar={noteAvatar} comments={comments} rt={rt} classes={classes} handleSubmitComment={handleSubmitComment} setCommentBody={setCommentBody} setCommentRt={setCommentRt} commentRt={commentRt}/>\r\n\r\n            </main>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TeacherClasses;\r\n","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\account.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\editortest2.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\listcards.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\viewnotes.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\temp.js",["115","116"],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\badges.js",["117"],"import React, { useState, useContext, useEffect } from 'react';\r\nimport { db } from '../firebase';\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport Toolbar from '@material-ui/core/Toolbar'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Card from '@material-ui/core/Card'\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport Button from '@material-ui/core/Button'\r\nimport CardHeader from '@material-ui/core/CardHeader'\r\nimport CardMedia from '@material-ui/core/CardMedia'\r\nimport CardContent from '@material-ui/core/CardContent'\r\nimport { Typography } from '@material-ui/core';\r\nimport { UserContext } from '../userContext';\r\n\r\nfunction Badges(props) {\r\n\r\n    const { loading } = useContext(UserContext)\r\n\r\n    const [ badges, setBadges ] = useState([])\r\n    const [ uiLoading, setUiLoading ] = useState(loading)\r\n\r\n    useEffect(() => {\r\n        \r\n        return db.collection(\"badges\")\r\n\r\n        .onSnapshot(snapshot => {\r\n            const badgesData = [];\r\n            snapshot.forEach(doc => badgesData.push({ ...doc.data(), id: doc.id }));\r\n            setBadges(badgesData)\r\n            setUiLoading(false)\r\n            console.log('badges are '+badgesData)\r\n        })\r\n    }, []);\r\n\r\n    if (uiLoading === true) {\r\n        return (\r\n            <main sx={{flexGrow:1, p:3}} >\r\n                <Toolbar />\r\n                {uiLoading && <CircularProgress size={150} sx={{\r\n                    position: 'fixed',\r\n                    zIndex: '1000',\r\n                    height: '31px',\r\n                    width: '31px',\r\n                    left: '50%',\r\n                    top: '35%'\r\n                }} />}\r\n            </main>\r\n        );\r\n    } else {\r\n        return (\r\n            <main sx={{flexGrow:1, p:3}}>\r\n                <Toolbar />\r\n\r\n            <Grid container spacing={2}>\r\n                    {badges && badges.length>0 && badges.map((badge) => (\r\n                        <Grid item xs={12} sm={6} key = {badge.id}>\r\n                            <Card sx={{ maxWidth: 345 }}>\r\n                            <CardMedia\r\n                                sx={{ height: 140 }}\r\n                                image={badge.ImageUrl}\r\n                                title=\"Contemplative Reptile\"\r\n                            />\r\n                            <CardContent>\r\n                                <Typography gutterBottom variant=\"h5\" component=\"div\">\r\n                                {badge.Title}\r\n                                </Typography>\r\n                                <Typography variant=\"body2\" color=\"text.secondary\">\r\n                                Lizards are a widespread group of squamate reptiles, with over 6,000\r\n                                species, ranging across all continents except Antarctica\r\n                                </Typography>\r\n                            </CardContent>\r\n                            <CardActions>\r\n                                <Button component={Link} to={`/badges/${badge.id}`} size=\"small\">See Details</Button>\r\n                                <Button\r\n                                    size=\"small\"\r\n                                >\r\n                                    Add to My Badges\r\n                                </Button>\r\n                            </CardActions>\r\n                            </Card>\r\n                        </Grid>\r\n                    ))}\r\n                </Grid>\r\n\r\n            </main>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Badges;","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\App2.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\layout.js",["118","119"],"import { useContext, useState, useEffect } from 'react'\r\nimport { useHistory, useLocation } from \"react-router-dom\";\r\nimport { UserContext } from \"../userContext\"\r\n\r\nimport Box from '@material-ui/core/Box'\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport List from '@material-ui/core/List';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport AccountBoxIcon from '@material-ui/icons/AccountBox';\r\nimport NotesIcon from '@material-ui/icons/Notes';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\r\nimport ShieldIcon from '@material-ui/icons/Shield';\r\nimport { EmojiPeople, RateReview } from '@material-ui/icons';\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst menuItemsUser = [\r\n    { \r\n        text: 'My Plans', \r\n        icon: <NotesIcon color=\"secondary\" />, \r\n        path: '/' \r\n    },\r\n    { \r\n        text: 'Account', \r\n        icon: <AccountBoxIcon color=\"secondary\" />, \r\n        path: '/account' \r\n    },\r\n    {\r\n        text: 'Badges',\r\n        icon: <ShieldIcon color=\"secondary\" />,\r\n        path: '/badges'\r\n    }\r\n  ];\r\n\r\n  const menuItemsAdmin = [\r\n    { \r\n        text: 'My Classes', \r\n        icon: <NotesIcon color=\"secondary\" />, \r\n        path: '/classes' \r\n    },\r\n    { \r\n        text: 'Account', \r\n        icon: <AccountBoxIcon color=\"secondary\" />, \r\n        path: '/account' \r\n    },\r\n    {\r\n        text: 'Badges',\r\n        icon: <ShieldIcon color=\"secondary\" />,\r\n        path: '/badges'\r\n    },\r\n    {\r\n        text: 'Feedback',\r\n        icon: <RateReview color=\"secondary\" />,\r\n        path: '/feedback'\r\n    },\r\n    {\r\n        text: 'Students',\r\n        icon: <EmojiPeople color=\"secondary\" />,\r\n        path: '/students'\r\n    }\r\n  ];\r\n\r\nfunction Layout({ children }) {\r\n\r\n    const { currentUser, isAdmin, loading, avatar, logout } = useContext(UserContext);\r\n    const location = useLocation()\r\n    const [ menuItems, setMenuItems ] = useState([])\r\n\r\n    let history = useHistory();\r\n\r\n    if(currentUser){\r\n        console.log('In Layout user is Admin is '+isAdmin)\r\n    } else {\r\n        history.push('/login')\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(isAdmin){\r\n            setMenuItems(menuItemsAdmin)\r\n        } else {\r\n            setMenuItems(menuItemsUser)\r\n        }\r\n    },[isAdmin])\r\n\r\n\tconst logoutHandler = async(event) => {\r\n        console.log('Logout Clicked');\r\n        await logout().then(() => {\r\n            history.push('/login')\r\n          }).catch((error) => {\r\n            console.log('Error signing out')\r\n          });;\r\n\t};\r\n\r\n    if(currentUser) {\r\n        return (\r\n            <Box sx={{display:'flex'}}>\r\n                <CssBaseline />\r\n                <AppBar position=\"fixed\" sx={{zIndex: (theme) => theme.zIndex.drawer + 1}} >\r\n                    <Toolbar>\r\n                        <Typography variant=\"h6\" noWrap>\r\n                            NotesApp\r\n                        </Typography>\r\n                    </Toolbar>\r\n                </AppBar>\r\n                <Drawer\r\n                    variant=\"permanent\"\r\n                    sx={{\r\n                        width: drawerWidth,\r\n                        flexShrink: 0,\r\n                        '& .MuiDrawer-paper': { boxSizing: 'border-box', width: drawerWidth },\r\n                        }}\r\n                >\r\n                    <Toolbar />\r\n                    <Divider />\r\n                    <center>\r\n                        <Avatar alt=\"User Avatar\" src={avatar} sx={{height: 110, width: 100, flexShrink: 0, flexGrow: 0, marginTop: 2}} />\r\n                        <p>\r\n                            {' '}\r\n                            {currentUser && currentUser.displayName ? currentUser.displayName : \"Welcome!\"}\r\n                        </p>\r\n                    </center>\r\n                    <Divider />\r\n                    <List>\r\n                    {menuItems.map((item) => (\r\n                        <ListItem \r\n                        button \r\n                        key={item.text} \r\n                        onClick={() => history.push(item.path)}\r\n                        className={location.pathname == item.path ? null : null}\r\n                        >\r\n                        <ListItemIcon>{item.icon}</ListItemIcon>\r\n                        <ListItemText primary={item.text} />\r\n                        </ListItem>\r\n                    ))}\r\n                        <ListItem\r\n                        button\r\n                        key='logout'\r\n                        onClick={logoutHandler}\r\n                        >\r\n                            <ListItemIcon>\r\n                                {' '}\r\n                                <ExitToAppIcon />{' '}\r\n                                <ListItemText primary='Logout' />\r\n                            </ListItemIcon>\r\n                        </ListItem>\r\n                    </List>\r\n                </Drawer>\r\n                <Box sx={{m:2}} >{children}</Box>\r\n            </Box>    \r\n        )\r\n    } else {\r\n        return <div></div>\r\n    }\r\n\r\n}\r\n\r\nexport default Layout;","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\badgedetails.js",["120"],"import React, { useEffect, useState, useContext } from 'react'\r\nimport { db } from '../firebase';\r\nimport { UserContext } from '../userContext';\r\n\r\nimport { useParams } from 'react-router-dom'\r\nimport Box from '@material-ui/core/Box'\r\nimport Toolbar from '@material-ui/core/Toolbar'\r\nimport { Typography } from '@material-ui/core'\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\r\nimport { Table, TableContainer, TableHead, TableRow, TableCell, TableBody, Paper, Card, CardMedia } from '@material-ui/core'\r\n\r\n\r\nexport default function BadgeDetails() {\r\n\r\n    const { badgeId } = useParams()\r\n    const { currentUser } = useContext(UserContext)\r\n    const [ badgeDetails, setBadgeDetails ] = useState({})\r\n    const [ updateBadge, setUpdateBadge ] = useState(false)\r\n    \r\n    useEffect(() => {\r\n        \r\n        if(badgeId){\r\n            return db.collection(\"badges\").doc(badgeId).get()\r\n            .then((doc)=> {\r\n                if(doc.exists){\r\n                    let badgeData = doc.data()\r\n                    setBadgeDetails({...badgeData, badgeId: badgeId})\r\n                    console.log('badgeData title is '+badgeData.Title)\r\n                } else {\r\n                    alert(\"I can't find that document\")\r\n                }\r\n            })\r\n        }\r\n\r\n    }, [badgeId]);\r\n\r\n    useEffect(() => {\r\n        if(updateBadge){ return db.collection('users').doc(currentUser.uid)\r\n            .collection('myBadges').add({...badgeDetails,uid: currentUser.uid})\r\n            .then((doc)=>{\r\n                console.log('New badge aspiration added')\r\n                setUpdateBadge(false)\r\n            })\r\n        }\r\n    },[ updateBadge, currentUser.uid, badgeDetails ])\r\n\r\n    const handleAddBadge = (e) => {\r\n        e.preventDefault()\r\n        console.log('badgeDetails submitted object is '+JSON.stringify(badgeDetails))\r\n        let document = db.collection('users').doc(currentUser.uid)\r\n        document.collection('myBadges').where(\"uid\",\"==\",currentUser.uid)\r\n        .where(\"Title\",\"==\",badgeDetails.Title).get()\r\n        .then((snapshot) => {\r\n            console.log('number of docs in snapshot is '+snapshot.size)\r\n            if(snapshot.size === 0){\r\n                setUpdateBadge(true)\r\n            } else {\r\n                setUpdateBadge(false)\r\n            }\r\n        })\r\n    }\r\n\r\n    console.log('reached the BadgeDetails component with id of '+badgeId)\r\n    return (\r\n        <>\r\n            <Toolbar />\r\n            <IconButton\r\n                sx={{\r\n                    position: 'fixed',\r\n                    bottom: 0,\r\n                    right: 0\r\n                }}\r\n                color=\"primary\"\r\n                aria-label=\"Add Badge\"\r\n                onClick={handleAddBadge}\r\n            >\r\n                <AddCircleIcon sx={{ fontSize: 60 }} />\r\n            </IconButton>\r\n\r\n            <Box sx={{flexGrow:1, p:3}} >\r\n                <Box sx={{mx:'auto', width:180}}>\r\n                    <Card sx={{ maxWidth: 345 }}>\r\n                                <CardMedia\r\n                                    sx={{ height: 140 }}\r\n                                    image={badgeDetails.ImageUrl}\r\n                                    title=\"Contemplative Reptile\"\r\n                                />\r\n                    </Card>\r\n                </Box>\r\n                {badgeId && badgeDetails.Criteria && \r\n                <TableContainer component={Paper} sx={{borderRadius:2, m:1, maxWidth:950}}>\r\n                    <Table sx={{ minWidth: 650 }} aria-label=\"simple table\">\r\n                        <TableHead>\r\n                        <TableRow>\r\n                            <TableCell align=\"right\" sx={{fontWeight:'bold',backgroundColor:(theme)=>theme.palette.secondary.main, color: (theme)=>theme.palette.getContrastText(theme.palette.secondary.main)}}>Criterion</TableCell>\r\n                            <TableCell align=\"right\" sx={{fontWeight:'bold',backgroundColor:(theme)=>theme.palette.secondary.main, color: (theme)=>theme.palette.getContrastText(theme.palette.secondary.main)}}>Level</TableCell>\r\n                            <TableCell align=\"left\" sx={{fontWeight:'bold',backgroundColor:(theme)=>theme.palette.secondary.main, color: (theme)=>theme.palette.getContrastText(theme.palette.secondary.main)}}>Description</TableCell>\r\n                            <TableCell align=\"right\" sx={{fontWeight:'bold',backgroundColor:(theme)=>theme.palette.secondary.main, color: (theme)=>theme.palette.getContrastText(theme.palette.secondary.main)}}>Total Crits</TableCell>\r\n                        </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                        {badgeDetails.Criteria.map((row) => (\r\n                            <TableRow\r\n                            key={row.Label}\r\n                            sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\r\n                            >\r\n                            <TableCell component=\"th\" scope=\"row\">\r\n                                {row.Label}\r\n                            </TableCell>\r\n                            <TableCell align=\"right\">{row.Level}</TableCell>\r\n                            <TableCell align=\"left\">{row.Description}</TableCell>\r\n                            <TableCell align=\"right\" sx={{fontWeight:'bold'}}>{row.Crits}</TableCell>\r\n                            </TableRow>\r\n                        ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n                }\r\n            </Box>\r\n\r\n        </>\r\n    )\r\n}\r\n","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\feedback.js",["121"],"import React, { useState, useContext, useEffect } from 'react';\r\nimport { db } from '../firebase';\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport Toolbar from '@material-ui/core/Toolbar'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Card from '@material-ui/core/Card'\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport Button from '@material-ui/core/Button'\r\nimport CardHeader from '@material-ui/core/CardHeader'\r\nimport CardMedia from '@material-ui/core/CardMedia'\r\nimport CardContent from '@material-ui/core/CardContent'\r\nimport { Typography } from '@material-ui/core';\r\nimport { UserContext } from '../userContext';\r\n\r\nfunction Feedback(props) {\r\n\r\n    const { loading } = useContext(UserContext)\r\n\r\n    const [ badges, setBadges ] = useState([])\r\n    const [ uiLoading, setUiLoading ] = useState(loading)\r\n\r\n    useEffect(() => {\r\n        \r\n        return db.collection(\"badges\")\r\n\r\n        .onSnapshot(snapshot => {\r\n            const badgesData = [];\r\n            snapshot.forEach(doc => badgesData.push({ ...doc.data(), id: doc.id }));\r\n            setBadges(badgesData)\r\n            setUiLoading(false)\r\n            console.log('badges are '+badgesData)\r\n        })\r\n    }, []);\r\n\r\n    if (uiLoading === true) {\r\n        return (\r\n            <main sx={{flexGrow:1, p:3}} >\r\n                <Toolbar />\r\n                {uiLoading && <CircularProgress size={150} sx={{\r\n                    position: 'fixed',\r\n                    zIndex: '1000',\r\n                    height: '31px',\r\n                    width: '31px',\r\n                    left: '50%',\r\n                    top: '35%'\r\n                }} />}\r\n            </main>\r\n        );\r\n    } else {\r\n        return (\r\n            <main sx={{flexGrow:1, p:3}}>\r\n                <Toolbar />\r\n\r\n            <Grid container spacing={2}>\r\n                    {badges && badges.length>0 && badges.map((badge) => (\r\n                        <Grid item xs={12} sm={6} key = {badge.id}>\r\n                            <Card sx={{ maxWidth: 345 }}>\r\n                            <CardMedia\r\n                                sx={{ height: 140 }}\r\n                                image={badge.ImageUrl}\r\n                                title=\"Contemplative Reptile\"\r\n                            />\r\n                            <CardContent>\r\n                                <Typography gutterBottom variant=\"h5\" component=\"div\">\r\n                                {badge.Title}\r\n                                </Typography>\r\n                                <Typography variant=\"body2\" color=\"text.secondary\">\r\n                                Lizards are a widespread group of squamate reptiles, with over 6,000\r\n                                species, ranging across all continents except Antarctica\r\n                                </Typography>\r\n                            </CardContent>\r\n                            <CardActions>\r\n                                <Button component={Link} to={`/badges/${badge.id}`} size=\"small\">See Details</Button>\r\n                                <Button\r\n                                    size=\"small\"\r\n                                >\r\n                                    Add to My Badges\r\n                                </Button>\r\n                            </CardActions>\r\n                            </Card>\r\n                        </Grid>\r\n                    ))}\r\n                </Grid>\r\n\r\n            </main>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Feedback;","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\students.js",["122","123","124"],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\studentdetails.js",["125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142"],"import React, { useEffect, useState, useContext } from 'react'\r\nimport { db } from '../firebase';\r\nimport { UserContext } from '../userContext';\r\n\r\nimport { useParams } from 'react-router-dom'\r\nimport { useForm, Controller } from \"react-hook-form\";\r\n\r\nimport Box from '@material-ui/core/Box'\r\nimport Toolbar from '@material-ui/core/Toolbar'\r\nimport { Typography } from '@material-ui/core'\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\r\nimport { Checkbox, TextField, Table, TableContainer, TableHead, TableRow, TableCell, TableBody, Paper, Card, CardMedia } from '@material-ui/core'\r\n\r\n\r\nexport default function StudentDetails() {\r\n\r\n    const { studentId } = useParams()\r\n    const { currentUser } = useContext(UserContext)\r\n    const [ studentDetails, setStudentDetails ] = useState({})\r\n    const [ updateStudent, setUpdateStudent ] = useState(false)\r\n    const { handleSubmit, control, reset } = useForm();\r\n    const onSubmit = data => console.log(data);\r\n    \r\n    useEffect(() => {\r\n        \r\n        if(studentId){\r\n            return db.collection(\"users\").doc(studentId).get()\r\n            .then((doc)=> {\r\n                if(doc.exists){\r\n                    let studentData = doc.data()\r\n                    setStudentDetails({...studentData, studentId: studentId})\r\n                } else {\r\n                    alert(\"I can't find that document\")\r\n                }\r\n            })\r\n        }\r\n\r\n    }, [studentId]);\r\n\r\n\r\n    console.log('reached the studentDetails component with id of '+studentId)\r\n    return (\r\n        <>\r\n            <Toolbar />\r\n\r\n            <Box sx={{flexGrow:1, p:3}} >\r\n                <p>Student Details</p>\r\n            </Box>\r\n\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n            <Controller\r\n                name=\"MyCheckbox\"\r\n                control={control}\r\n                defaultValue={false}\r\n                rules={{ required: true }}\r\n                render={({ field }) => <Checkbox {...field} />}\r\n            />\r\n            <section>\r\n            <label>MUI Checkbox</label>\r\n            <Controller\r\n            name=\"Checkbox\"\r\n            control={control}\r\n            defaultValue={\"\"}\r\n            render={({ field }) => (\r\n                <Checkbox\r\n                onChange={(e) => field.onChange(e.target.checked)}\r\n                checked={field.value}\r\n                />\r\n            )}\r\n            />\r\n            </section>\r\n            <input type=\"submit\" />\r\n            </form>\r\n\r\n        </>\r\n    )\r\n}\r\n",{"ruleId":"143","replacedBy":"144"},{"ruleId":"145","replacedBy":"146"},{"ruleId":"147","severity":1,"message":"148","line":28,"column":10,"nodeType":"149","messageId":"150","endLine":28,"endColumn":30},{"ruleId":"147","severity":1,"message":"151","line":39,"column":13,"nodeType":"149","messageId":"150","endLine":39,"endColumn":17},{"ruleId":"147","severity":1,"message":"152","line":53,"column":13,"nodeType":"149","messageId":"150","endLine":53,"endColumn":19},{"ruleId":"147","severity":1,"message":"151","line":103,"column":13,"nodeType":"149","messageId":"150","endLine":103,"endColumn":17},{"ruleId":"147","severity":1,"message":"152","line":119,"column":13,"nodeType":"149","messageId":"150","endLine":119,"endColumn":19},{"ruleId":"147","severity":1,"message":"153","line":11,"column":8,"nodeType":"149","messageId":"150","endLine":11,"endColumn":18},{"ruleId":"147","severity":1,"message":"154","line":73,"column":35,"nodeType":"149","messageId":"150","endLine":73,"endColumn":42},{"ruleId":"155","severity":1,"message":"156","line":137,"column":54,"nodeType":"157","messageId":"158","endLine":137,"endColumn":56},{"ruleId":"147","severity":1,"message":"159","line":8,"column":10,"nodeType":"149","messageId":"150","endLine":8,"endColumn":20},{"ruleId":"147","severity":1,"message":"153","line":11,"column":8,"nodeType":"149","messageId":"150","endLine":11,"endColumn":18},{"ruleId":"147","severity":1,"message":"160","line":29,"column":46,"nodeType":"149","messageId":"150","endLine":29,"endColumn":60},{"ruleId":"147","severity":1,"message":"161","line":36,"column":24,"nodeType":"149","messageId":"150","endLine":36,"endColumn":36},{"ruleId":"147","severity":1,"message":"162","line":325,"column":18,"nodeType":"149","messageId":"150","endLine":325,"endColumn":27},{"ruleId":"147","severity":1,"message":"159","line":10,"column":10,"nodeType":"149","messageId":"150","endLine":10,"endColumn":20},{"ruleId":"147","severity":1,"message":"163","line":11,"column":8,"nodeType":"149","messageId":"150","endLine":11,"endColumn":18},{"ruleId":"147","severity":1,"message":"164","line":12,"column":8,"nodeType":"149","messageId":"150","endLine":12,"endColumn":21},{"ruleId":"147","severity":1,"message":"165","line":13,"column":20,"nodeType":"149","messageId":"150","endLine":13,"endColumn":29},{"ruleId":"147","severity":1,"message":"166","line":13,"column":31,"nodeType":"149","messageId":"150","endLine":13,"endColumn":36},{"ruleId":"147","severity":1,"message":"167","line":13,"column":38,"nodeType":"149","messageId":"150","endLine":13,"endColumn":52},{"ruleId":"147","severity":1,"message":"168","line":13,"column":54,"nodeType":"149","messageId":"150","endLine":13,"endColumn":63},{"ruleId":"147","severity":1,"message":"169","line":13,"column":65,"nodeType":"149","messageId":"150","endLine":13,"endColumn":73},{"ruleId":"147","severity":1,"message":"170","line":13,"column":75,"nodeType":"149","messageId":"150","endLine":13,"endColumn":84},{"ruleId":"147","severity":1,"message":"171","line":13,"column":86,"nodeType":"149","messageId":"150","endLine":13,"endColumn":95},{"ruleId":"147","severity":1,"message":"172","line":13,"column":97,"nodeType":"149","messageId":"150","endLine":13,"endColumn":102},{"ruleId":"147","severity":1,"message":"173","line":13,"column":104,"nodeType":"149","messageId":"150","endLine":13,"endColumn":108},{"ruleId":"147","severity":1,"message":"174","line":13,"column":110,"nodeType":"149","messageId":"150","endLine":13,"endColumn":119},{"ruleId":"147","severity":1,"message":"175","line":19,"column":13,"nodeType":"149","messageId":"150","endLine":19,"endColumn":24},{"ruleId":"147","severity":1,"message":"176","line":20,"column":13,"nodeType":"149","messageId":"150","endLine":20,"endColumn":27},{"ruleId":"147","severity":1,"message":"177","line":21,"column":13,"nodeType":"149","messageId":"150","endLine":21,"endColumn":26},{"ruleId":"147","severity":1,"message":"178","line":21,"column":28,"nodeType":"149","messageId":"150","endLine":21,"endColumn":44},{"ruleId":"147","severity":1,"message":"179","line":22,"column":36,"nodeType":"149","messageId":"150","endLine":22,"endColumn":41},"no-native-reassign",["180"],"no-negated-in-lhs",["181"],"no-unused-vars","'PanoramaFishEyeSharp' is defined but never used.","Identifier","unusedVar","'body' is assigned a value but never used.","'errors' is assigned a value but never used.","'CardHeader' is defined but never used.","'loading' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Typography' is defined but never used.","'SecurityUpdate' is defined but never used.","'setUiLoading' is assigned a value but never used.","'setErrors' is assigned a value but never used.","'IconButton' is defined but never used.","'AddCircleIcon' is defined but never used.","'TextField' is defined but never used.","'Table' is defined but never used.","'TableContainer' is defined but never used.","'TableHead' is defined but never used.","'TableRow' is defined but never used.","'TableCell' is defined but never used.","'TableBody' is defined but never used.","'Paper' is defined but never used.","'Card' is defined but never used.","'CardMedia' is defined but never used.","'currentUser' is assigned a value but never used.","'studentDetails' is assigned a value but never used.","'updateStudent' is assigned a value but never used.","'setUpdateStudent' is assigned a value but never used.","'reset' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]