[{"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\index.js":"1","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\App.js":"2","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\reportWebVitals.js":"3","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\pages\\login.js":"4","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\pages\\home.js":"5","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\firebase.js":"6","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\note.js":"7","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\chips.js":"8","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\select.js":"9","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\UserContext.js":"10","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\contextChecker.js":"11","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\userContext.js":"12","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\studentSelect.js":"13","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\classes.js":"14"},{"size":500,"mtime":499162500000,"results":"15","hashOfConfig":"16"},{"size":843,"mtime":1612404744581,"results":"17","hashOfConfig":"16"},{"size":362,"mtime":499162500000,"results":"18","hashOfConfig":"16"},{"size":2648,"mtime":1615202622151,"results":"19","hashOfConfig":"16"},{"size":5490,"mtime":1615366647859,"results":"20","hashOfConfig":"16"},{"size":493,"mtime":1615299061161,"results":"21","hashOfConfig":"16"},{"size":14797,"mtime":1615207321836,"results":"22","hashOfConfig":"16"},{"size":275,"mtime":1612083806130,"results":"23","hashOfConfig":"16"},{"size":3664,"mtime":1613556553668,"results":"24","hashOfConfig":"16"},{"size":806,"mtime":1612357304510,"results":"25","hashOfConfig":"16"},{"size":311,"mtime":1612357855261,"results":"26","hashOfConfig":"16"},{"size":1913,"mtime":1615366895007,"results":"27","hashOfConfig":"16"},{"size":788,"mtime":1612954762300,"results":"28","hashOfConfig":"16"},{"size":11851,"mtime":1615203237113,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"ys4om1",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"32"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"32"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"32"},"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\index.js",[],["62","63"],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\App.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\reportWebVitals.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\pages\\login.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\pages\\home.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\firebase.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\note.js",["64","65"],"import React, { useState, useEffect } from 'react';\r\nimport firebase from '../firebase';\r\nimport Chips from './chips';\r\n\r\nimport withStyles from '@material-ui/core/styles/withStyles';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport Avatar from '@material-ui/core/Avatar';\r\n\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\r\nimport MuiDialogContent from '@material-ui/core/DialogContent';\r\n\r\nimport dayjs from 'dayjs';\r\nimport relativeTime from 'dayjs/plugin/relativeTime';\r\nimport MultipleSelect from './select';\r\n\r\nconst styles = (theme) => ({\r\n\tcontent: {\r\n\t\tflexGrow: 1,\r\n\t\tpadding: theme.spacing(3)\r\n\t},\r\n\tappBar: {\r\n\t\tposition: 'relative'\r\n\t},\r\n\ttitle: {\r\n\t\tmarginLeft: theme.spacing(2),\r\n\t\tflex: 1\r\n\t},\r\n\tsubmitButton: {\r\n\t\tdisplay: 'block',\r\n\t\tcolor: 'white',\r\n\t\ttextAlign: 'center',\r\n\t\tposition: 'absolute',\r\n\t\ttop: 14,\r\n\t\tright: 10\r\n\t},\r\n\tfloatingButton: {\r\n\t\tposition: 'fixed',\r\n\t\tbottom: 0,\r\n\t\tright: 0\r\n\t},\r\n\tform: {\r\n\t\twidth: '98%',\r\n\t\tmarginLeft: 13,\r\n\t\tmarginTop: theme.spacing(3)\r\n\t},\r\n\ttoolbar: theme.mixins.toolbar,\r\n\troot: {\r\n\t\tminWidth: 470\r\n\t},\r\n\tbullet: {\r\n\t\tdisplay: 'inline-block',\r\n\t\tmargin: '0 2px',\r\n\t\ttransform: 'scale(0.8)'\r\n\t},\r\n\tpos: {\r\n\t\tmarginBottom: 12\r\n\t},\r\n\tuiProgess: {\r\n\t\tposition: 'fixed',\r\n\t\tzIndex: '1000',\r\n\t\theight: '31px',\r\n\t\twidth: '31px',\r\n\t\tleft: '50%',\r\n\t\ttop: '35%'\r\n\t},\r\n\tdialogeStyle: {\r\n\t\tmaxWidth: '50%'\r\n\t},\r\n\tviewRoot: {\r\n\t\tmargin: 0,\r\n\t\tpadding: theme.spacing(2)\r\n\t},\r\n\tcloseButton: {\r\n\t\tposition: 'absolute',\r\n\t\tright: theme.spacing(1),\r\n\t\ttop: theme.spacing(1),\r\n\t\tcolor: theme.palette.grey[500]\r\n\t}\r\n});\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n\treturn <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nfunction Note(props) {\r\n\r\n    const [ user, setUser ] = useState(firebase.auth().currentUser)\r\n\r\n    const [ title, setTitle ] = useState('')\r\n    const [ body, setBody ] = useState('')\r\n    const [ todoId, setTodoId ] = useState('')\r\n    const [ newActivities, setNewActivities ] = useState([])\r\n\r\n    const [ errors, setErrors ] = useState([])\r\n    const [ open, setOpen ] = useState(false)\r\n    const [ uiLoading, setUiLoading ] = useState(true)\r\n    const [ buttonType, setButtonType ] = useState('')\r\n    const [ viewOpen, setViewOpen ] = useState(false)\r\n\r\n    const [ notes, setNotes ] = useState([]);\r\n\r\n    useEffect(() => {\r\n        // const fetchData = async () => {\r\n        //     const db = firebase.firestore();\r\n        //     const data = await db.collection(\"notes\").get();\r\n        //     setNotes(data.docs.map(doc => ({ ...doc.data(), id: doc.id })));\r\n        //     setUiLoading(false);\r\n        // };\r\n        // fetchData()\r\n\r\n        const db = firebase.firestore()\r\n        let recentDate = new Date('2020-01-29')\r\n        \r\n        console.log(user)\r\n        return db.collectionGroup(\"notes\").where(\"uid\", \"==\", user.uid)\r\n        .where(\"timestamp\", \">=\", recentDate)\r\n        .orderBy(\"timestamp\",\"desc\")\r\n        .onSnapshot(snapshot => {\r\n            const notesData = [];\r\n            snapshot.forEach(doc => notesData.push({ ...doc.data(), id: doc.id }));\r\n            setNotes(notesData)\r\n            setUiLoading(false)\r\n        })\r\n    }, []);\r\n\r\n    const handleTitleChange = (event) => setTitle(event.target.value);\r\n    const handleBodyChange = (event) => setBody(event.target.value);\r\n\r\n\tconst deleteTodoHandler = (data) => {\r\n        //setTodoId(data.todo.id)\r\n        console.log(todoId)\r\n        console.log(data.todo.id)\r\n        console.log(data)\r\n        //for some reason using todoId does not work even though same value as data.todo.id--async problem?\r\n        const db = firebase.firestore();\r\n        const document = db.collection('users').doc(user.uid).collection('notes').doc(data.todo.id)\r\n        document.delete()\r\n        .then(() => alert(\"Document deleted\"))\r\n        .then(() => setTodoId(''))\r\n        .catch((error) => console.error(\"Error deleting document\", error));\r\n    }\r\n\r\n\tconst handleEditClickOpen = (data) => {\r\n        setTitle(data.todo.title)\r\n        setBody(data.todo.body)\r\n        setTodoId(data.todo.id)\r\n        setButtonType('Edit')\r\n        setOpen(true)\r\n\t}\r\n\r\n\tconst handleViewOpen = (data) => {\r\n        setTitle(data.todo.title)\r\n        setBody(data.todo.body)\r\n        setViewOpen(true)\r\n\t}\r\n\r\n    const DialogTitle = withStyles(styles)((props) => {\r\n        const { children, onClose, classes, ...other } = props;\r\n        return (\r\n            <MuiDialogTitle disableTypography className={classes.root} {...other}>\r\n                <Typography variant=\"h6\">{children}</Typography>\r\n                {onClose ? (\r\n                    <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\r\n                        <CloseIcon />\r\n                    </IconButton>\r\n                ) : null}\r\n            </MuiDialogTitle>\r\n        );\r\n    });\r\n\r\n    const DialogContent = withStyles((theme) => ({\r\n        viewRoot: {\r\n            padding: theme.spacing(2)\r\n        }\r\n    }))(MuiDialogContent);\r\n\r\n    dayjs.extend(relativeTime);\r\n    const { classes } = props;\r\n\r\n    const handleClickOpen = () => {\r\n        setTitle('')\r\n        setBody('')\r\n        setTodoId('')\r\n        setButtonType('')\r\n        setOpen(true)\r\n    };\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        const db = firebase.firestore();\r\n\r\n        if (buttonType === 'Edit') {\r\n            let document = db.collection('users').doc(user.uid).collection('notes').doc(todoId);\r\n            document.update( {title : title, body : body, activities: newActivities} )\r\n        } else {\r\n            const newNote = {\r\n                title: title,\r\n                body: body,\r\n                createdAt: new Date().toISOString(),\r\n                timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n                uid: user.uid,\r\n                activities: newActivities\r\n            }\r\n            db.collection('users').doc(user.uid).collection('notes').add(newNote)\r\n            .then((doc)=>{\r\n                console.log(\"New note added to db\")\r\n                setOpen(false);\r\n            })\r\n            .catch((error) => {\r\n                setErrors(error)\r\n                setOpen(true)\r\n                console.error(error);\r\n                alert('Something went wrong' );\r\n            });\r\n        }\r\n    };\r\n\r\n    const dataList = [\r\n        {name:'Hands-on',uid: 'Hands-on'},\r\n        {name:'App-IT', uid: 'App-IT'},\r\n        {name:'Study', uid: 'Study'},\r\n        {name:'Problems', uid: 'Problems'},\r\n        {name:'Sharing', uid: 'Sharing'},\r\n        {name:'Connect', uid: 'Connect'}\r\n      ];\r\n\r\n    const handleViewClose = () => setViewOpen(false);\r\n\r\n    const handleClose = (event) => setOpen(false);\r\n\r\n    if (uiLoading === true) {\r\n        return (\r\n            <main className={classes.content}>\r\n                <div className={classes.toolbar} />\r\n                {uiLoading && <CircularProgress size={150} className={classes.uiProgess} />}\r\n            </main>\r\n        );\r\n    } else {\r\n        return (\r\n            <main className={classes.content}>\r\n                <div className={classes.toolbar} />\r\n\r\n                <IconButton\r\n                    className={classes.floatingButton}\r\n                    color=\"primary\"\r\n                    aria-label=\"Add Todo\"\r\n                    onClick={handleClickOpen}\r\n                >\r\n                    <AddCircleIcon style={{ fontSize: 60 }} />\r\n                </IconButton>\r\n                <Dialog fullScreen open={open} onClose={handleClose} TransitionComponent={Transition}>\r\n                    <AppBar className={classes.appBar}>\r\n                        <Toolbar>\r\n                            <IconButton edge=\"start\" color=\"inherit\" onClick={handleClose} aria-label=\"close\">\r\n                                <CloseIcon />\r\n                            </IconButton>\r\n                            <Typography variant=\"h6\" className={classes.title}>\r\n                                {buttonType === 'Edit' ? 'Edit Todo' : 'Create a new Todo'}\r\n                            </Typography>\r\n                            <Button\r\n                                autoFocus\r\n                                color=\"inherit\"\r\n                                onClick={handleSubmit}\r\n                                className={classes.submitButton}\r\n                            >\r\n                                {buttonType === 'Edit' ? 'Save' : 'Submit'}\r\n                            </Button>\r\n                        </Toolbar>\r\n                    </AppBar>\r\n\r\n                    <form className={classes.form} noValidate>\r\n                        <Grid container spacing={2}>\r\n                            <Grid item xs={12} key='title'>\r\n                                <TextField\r\n                                    variant=\"outlined\"\r\n                                    required\r\n                                    fullWidth\r\n                                    id=\"todoTitle\"\r\n                                    label=\"Todo Title\"\r\n                                    name=\"title\"\r\n                                    autoComplete=\"todoTitle\"\r\n                                    helperText={errors.title}\r\n                                    value={title}\r\n                                    error={errors.title ? true : false}\r\n                                    onChange={handleTitleChange}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={12} key=\"chips\">\r\n                                <MultipleSelect allOptions={dataList} getList={activities => setNewActivities(activities)}></MultipleSelect>\r\n                            </Grid>\r\n                            <Grid item xs={12} key=\"body\">\r\n                                <TextField\r\n                                    variant=\"outlined\"\r\n                                    required\r\n                                    fullWidth\r\n                                    id=\"todoDetails\"\r\n                                    label=\"Todo Details\"\r\n                                    name=\"body\"\r\n                                    autoComplete=\"todoDetails\"\r\n                                    multiline\r\n                                    rows={25}\r\n                                    rowsMax={25}\r\n                                    helperText={errors.body}\r\n                                    error={errors.body ? true : false}\r\n                                    onChange={handleBodyChange}\r\n                                    value={body}\r\n                                />\r\n                            </Grid>\r\n                        </Grid>\r\n                    </form>\r\n                </Dialog>\r\n\r\n                <Grid container spacing={2}>\r\n                    {notes.map((todo) => (\r\n                        <Grid item xs={12} sm={6} key = {todo.id}>\r\n                            <Card className={classes.root} variant=\"outlined\">\r\n                            <CardHeader\r\n                                avatar={\r\n                                <Avatar aria-label=\"recipe\" className={classes.avatar}>\r\n                                    R\r\n                                </Avatar>\r\n                                }\r\n                                title={todo.title}\r\n                                subheader= {dayjs(todo.createdAt).fromNow()+\" by author\"}\r\n                            />\r\n                                <CardContent>\r\n                                    {todo.activities && todo.activities.length > 0 && <Chips activities={todo.activities}></Chips>}\r\n                                    <Typography variant=\"body2\" component=\"p\">\r\n                                        {todo.body.substring(0, 65)+\"...\"}\r\n                                    </Typography>\r\n                                </CardContent>\r\n                                <CardActions>\r\n                                    <Button size=\"small\" color=\"primary\" onClick={() => handleViewOpen({ todo })}>\r\n                                        {' '}\r\n                                        View{' '}\r\n                                    </Button>\r\n                                    <Button size=\"small\" color=\"primary\" onClick={() => handleEditClickOpen({ todo })}>\r\n                                        Edit\r\n                                    </Button>\r\n                                    <Button size=\"small\" color=\"primary\" onClick={() => deleteTodoHandler({ todo })}>\r\n                                        Delete\r\n                                    </Button>\r\n                                </CardActions>\r\n                            </Card>\r\n                        </Grid>\r\n                    ))}\r\n                </Grid>\r\n\r\n                <Dialog\r\n                    onClose={handleViewClose}\r\n                    aria-labelledby=\"customized-dialog-title\"\r\n                    open={viewOpen}\r\n                    fullWidth\r\n                    classes={{ paperFullWidth: classes.dialogeStyle }}\r\n                >\r\n                    <DialogTitle id=\"customized-dialog-title\" onClose={handleViewClose}>\r\n                        {title}\r\n                    </DialogTitle>\r\n                    <DialogContent dividers>\r\n                        <TextField\r\n                            fullWidth\r\n                            id=\"todoDetails\"\r\n                            name=\"body\"\r\n                            multiline\r\n                            readOnly\r\n                            rows={1}\r\n                            rowsMax={25}\r\n                            value={body}\r\n                            InputProps={{\r\n                                disableUnderline: true\r\n                            }}\r\n                        />\r\n                    </DialogContent>\r\n                </Dialog>\r\n            </main>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(Note);\r\n","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\chips.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\select.js",["66","67"],"import React from 'react';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport Input from '@material-ui/core/Input';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Select from '@material-ui/core/Select';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Chip from '@material-ui/core/Chip';\r\nimport Paper from '@material-ui/core/Paper'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n    minWidth: 120,\r\n    maxWidth: 300,\r\n  },\r\n  chips: {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n  },\r\n  chip: {\r\n    margin: 2,\r\n  },\r\n  noLabel: {\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  root: {\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    flexWrap: 'wrap',\r\n    listStyle: 'none',\r\n    padding: theme.spacing(0.5),\r\n    margin: 0,\r\n    minHeight: 50,\r\n  },\r\n  row: {\r\n    display: 'flex',\r\n    flexFlow: 'row',\r\n    justifyContent: 'left',\r\n  }\r\n}));\r\n\r\nconst ITEM_HEIGHT = 48;\r\nconst ITEM_PADDING_TOP = 8;\r\nconst MenuProps = {\r\n  PaperProps: {\r\n    style: {\r\n      maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\r\n      width: 250,\r\n    },\r\n  },\r\n  anchorOrigin: {\r\n    vertical: \"bottom\",\r\n    horizontal: \"left\"\r\n  },\r\n  transformOrigin: {\r\n    vertical: \"top\",\r\n    horizontal: \"left\"\r\n  },\r\n  getContentAnchorEl: null\r\n};\r\n\r\n// const allOptions = [\r\n//   'Hands-on',\r\n//   'App-IT',\r\n//   'Study',\r\n//   'Problems',\r\n//   'Sharing',\r\n//   'Connect',\r\n// ];\r\n\r\nfunction getStyles(name, selectedOptions, theme) {\r\n  return {\r\n    fontWeight:\r\n      selectedOptions.indexOf(name) === -1\r\n        ? theme.typography.fontWeightRegular\r\n        : theme.typography.fontWeightMedium,\r\n  };\r\n}\r\n\r\nexport default function MultipleSelect(props) {\r\n  const allOptions = props.allOptions\r\n\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const [selectedOptions, setSelectedOptions] = React.useState([]);\r\n\r\n  const handleChange = (event) => {\r\n    console.log(\"selectedOptions are \"+event.target.value)\r\n    setSelectedOptions(event.target.value);\r\n    props.getList(event.target.value)\r\n  };\r\n\r\n  return (\r\n    <div className={classes.row}>\r\n        <div style={{justifyContent: 'left'}}>\r\n        <FormControl className={classes.formControl}>\r\n            <InputLabel id=\"demo-mutiple-checkbox-label\">Add Aspirations</InputLabel>\r\n            <Select\r\n            labelId=\"demo-mutiple-checkbox-label\"\r\n            id=\"demo-mutiple-checkbox\"\r\n            multiple\r\n            value={selectedOptions}\r\n            onChange={handleChange}\r\n            input={<Input />}\r\n            //renderValue={(selected) => selected.join(', ')}\r\n            renderValue={(selected) => ''}\r\n            MenuProps={MenuProps}\r\n            >\r\n            {allOptions.map((option) => (\r\n                <MenuItem key={option.uid} value={option.uid}>\r\n                    <Checkbox checked={selectedOptions.indexOf(option.uid) > -1} />\r\n                    <ListItemText primary={option.name} />\r\n                </MenuItem>\r\n            ))}\r\n            </Select>\r\n        </FormControl>\r\n      </div>\r\n      <div style={{justifyContent: 'center'}}>\r\n        <Paper component=\"ul\" className = {classes.root}>\r\n            {selectedOptions.map((data) => {\r\n                return (\r\n                <li key={data}>\r\n                    <Chip label={data} className={classes.chip}/>\r\n                </li>\r\n                );\r\n            })}\r\n        </Paper>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\UserContext.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\contextChecker.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\userContext.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\studentSelect.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\classes.js",["68"],"import React, { useState, useEffect } from 'react';\r\nimport firebase from '../firebase';\r\nimport Chips from './chips';\r\n\r\nimport withStyles from '@material-ui/core/styles/withStyles';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport MuiDialogContent from '@material-ui/core/DialogContent';\r\n\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\r\n\r\nimport dayjs from 'dayjs';\r\nimport relativeTime from 'dayjs/plugin/relativeTime';\r\nimport MultipleSelect from './select';\r\n\r\nconst styles = (theme) => ({\r\n\tcontent: {\r\n\t\tflexGrow: 1,\r\n\t\tpadding: theme.spacing(3)\r\n\t},\r\n\tappBar: {\r\n\t\tposition: 'relative'\r\n\t},\r\n\ttitle: {\r\n\t\tmarginLeft: theme.spacing(2),\r\n\t\tflex: 1\r\n\t},\r\n\tsubmitButton: {\r\n\t\tdisplay: 'block',\r\n\t\tcolor: 'white',\r\n\t\ttextAlign: 'center',\r\n\t\tposition: 'absolute',\r\n\t\ttop: 14,\r\n\t\tright: 10\r\n\t},\r\n\tfloatingButton: {\r\n\t\tposition: 'fixed',\r\n\t\tbottom: 0,\r\n\t\tright: 0\r\n\t},\r\n\tform: {\r\n\t\twidth: '98%',\r\n\t\tmarginLeft: 13,\r\n\t\tmarginTop: theme.spacing(3)\r\n\t},\r\n\ttoolbar: theme.mixins.toolbar,\r\n\troot: {\r\n\t\tminWidth: 220\r\n\t},\r\n\tbullet: {\r\n\t\tdisplay: 'inline-block',\r\n\t\tmargin: '0 2px',\r\n\t\ttransform: 'scale(0.8)'\r\n\t},\r\n\tpos: {\r\n\t\tmarginBottom: 12\r\n\t},\r\n\tuiProgess: {\r\n\t\tposition: 'fixed',\r\n\t\tzIndex: '1000',\r\n\t\theight: '31px',\r\n\t\twidth: '31px',\r\n\t\tleft: '50%',\r\n\t\ttop: '35%'\r\n\t},\r\n\tdialogeStyle: {\r\n\t\tmaxWidth: '50%'\r\n\t},\r\n\tviewRoot: {\r\n\t\tmargin: 0,\r\n\t\tpadding: theme.spacing(2)\r\n\t},\r\n\tcloseButton: {\r\n\t\tposition: 'absolute',\r\n\t\tright: theme.spacing(1),\r\n\t\ttop: theme.spacing(1),\r\n\t\tcolor: theme.palette.grey[500]\r\n\t}\r\n});\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n\treturn <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nfunction TeacherClasses(props) {\r\n\r\n    const [ user ] = useState(firebase.auth().currentUser)\r\n\r\n    const [ title, setTitle ] = useState('')\r\n    const [ body, setBody ] = useState('')\r\n    const [ selectedStudents, setSelectedStudents ] = useState([])\r\n    const [ currentClass, setCurrentClass ] = useState([])\r\n\r\n    const [ errors, setErrors ] = useState([])\r\n    const [ open, setOpen ] = useState(false)\r\n    const [ viewOpen, setViewOpen ] = useState(false)\r\n    const [ uiLoading, setUiLoading ] = useState(true)\r\n\r\n    const [ teacherClasses, setTeacherClasses ] = useState([]);\r\n    const [ notes, setNotes ] = useState([]);\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        const db = firebase.firestore()\r\n        \r\n        console.log(\"User\",user)\r\n        if(user){\r\n            return db.collection(\"users\").doc(user.uid).get()\r\n            .then((doc) => {\r\n                if (doc.exists) {\r\n                    let teacherData = doc.data()\r\n                    console.log(\"Document data:\", teacherData);\r\n                    setTeacherClasses(teacherData.classes)\r\n                    setUiLoading(false)\r\n                } else {\r\n                    // doc.data() will be undefined in this case\r\n                    console.log(\"No such teacher document!\");\r\n                }\r\n            })\r\n        }\r\n\r\n    }, [user]);\r\n\r\n    const DialogTitle = withStyles(styles)((props) => {\r\n        const { children, onClose, classes, ...other } = props;\r\n        return (\r\n            <MuiDialogTitle disableTypography className={classes.root} {...other}>\r\n                <Typography variant=\"h6\">{children}</Typography>\r\n                {onClose ? (\r\n                    <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\r\n                        <CloseIcon />\r\n                    </IconButton>\r\n                ) : null}\r\n            </MuiDialogTitle>\r\n        );\r\n    });\r\n\r\n    const DialogContent = withStyles((theme) => ({\r\n        viewRoot: {\r\n            padding: theme.spacing(2)\r\n        }\r\n    }))(MuiDialogContent);\r\n\r\n    dayjs.extend(relativeTime);\r\n    const { classes } = props;\r\n\r\n    const handleSelectOpen = (teacherClass) => {\r\n        setTitle(teacherClass.name)\r\n        setCurrentClass(teacherClass.students)\r\n        console.log(\"currentClass is \"+currentClass)\r\n        console.log(\"class title is \"+title)\r\n        console.log(\"passed array is \"+teacherClass.students)\r\n        setOpen(true)\r\n    };\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        const db = firebase.firestore();\r\n\r\n\t\tdb.collectionGroup('notes')\r\n        .where('uid','in',selectedStudents)\r\n        .get()\r\n\t\t.then((querySnapshot) => {\r\n            const notesData = [];\r\n            querySnapshot.forEach((doc) => {\r\n                notesData.push({ ...doc.data(), id: doc.id })\r\n                console.log(doc.id)\r\n            })\r\n            setNotes(notesData)\r\n\t\t\tsetOpen(false);\r\n\t\t})\r\n\t\t.catch((error) => {\r\n\t\t\tsetErrors(error)\r\n\t\t\tsetOpen(true)\r\n\t\t\tconsole.error(error);\r\n\t\t\talert('Something went wrong' );\r\n\t\t});\r\n    };\r\n\r\n    const handleViewOpen = (data) => {\r\n        setTitle(data.todo.title)\r\n        setBody(data.todo.body)\r\n        setViewOpen(true)\r\n\t}\r\n\r\n    const handleViewClose = () => setViewOpen(false);\r\n\r\n    const handleClose = (event) => setOpen(false);\r\n\r\n    if (uiLoading === true) {\r\n        return (\r\n            <main className={classes.content}>\r\n                <div className={classes.toolbar} />\r\n                {uiLoading && <CircularProgress size={150} className={classes.uiProgess} />}\r\n            </main>\r\n        );\r\n    } else {\r\n        return (\r\n            <main className={classes.content}>\r\n                <div className={classes.toolbar} />\r\n\r\n                <Dialog fullScreen open={open} onClose={handleClose} TransitionComponent={Transition}>\r\n                    <AppBar className={classes.appBar}>\r\n                        <Toolbar>\r\n                            <IconButton edge=\"start\" color=\"inherit\" onClick={handleClose} aria-label=\"close\">\r\n                                <CloseIcon />\r\n                            </IconButton>\r\n                            <Typography variant=\"h6\" className={classes.title}>\r\n                                Select students to view recent notes\r\n                            </Typography>\r\n                            <Button\r\n                                autoFocus\r\n                                color=\"inherit\"\r\n                                onClick={handleSubmit}\r\n                                className={classes.submitButton}\r\n                            >\r\n                                Submit\r\n                            </Button>\r\n                        </Toolbar>\r\n                    </AppBar>\r\n\r\n                    <form className={classes.form} noValidate>\r\n                        <Grid container spacing={2}>\r\n                            <Grid item xs={12} key='title'>\r\n\t\t\t\t\t\t\t\t<DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\r\n\t\t\t\t\t\t\t\t\t{title}\r\n\t\t\t\t\t\t\t\t</DialogTitle>\r\n                            </Grid>\r\n                            <Grid item xs={12} key=\"chips\">\r\n                                <MultipleSelect allOptions={currentClass} getList={selectedStudents => setSelectedStudents(selectedStudents)}></MultipleSelect>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </form>\r\n                </Dialog>\r\n\r\n                <Grid container spacing={8} justify='center'>\r\n                    {teacherClasses.map((teacherClass) => (\r\n                        <Grid item xs={8} sm={6} key = {teacherClass.name}>\r\n                            <Card className={classes.root} variant=\"outlined\">\r\n                                <CardContent>\r\n                                    <Typography variant=\"h6\" component=\"h3\">\r\n                                        {teacherClass.name}\r\n                                    </Typography>\r\n                                </CardContent>\r\n                                <CardActions>\r\n                                    <Button size=\"small\" color=\"primary\" onClick={() => handleSelectOpen( teacherClass )}>\r\n                                        {' '}\r\n                                        Select Students{' '}\r\n                                    </Button>\r\n                                </CardActions>\r\n                            </Card>\r\n                        </Grid>\r\n                    ))}\r\n                </Grid>\r\n\r\n                { notes && notes.length > 0 && \r\n                <div>\r\n                      <Grid container spacing={2}>\r\n                      {notes.map((todo) => (\r\n                          <Grid item xs={12} sm={6} key = {todo.id}>\r\n                              <Card className={classes.root} variant=\"outlined\">\r\n                                  <CardContent>\r\n                                      <Typography variant=\"h6\" component=\"h3\">\r\n                                          {todo.title}\r\n                                      </Typography>\r\n                                      {todo.activities && todo.activities.length > 0 && <Chips activities={todo.activities}></Chips>}\r\n                                      <Typography className={classes.pos} color=\"textSecondary\">\r\n                                          {dayjs(todo.createdAt).fromNow()}\r\n                                      </Typography>\r\n                                      <Typography variant=\"body2\" component=\"p\">\r\n                                          {todo.body.substring(0, 65)+\"...\"}\r\n                                      </Typography>\r\n                                  </CardContent>\r\n                                  <CardActions>\r\n                                      <Button size=\"small\" color=\"primary\" onClick={() => handleViewOpen({ todo })}>\r\n                                          {' '}\r\n                                          View{' '}\r\n                                      </Button>\r\n                                  </CardActions>\r\n                              </Card>\r\n                          </Grid>\r\n                      ))}\r\n                  </Grid>\r\n  \r\n                  <Dialog\r\n                      onClose={handleViewClose}\r\n                      aria-labelledby=\"customized-dialog-title\"\r\n                      open={viewOpen}\r\n                      fullWidth\r\n                      classes={{ paperFullWidth: classes.dialogeStyle }}\r\n                  >\r\n                      <DialogTitle id=\"customized-dialog-title\" onClose={handleViewClose}>\r\n                          {title}\r\n                      </DialogTitle>\r\n                      <DialogContent dividers>\r\n                          <TextField\r\n                              fullWidth\r\n                              id=\"todoDetails\"\r\n                              name=\"body\"\r\n                              multiline\r\n                              readonly\r\n                              rows={1}\r\n                              rowsMax={25}\r\n                              value={body}\r\n                              InputProps={{\r\n                                  disableUnderline: true\r\n                              }}\r\n                          />\r\n                      </DialogContent>\r\n                  </Dialog>\r\n                </div>  \r\n                }\r\n\r\n            </main>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(TeacherClasses);\r\n",{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","severity":1,"message":"74","line":102,"column":19,"nodeType":"75","messageId":"76","endLine":102,"endColumn":26},{"ruleId":"77","severity":1,"message":"78","line":139,"column":8,"nodeType":"79","endLine":139,"endColumn":10,"suggestions":"80"},{"ruleId":"73","severity":1,"message":"81","line":74,"column":10,"nodeType":"75","messageId":"76","endLine":74,"endColumn":19},{"ruleId":"73","severity":1,"message":"82","line":87,"column":9,"nodeType":"75","messageId":"76","endLine":87,"endColumn":14},{"ruleId":"73","severity":1,"message":"83","line":106,"column":13,"nodeType":"75","messageId":"76","endLine":106,"endColumn":19},"no-native-reassign",["84"],"no-negated-in-lhs",["85"],"no-unused-vars","'setUser' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'user'. Either include it or remove the dependency array.","ArrayExpression",["86"],"'getStyles' is defined but never used.","'theme' is assigned a value but never used.","'errors' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"87","fix":"88"},"Update the dependencies array to be: [user]",{"range":"89","text":"90"},[3993,3995],"[user]"]