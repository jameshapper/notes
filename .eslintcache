[{"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\index.js":"1","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\App.js":"2","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\reportWebVitals.js":"3","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\pages\\login.js":"4","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\pages\\home.js":"5","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\firebase.js":"6","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\note.js":"7","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\chips.js":"8","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\select.js":"9","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\UserContext.js":"10","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\contextChecker.js":"11","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\userContext.js":"12","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\classes.js":"13","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\account.js":"14","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\editortest2.js":"15","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\listcards.js":"16","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\viewnotes.js":"17","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\temp.js":"18","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\badges.js":"19","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\App2.js":"20","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\layout.js":"21","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\badgedetails.js":"22","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\feedback.js":"23","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\students.js":"24","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\studentdetails.js":"25","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\badgeform.js":"26","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\badgeform2.js":"27","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\mybadges.js":"28","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\mybadgedetails.js":"29","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\mybadgeslist.js":"30","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\progressbar.js":"31","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\listcards2.js":"32"},{"size":531,"mtime":1625478177503,"results":"33","hashOfConfig":"34"},{"size":845,"mtime":1625471999625,"results":"35","hashOfConfig":"34"},{"size":362,"mtime":499162500000,"results":"36","hashOfConfig":"34"},{"size":2742,"mtime":1626062957702,"results":"37","hashOfConfig":"34"},{"size":5802,"mtime":1625471999635,"results":"38","hashOfConfig":"34"},{"size":678,"mtime":1618708206546,"results":"39","hashOfConfig":"34"},{"size":12713,"mtime":1627196412911,"results":"40","hashOfConfig":"34"},{"size":275,"mtime":1615975291635,"results":"41","hashOfConfig":"34"},{"size":2789,"mtime":1625471999633,"results":"42","hashOfConfig":"34"},{"size":806,"mtime":1612357304510,"results":"43","hashOfConfig":"34"},{"size":311,"mtime":1612357855261,"results":"44","hashOfConfig":"34"},{"size":1721,"mtime":1627033157186,"results":"45","hashOfConfig":"34"},{"size":15279,"mtime":1626252149228,"results":"46","hashOfConfig":"34"},{"size":3070,"mtime":1625471999626,"results":"47","hashOfConfig":"34"},{"size":1170,"mtime":1624461495102,"results":"48","hashOfConfig":"34"},{"size":2931,"mtime":1625471999630,"results":"49","hashOfConfig":"34"},{"size":4157,"mtime":1625471999633,"results":"50","hashOfConfig":"34"},{"size":15562,"mtime":1620273505241,"results":"51","hashOfConfig":"52"},{"size":3295,"mtime":1626922543349,"results":"53","hashOfConfig":"34"},{"size":3361,"mtime":1626842518690,"results":"54","hashOfConfig":"34"},{"size":5548,"mtime":1626956647010,"results":"55","hashOfConfig":"34"},{"size":6028,"mtime":1627028788523,"results":"56","hashOfConfig":"34"},{"size":3552,"mtime":1626056726065,"results":"57","hashOfConfig":"34"},{"size":20157,"mtime":1626514264418,"results":"58","hashOfConfig":"34"},{"size":3126,"mtime":1626958971453,"results":"59","hashOfConfig":"34"},{"size":8215,"mtime":1626665072572,"results":"60","hashOfConfig":"34"},{"size":9389,"mtime":1626789280067,"results":"61","hashOfConfig":"34"},{"size":2455,"mtime":1627122833458,"results":"62","hashOfConfig":"34"},{"size":3974,"mtime":1626928674383,"results":"63","hashOfConfig":"34"},{"size":1056,"mtime":1627037479146,"results":"64","hashOfConfig":"34"},{"size":1175,"mtime":1627122746672,"results":"65","hashOfConfig":"34"},{"size":6050,"mtime":1627201334253,"results":"66","hashOfConfig":"34"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},"ys4om1",{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"69"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"x9ovq5",{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"69"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"69"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"69"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"69"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"69"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":24,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"69"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"127","messages":"128","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"69"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"69"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"69"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140","usedDeprecatedRules":"69"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\index.js",[],["143","144"],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\App.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\reportWebVitals.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\pages\\login.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\pages\\home.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\firebase.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\note.js",["145"],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\chips.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\select.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\UserContext.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\contextChecker.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\userContext.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\classes.js",["146","147","148"],"import React, { useState, useEffect, useContext } from 'react';\r\nimport firebase, { db, auth } from '../firebase';\r\nimport { UserContext } from '../userContext';\r\nimport ListCards from './listcards'\r\nimport ViewNotes from './viewnotes'\r\n\r\nimport Datepicker from 'react-datepicker'\r\nimport 'react-datepicker/dist/react-datepicker.css'\r\nimport dayjs from 'dayjs';\r\nimport relativeTime from 'dayjs/plugin/relativeTime';\r\nimport MultiSelect from \"react-multi-select-component\";\r\n\r\nimport Box from '@material-ui/core/Box'\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\r\nimport { PanoramaFishEyeSharp } from '@material-ui/icons';\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n\treturn <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nfunction TeacherClasses(props) {\r\n\r\n    const [ user ] = useState(auth.currentUser)\r\n\r\n    const [ title, setTitle ] = useState('')\r\n    const [ body, setBody ] = useState('')\r\n    const [ noteId, setNoteId ] = useState('')\r\n    const [ studentId, setStudentId ] = useState('')\r\n\r\n    const [ students10, setStudents10 ] = useState([])\r\n    const [ students20, setStudents20 ] = useState([])\r\n    const [ students30, setStudents30 ] = useState([])\r\n\r\n    const [ currentClass, setCurrentClass ] = useState([])\r\n    const [ created, setCreated ] = useState(\"\")\r\n    const [ author, setAuthor ] = useState(\"\")\r\n    const [ noteAvatar, setNoteAvatar ] = useState(\"\")\r\n    const [ classForSelect, setClassForSelect ] = useState([])\r\n\r\n    const [ errors, setErrors ] = useState([])\r\n    const [ open, setOpen ] = useState(false)\r\n    const [ viewOpen, setViewOpen ] = useState(false)\r\n    const [ uiLoading, setUiLoading ] = useState(true)\r\n\r\n    const [ teacherClasses, setTeacherClasses ] = useState([]);\r\n    const [ notes, setNotes ] = useState([]);\r\n    const [ selectedDate, setSelectedDate ] = useState(new Date(Date.now() - 604800000))\r\n\r\n    const [ selected, setSelected ] = useState([])\r\n    const [ rt, setRt ] = useState(\"\")\r\n    const [ commentBody, setCommentBody ] = useState(\"\")\r\n    const [ commentRt, setCommentRt ] = useState(\"\")\r\n    const [ comments, setComments ] = useState([])\r\n\r\n    const { avatar } = useContext(UserContext)\r\n\r\n/*     useEffect(() => {\r\n        \r\n        console.log(\"User\",user)\r\n        if(user){\r\n            return db.collection(\"users\").doc(user.uid).get()\r\n            .then((doc) => {\r\n                if (doc.exists) {\r\n                    let teacherData = doc.data()\r\n                    console.log(\"Document data:\", teacherData);\r\n                    setTeacherClasses(teacherData.classes)\r\n                    setUiLoading(false)\r\n                } else {\r\n                    // doc.data() will be undefined in this case\r\n                    console.log(\"No such teacher document!\");\r\n                }\r\n            })\r\n        }\r\n\r\n    }, [user]); */\r\n\r\n    //alternate way to get class data (if stored in teacherClasses collection?)\r\n    useEffect(() => {\r\n        \r\n        if(user){\r\n            return db.collection(\"users\").doc(user.uid).collection('teacherClasses').get()\r\n            .then((snapshot) => {\r\n                const teacherData = []\r\n                snapshot.forEach((doc) => {\r\n                    teacherData.push({...doc.data(), id: doc.id})\r\n                })\r\n                setTeacherClasses(teacherData)\r\n                setUiLoading(false)\r\n            })\r\n            .catch((error) => {\r\n                console.log(\"No classes error: \", error);\r\n            })\r\n        }\r\n\r\n    }, [user]);\r\n\r\n    useEffect(() => {\r\n        //console.log('selected ids are '+selected.map((student) => student.value))\r\n        //setSelectedStudents(selected.map(a => a.value))\r\n        setStudents10(selected.map(a=>a.value).slice(0,10))\r\n        setStudents20(selected.map(a=>a.value).slice(10,20))\r\n        setStudents30(selected.map(a=>a.value).slice(20,30))\r\n\r\n    },[selected])\r\n\r\n    const DialogTitle = ((props) => {\r\n        const { children, onClose, classes, ...other } = props;\r\n        return (\r\n            <MuiDialogTitle disableTypography sx={{minWidth:220}} {...other}>\r\n                <Typography variant=\"h6\">{children}</Typography>\r\n                {onClose ? (\r\n                    <IconButton aria-label=\"close\" sx={{\r\n                        position: 'absolute',\r\n                        right: 8,\r\n                        top: 9,\r\n                        color: '#e0e0e0'\r\n                    }} onClick={onClose}>\r\n                        <CloseIcon />\r\n                    </IconButton>\r\n                ) : null}\r\n            </MuiDialogTitle>\r\n        );\r\n    });\r\n\r\n    dayjs.extend(relativeTime);\r\n    const { classes } = props;\r\n\r\n    const handleSelectOpen = (teacherClass) => {\r\n        setTitle(teacherClass.name)\r\n        setCurrentClass(teacherClass.students)\r\n        setOpen(true)\r\n    };\r\n\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault();\r\n        let notes10 = []\r\n        let notes20 = []\r\n        let notes30 = []\r\n\r\n        let recentDate = selectedDate\r\n        console.log('students in array groups lengths '+students10.length+students20.length+students30.length)\r\n\r\n        if(students10.length>0){\r\n            let first10 = await\r\n            db.collectionGroup('notes')\r\n            .where('uid','in', students10)\r\n            .where(\"timestamp\", \">=\", recentDate)\r\n            .orderBy(\"timestamp\",\"desc\")\r\n            .get()\r\n\r\n            first10.forEach((doc) => {\r\n                notes10.push({ ...doc.data(), id: doc.id })\r\n            })\r\n        }\r\n\r\n        if(students20.length>0){\r\n            let second10 = await\r\n            db.collectionGroup('notes')\r\n            .where('uid','in', students20)\r\n            .where(\"timestamp\", \">=\", recentDate)\r\n            .orderBy(\"timestamp\",\"desc\")\r\n            .get()\r\n\r\n            second10.forEach((doc) => {\r\n            notes20.push({ ...doc.data(), id: doc.id })\r\n            })\r\n        }\r\n\r\n        if(students30.length>0){\r\n            let third10 = await\r\n            db.collectionGroup('notes')\r\n            .where('uid','in', students30)\r\n            .where(\"timestamp\", \">=\", recentDate)\r\n            .orderBy(\"timestamp\",\"desc\")\r\n            .get()\r\n\r\n            third10.forEach((doc) => {\r\n            notes30.push({ ...doc.data(), id: doc.id })\r\n            })\r\n        }\r\n\r\n        setNotes(notes10.concat(notes20,notes30))\r\n        setOpen(false)\r\n        //console.log(\"notes10 is \"+notes10.length+\" notes20 is \"+notes20.length+\" and notes30 is \"+notes30.length)\r\n\r\n    };\r\n\r\n    const handleSubmitComment = (event) => {\r\n        event.preventDefault();\r\n\r\n        if (commentBody) {\r\n            const newComment = {\r\n                body: commentBody,\r\n                createdAt: new Date().toISOString(),\r\n                timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n                uid: user.uid,\r\n                author: user.displayName,\r\n                avatar: avatar,\r\n                rt: commentRt,\r\n                studentId: studentId,\r\n                noteId: noteId\r\n            }\r\n            db.collection('users').doc(studentId).collection('notes').doc(noteId).collection('comments').add(newComment)\r\n            .then((doc)=>{\r\n                console.log(\"New comment added to db\")\r\n                setViewOpen(false);\r\n            })\r\n            .then(() => {\r\n                let noteRef = db.collection('users').doc(studentId).collection('notes').doc(noteId)\r\n                noteRef.update({ commentNum: firebase.firestore.FieldValue.increment(1)})\r\n            })\r\n            .catch((error) => {\r\n                setErrors(error)\r\n                setOpen(true)\r\n                console.error(error);\r\n                alert('Something went wrong' );\r\n            });\r\n        } else {\r\n            alert(\"No empty comments\")\r\n        }\r\n\r\n    };\r\n\r\n    const handleViewOpen = (note) => {\r\n        setTitle(note.title)\r\n        setBody(note.body)\r\n        setNoteId(note.id)\r\n        setStudentId(note.uid)\r\n        setCreated(note.createdAt)\r\n        setAuthor(note.author)\r\n        setRt(note.rt)\r\n        setNoteAvatar(note.avatar)\r\n        setViewOpen(true)\r\n\t}\r\n\r\n    useEffect(() => {\r\n        \r\n        if(noteId){\r\n            return db.collectionGroup(\"comments\")\r\n            .where(\"noteId\",\"==\",noteId)\r\n            .get()\r\n            .then((querySnapshot) => {\r\n                const commentsData = [];\r\n                querySnapshot.forEach((doc) => {\r\n                    commentsData.push({ ...doc.data(), id: doc.id })\r\n                    console.log(\"comment doc id is \"+doc.id)\r\n                })\r\n                setComments(commentsData)\r\n            })\r\n            .catch((error) => {\r\n                alert('something wrong while looking for comments')\r\n                console.log(error)\r\n            })\r\n        }\r\n    }, [noteId]);\r\n\r\n    useEffect(() => {\r\n        const toLabelValue = currentClass.map((student) => {\r\n            return {\r\n                label: student.firstName,\r\n                value: student.uid\r\n            }\r\n        })\r\n        setClassForSelect(toLabelValue)\r\n    },[currentClass])\r\n\r\n    const handleViewClose = () => setViewOpen(false);\r\n\r\n    const handleClose = (event) => setOpen(false);\r\n\r\n    if (uiLoading === true) {\r\n        return (\r\n            <main sx={{flexGrow:1, p:3}} >\r\n                <Toolbar />\r\n                {uiLoading && <CircularProgress size={150} sx={{\r\n                    position: 'fixed',\r\n                    zIndex: '1000',\r\n                    height: '31px',\r\n                    width: '31px',\r\n                    left: '50%',\r\n                    top: '35%'\r\n                }} />}\r\n            </main>\r\n        );\r\n    } else {\r\n        return (\r\n            <main sx={{flexGrow:1, p: 3}}>\r\n                <Toolbar />\r\n\r\n                <Dialog fullScreen open={open} onClose={handleClose} TransitionComponent={Transition}>\r\n                    <AppBar sx={{position: 'relative'}} >\r\n                        <Toolbar>\r\n                            <IconButton edge=\"start\" color=\"inherit\" onClick={handleClose} aria-label=\"close\">\r\n                                <CloseIcon />\r\n                            </IconButton>\r\n                            <Typography variant=\"h6\" sx={{ml:2, flex:1}} >\r\n                                Select students to view recent notes\r\n                            </Typography>\r\n                            <Button\r\n                                autoFocus\r\n                                color=\"inherit\"\r\n                                onClick={handleSubmit}\r\n                                sx={{\r\n                                    display: 'block',\r\n                                    color: 'white',\r\n                                    textAlign: 'center',\r\n                                    position: 'absolute',\r\n                                    top: 14,\r\n                                    right: 10\r\n                                }}\r\n                            >\r\n                                Submit\r\n                            </Button>\r\n                        </Toolbar>\r\n                    </AppBar>\r\n\r\n                    <Box component=\"form\"\r\n                    sx={{\r\n                        width: '98%',\r\n                        marginLeft: 2,\r\n                        marginTop: 3\r\n                    }} noValidate>\r\n                        <Grid container spacing={2}>\r\n                            <Grid item xs={12} key='date'>\r\n                                <Typography>\r\n                                    How far back do you want to see notes?\r\n                                </Typography>\r\n                                <Datepicker \r\n                                    selected={selectedDate} \r\n                                    onChange={date => setSelectedDate(date)}\r\n                                    maxDate={new Date()}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={12} key='title'>\r\n\t\t\t\t\t\t\t\t<DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\r\n\t\t\t\t\t\t\t\t\t{title}\r\n\t\t\t\t\t\t\t\t</DialogTitle>\r\n                            </Grid>\r\n\r\n                            <Grid>\r\n                                <div>\r\n                                    <h1>Select Students</h1>\r\n                                    <MultiSelect\r\n                                    options={classForSelect}\r\n                                    value={selected}\r\n                                    onChange={setSelected}\r\n                                    labelledBy={\"Select\"}\r\n                                    />\r\n                                </div>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Box>\r\n                </Dialog>\r\n\r\n                <Grid container spacing={8} justify='center'>\r\n                    {teacherClasses.map((teacherClass) => (\r\n                        <Grid item xs={8} sm={6} key = {teacherClass.name}>\r\n                            <Card sx={{minWidth:220}} variant=\"outlined\">\r\n                                <CardContent>\r\n                                    <Typography variant=\"h6\" component=\"h3\">\r\n                                        {teacherClass.name}\r\n                                    </Typography>\r\n                                </CardContent>\r\n                                <CardActions>\r\n                                    <Button size=\"small\" color=\"primary\" onClick={() => handleSelectOpen( teacherClass )}>\r\n                                        {' '}\r\n                                        Select Students{' '}\r\n                                    </Button>\r\n                                </CardActions>\r\n                            </Card>\r\n                        </Grid>\r\n                    ))}\r\n                </Grid>\r\n\r\n                { notes && notes.length > 0 && \r\n                    <ListCards notes={notes} handleEditOpen={()=>alert('permission denied')} handleViewOpen={handleViewOpen} deleteNoteHandler={()=>alert('permission denied')} canEdit={false}/>\r\n                }\r\n  \r\n                <ViewNotes handleViewClose={handleViewClose} viewOpen={viewOpen} title={title} author={author} created={created} avatar={noteAvatar} comments={comments} rt={rt} classes={classes} handleSubmitComment={handleSubmitComment} setCommentBody={setCommentBody} setCommentRt={setCommentRt} commentRt={commentRt}/>\r\n\r\n            </main>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TeacherClasses;\r\n","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\account.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\editortest2.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\listcards.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\viewnotes.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\temp.js",["149","150"],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\badges.js",["151"],"import React, { useState, useContext, useEffect } from 'react';\r\nimport { db } from '../firebase';\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport Toolbar from '@material-ui/core/Toolbar'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Card from '@material-ui/core/Card'\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport Button from '@material-ui/core/Button'\r\nimport CardHeader from '@material-ui/core/CardHeader'\r\nimport CardMedia from '@material-ui/core/CardMedia'\r\nimport CardContent from '@material-ui/core/CardContent'\r\nimport { Typography } from '@material-ui/core';\r\nimport { UserContext } from '../userContext';\r\n\r\nfunction Badges(props) {\r\n\r\n    const { loading } = useContext(UserContext)\r\n\r\n    const [ badges, setBadges ] = useState([])\r\n    const [ uiLoading, setUiLoading ] = useState(loading)\r\n\r\n    useEffect(() => {\r\n        \r\n        return db.collection(\"badges\")\r\n\r\n        .onSnapshot(snapshot => {\r\n            const badgesData = [];\r\n            snapshot.forEach(doc => badgesData.push({ ...doc.data(), id: doc.id }));\r\n            setBadges(badgesData)\r\n            setUiLoading(false)\r\n            console.log('badges are '+badgesData)\r\n        })\r\n    }, []);\r\n\r\n    if (uiLoading === true) {\r\n        return (\r\n            <main sx={{flexGrow:1, p:3}} >\r\n                <Toolbar />\r\n                {uiLoading && <CircularProgress size={150} sx={{\r\n                    position: 'fixed',\r\n                    zIndex: '1000',\r\n                    height: '31px',\r\n                    width: '31px',\r\n                    left: '50%',\r\n                    top: '35%'\r\n                }} />}\r\n            </main>\r\n        );\r\n    } else {\r\n        return (\r\n            <main sx={{flexGrow:1, p:3}}>\r\n            <Toolbar />\r\n            <Button component={Link} to={'/badgeForm'} size='small' variant='contained' >Add Badge</Button>\r\n\r\n            <Grid container spacing={2}>\r\n                    {badges && badges.length>0 && badges.map((badge) => (\r\n                        <Grid item xs={12} sm={6} key = {badge.id}>\r\n                            <Card sx={{ maxWidth: 345 }}>\r\n                            <CardMedia\r\n                                sx={{ height: 140 }}\r\n                                image={badge.imageUrl}\r\n                                title=\"Contemplative Reptile\"\r\n                            />\r\n                            <CardContent>\r\n                                <Typography gutterBottom variant=\"h5\" component=\"div\">\r\n                                {badge.badgename}\r\n                                </Typography>\r\n                                <Typography variant=\"body2\" color=\"text.secondary\">\r\n                                {badge.description}\r\n                                </Typography>\r\n                            </CardContent>\r\n                            <CardActions>\r\n                                <Button component={Link} to={`/badges/${badge.id}`} size=\"small\">See Details</Button>\r\n                            </CardActions>\r\n                            </Card>\r\n                        </Grid>\r\n                    ))}\r\n                </Grid>\r\n\r\n            </main>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Badges;","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\App2.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\layout.js",["152","153"],"import { useContext, useState, useEffect } from 'react'\r\nimport { useHistory, useLocation } from \"react-router-dom\";\r\nimport { UserContext } from \"../userContext\"\r\n\r\nimport Box from '@material-ui/core/Box'\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport List from '@material-ui/core/List';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport AccountBoxIcon from '@material-ui/icons/AccountBox';\r\nimport NotesIcon from '@material-ui/icons/Notes';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\r\nimport ShieldIcon from '@material-ui/icons/Shield';\r\nimport { EmojiPeople, RateReview } from '@material-ui/icons';\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst menuItemsUser = [\r\n    { \r\n        text: 'My Plans', \r\n        icon: <NotesIcon color=\"secondary\" />, \r\n        path: '/' \r\n    },\r\n    { \r\n        text: 'Account', \r\n        icon: <AccountBoxIcon color=\"secondary\" />, \r\n        path: '/account' \r\n    },\r\n    {\r\n        text: 'Badges',\r\n        icon: <ShieldIcon color=\"secondary\" />,\r\n        path: '/badges'\r\n    },\r\n    {\r\n        text: 'MyBadges',\r\n        icon: <ShieldIcon color=\"primary\" />,\r\n        path: '/myBadges'\r\n    }\r\n  ];\r\n\r\n  const menuItemsAdmin = [\r\n    { \r\n        text: 'My Classes', \r\n        icon: <NotesIcon color=\"secondary\" />, \r\n        path: '/classes' \r\n    },\r\n    { \r\n        text: 'Account', \r\n        icon: <AccountBoxIcon color=\"secondary\" />, \r\n        path: '/account' \r\n    },\r\n    {\r\n        text: 'Badges',\r\n        icon: <ShieldIcon color=\"secondary\" />,\r\n        path: '/badges'\r\n    },\r\n    {\r\n        text: 'Feedback',\r\n        icon: <RateReview color=\"secondary\" />,\r\n        path: '/feedback'\r\n    },\r\n    {\r\n        text: 'Students',\r\n        icon: <EmojiPeople color=\"secondary\" />,\r\n        path: '/students'\r\n    }\r\n  ];\r\n\r\nfunction Layout({ children }) {\r\n\r\n    const { currentUser, isAdmin, loading, avatar, logout } = useContext(UserContext);\r\n    const location = useLocation()\r\n    const [ menuItems, setMenuItems ] = useState([])\r\n\r\n    let history = useHistory();\r\n\r\n    if(currentUser){\r\n        console.log('In Layout user is Admin is '+isAdmin)\r\n    } else {\r\n        history.push('/login')\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(isAdmin){\r\n            setMenuItems(menuItemsAdmin)\r\n        } else {\r\n            setMenuItems(menuItemsUser)\r\n        }\r\n    },[isAdmin])\r\n\r\n\tconst logoutHandler = async(event) => {\r\n        console.log('Logout Clicked');\r\n        await logout().then(() => {\r\n            history.push('/login')\r\n          }).catch((error) => {\r\n            console.log('Error signing out')\r\n          });;\r\n\t};\r\n\r\n    if(currentUser) {\r\n        return (\r\n            <Box sx={{display:'flex'}}>\r\n                <CssBaseline />\r\n                <AppBar position=\"fixed\" sx={{zIndex: (theme) => theme.zIndex.drawer + 1}} >\r\n                    <Toolbar>\r\n                        <Typography variant=\"h6\" noWrap>\r\n                            NotesApp\r\n                        </Typography>\r\n                    </Toolbar>\r\n                </AppBar>\r\n                <Drawer\r\n                    variant=\"permanent\"\r\n                    sx={{\r\n                        width: drawerWidth,\r\n                        flexShrink: 0,\r\n                        '& .MuiDrawer-paper': { boxSizing: 'border-box', width: drawerWidth },\r\n                        }}\r\n                >\r\n                    <Toolbar />\r\n                    <Divider />\r\n                    <center>\r\n                        <Avatar alt=\"User Avatar\" src={avatar} sx={{height: 110, width: 100, flexShrink: 0, flexGrow: 0, marginTop: 2}} />\r\n                        <p>\r\n                            {' '}\r\n                            {currentUser && currentUser.displayName ? currentUser.displayName : \"Welcome!\"}\r\n                        </p>\r\n                    </center>\r\n                    <Divider />\r\n                    <List>\r\n                    {menuItems.map((item) => (\r\n                        <ListItem \r\n                        button \r\n                        key={item.text} \r\n                        onClick={() => history.push(item.path)}\r\n                        className={location.pathname == item.path ? null : null}\r\n                        >\r\n                        <ListItemIcon>{item.icon}</ListItemIcon>\r\n                        <ListItemText primary={item.text} />\r\n                        </ListItem>\r\n                    ))}\r\n                        <ListItem\r\n                        button\r\n                        key='logout'\r\n                        onClick={logoutHandler}\r\n                        >\r\n                            <ListItemIcon>\r\n                                {' '}\r\n                                <ExitToAppIcon />{' '}\r\n                                <ListItemText primary='Logout' />\r\n                            </ListItemIcon>\r\n                        </ListItem>\r\n                    </List>\r\n                </Drawer>\r\n                <Box sx={{m:2}} >{children}</Box>\r\n            </Box>    \r\n        )\r\n    } else {\r\n        return <div></div>\r\n    }\r\n\r\n}\r\n\r\nexport default Layout;","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\badgedetails.js",["154"],"import React, { useEffect, useState, useContext } from 'react'\r\nimport { db } from '../firebase';\r\nimport { UserContext } from '../userContext';\r\n\r\nimport { useParams } from 'react-router-dom'\r\nimport Box from '@material-ui/core/Box'\r\nimport Toolbar from '@material-ui/core/Toolbar'\r\nimport { Typography } from '@material-ui/core'\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\r\nimport { Table, TableContainer, TableHead, TableRow, TableCell, TableBody, Paper, Card, CardMedia } from '@material-ui/core'\r\n\r\n\r\nexport default function BadgeDetails() {\r\n\r\n    const { badgeId } = useParams()\r\n    const { currentUser } = useContext(UserContext)\r\n    const [ badgeDetails, setBadgeDetails ] = useState({})\r\n    const [ updateBadge, setUpdateBadge ] = useState(false)\r\n    \r\n    useEffect(() => {\r\n        \r\n        if(badgeId){\r\n            return db.collection(\"badges\").doc(badgeId).get()\r\n            .then((doc)=> {\r\n                if(doc.exists){\r\n                    let badgeData = doc.data()\r\n                    setBadgeDetails({...badgeData, badgeId: badgeId})\r\n                    console.log('badgeData title is '+badgeData.badgename)\r\n                } else {\r\n                    alert(\"I can't find that document\")\r\n                }\r\n            })\r\n        }\r\n\r\n    }, [badgeId]);\r\n\r\n    useEffect(() => {\r\n        if(updateBadge){ return db.collection('users').doc(currentUser.uid)\r\n            .collection('myBadges').add({...badgeDetails,uid: currentUser.uid})\r\n            .then((doc)=>{\r\n                console.log('New badge aspiration added')\r\n                const newBadge = {\r\n                    badgename:badgeDetails.badgename,\r\n                    myBadgeId:doc.id,\r\n                    crits:badgeDetails.totalcrits,\r\n                    critsAwarded: 0\r\n                  }\r\n                db.collection('users').doc(currentUser.uid).update({\r\n                    [`myBadgesMap.${badgeId}`]:newBadge\r\n                })\r\n                setUpdateBadge(false)\r\n            })\r\n        }\r\n    },[ updateBadge, currentUser.uid, badgeDetails, badgeId ])\r\n\r\n    const handleAddBadge = (e) => {\r\n        e.preventDefault()\r\n        console.log('badgeDetails submitted object is '+JSON.stringify(badgeDetails))\r\n        let document = db.collection('users').doc(currentUser.uid)\r\n        document.collection('myBadges').where(\"uid\",\"==\",currentUser.uid)\r\n        .where(\"badgename\",\"==\",badgeDetails.badgename).get()\r\n        .then((snapshot) => {\r\n            console.log('number of docs in snapshot is '+snapshot.size)\r\n            if(snapshot.size === 0){\r\n                setUpdateBadge(true)\r\n            } else {\r\n                setUpdateBadge(false)\r\n            }\r\n        })\r\n    }\r\n\r\n    console.log('reached the BadgeDetails component with id of '+badgeId)\r\n    return (\r\n        <>\r\n            <Toolbar />\r\n            <IconButton\r\n                sx={{\r\n                    position: 'fixed',\r\n                    bottom: 0,\r\n                    right: 0\r\n                }}\r\n                color=\"primary\"\r\n                aria-label=\"Add Badge\"\r\n                onClick={handleAddBadge}\r\n            >\r\n                <AddCircleIcon sx={{ fontSize: 60 }} />\r\n            </IconButton>\r\n\r\n            <Box sx={{flexGrow:1, p:3}} >\r\n                <Box sx={{mx:'auto', width:180}}>\r\n                    <Card sx={{ maxWidth: 345 }}>\r\n                                <CardMedia\r\n                                    sx={{ height: 140 }}\r\n                                    image={badgeDetails.imageUrl}\r\n                                    title=\"Contemplative Reptile\"\r\n                                />\r\n                    </Card>\r\n                </Box>\r\n                {badgeId && badgeDetails.criteria && \r\n                <TableContainer component={Paper} sx={{borderRadius:2, m:1, maxWidth:950}}>\r\n                    <Table sx={{ minWidth: 650 }} aria-label=\"simple table\">\r\n                        <TableHead>\r\n                        <TableRow>\r\n                            <TableCell align=\"right\" sx={{fontWeight:'bold',backgroundColor:(theme)=>theme.palette.secondary.main, color: (theme)=>theme.palette.getContrastText(theme.palette.secondary.main)}}>Criterion</TableCell>\r\n                            <TableCell align=\"right\" sx={{fontWeight:'bold',backgroundColor:(theme)=>theme.palette.secondary.main, color: (theme)=>theme.palette.getContrastText(theme.palette.secondary.main)}}>Level</TableCell>\r\n                            <TableCell align=\"left\" sx={{fontWeight:'bold',backgroundColor:(theme)=>theme.palette.secondary.main, color: (theme)=>theme.palette.getContrastText(theme.palette.secondary.main)}}>Description</TableCell>\r\n                            <TableCell align=\"right\" sx={{fontWeight:'bold',backgroundColor:(theme)=>theme.palette.secondary.main, color: (theme)=>theme.palette.getContrastText(theme.palette.secondary.main)}}>Total Crits</TableCell>\r\n                        </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                        {badgeDetails.criteria.map((row) => (\r\n                            <TableRow\r\n                            key={row.label}\r\n                            sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\r\n                            >\r\n                            <TableCell component=\"th\" scope=\"row\">\r\n                                {row.label}\r\n                            </TableCell>\r\n                            <TableCell align=\"right\">{row.level}</TableCell>\r\n                            <TableCell align=\"left\">{row.criterion}</TableCell>\r\n                            <TableCell align=\"right\" sx={{fontWeight:'bold'}}>{row.crits}</TableCell>\r\n                            </TableRow>\r\n                        ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n                }\r\n            </Box>\r\n\r\n        </>\r\n    )\r\n}\r\n","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\feedback.js",["155"],"import React, { useState, useContext, useEffect } from 'react';\r\nimport { db } from '../firebase';\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport Toolbar from '@material-ui/core/Toolbar'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Card from '@material-ui/core/Card'\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport Button from '@material-ui/core/Button'\r\nimport CardHeader from '@material-ui/core/CardHeader'\r\nimport CardMedia from '@material-ui/core/CardMedia'\r\nimport CardContent from '@material-ui/core/CardContent'\r\nimport { Typography } from '@material-ui/core';\r\nimport { UserContext } from '../userContext';\r\n\r\nfunction Feedback(props) {\r\n\r\n    const { loading } = useContext(UserContext)\r\n\r\n    const [ badges, setBadges ] = useState([])\r\n    const [ uiLoading, setUiLoading ] = useState(loading)\r\n\r\n    useEffect(() => {\r\n        \r\n        return db.collection(\"badges\")\r\n\r\n        .onSnapshot(snapshot => {\r\n            const badgesData = [];\r\n            snapshot.forEach(doc => badgesData.push({ ...doc.data(), id: doc.id }));\r\n            setBadges(badgesData)\r\n            setUiLoading(false)\r\n            console.log('badges are '+badgesData)\r\n        })\r\n    }, []);\r\n\r\n    if (uiLoading === true) {\r\n        return (\r\n            <main sx={{flexGrow:1, p:3}} >\r\n                <Toolbar />\r\n                {uiLoading && <CircularProgress size={150} sx={{\r\n                    position: 'fixed',\r\n                    zIndex: '1000',\r\n                    height: '31px',\r\n                    width: '31px',\r\n                    left: '50%',\r\n                    top: '35%'\r\n                }} />}\r\n            </main>\r\n        );\r\n    } else {\r\n        return (\r\n            <main sx={{flexGrow:1, p:3}}>\r\n                <Toolbar />\r\n\r\n            <Grid container spacing={2}>\r\n                    {badges && badges.length>0 && badges.map((badge) => (\r\n                        <Grid item xs={12} sm={6} key = {badge.id}>\r\n                            <Card sx={{ maxWidth: 345 }}>\r\n                            <CardMedia\r\n                                sx={{ height: 140 }}\r\n                                image={badge.ImageUrl}\r\n                                title=\"Contemplative Reptile\"\r\n                            />\r\n                            <CardContent>\r\n                                <Typography gutterBottom variant=\"h5\" component=\"div\">\r\n                                {badge.Title}\r\n                                </Typography>\r\n                                <Typography variant=\"body2\" color=\"text.secondary\">\r\n                                Lizards are a widespread group of squamate reptiles, with over 6,000\r\n                                species, ranging across all continents except Antarctica\r\n                                </Typography>\r\n                            </CardContent>\r\n                            <CardActions>\r\n                                <Button component={Link} to={`/badges/${badge.id}`} size=\"small\">See Details</Button>\r\n                                <Button\r\n                                    size=\"small\"\r\n                                >\r\n                                    Add to My Badges\r\n                                </Button>\r\n                            </CardActions>\r\n                            </Card>\r\n                        </Grid>\r\n                    ))}\r\n                </Grid>\r\n\r\n            </main>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Feedback;","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\students.js",["156","157","158"],"import React, { useState, useContext, useEffect } from 'react';\r\nimport { db } from '../firebase';\r\nimport firebase from 'firebase';\r\nimport { Link } from \"react-router-dom\";\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nimport { UserContext } from '../userContext';\r\nimport PropTypes from 'prop-types';\r\nimport { alpha } from '@material-ui/core/styles';\r\nimport Box from '@material-ui/core/Box';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport FilterListIcon from '@material-ui/icons/FilterList';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport { AssignmentInd, CloudDownload, Edit, SecurityUpdate } from '@material-ui/icons';\r\nimport { AppBar, TextField, Dialog, FormControl, InputLabel, Select, MenuItem, Button, Grid } from '@material-ui/core';\r\n\r\nfunction Students(props) {\r\n\r\n    const { loading, currentUser } = useContext(UserContext)\r\n\r\n    const [ uiLoading, setUiLoading ] = useState(loading)\r\n    const [ rows, setRows ] = useState([])\r\n    const [ classes, setClasses ] = useState([])\r\n    const [ selectedClass, setSelectedClass ] = useState({name:\"\", students:[]})\r\n    const [ selectedStudents, setSelectedStudents ] = useState([])\r\n\r\n    useEffect(() => {   \r\n        return db.collection(\"adminDocs\").doc(\"studentList\")\r\n        .onSnapshot((doc) => {\r\n            setRows(doc.data().students)\r\n        })\r\n    }, []);\r\n\r\n/*     useEffect(() => {\r\n        return db.collection(\"users\").doc(currentUser.uid).get()\r\n        .then((doc) => {\r\n            setClasses(doc.data().classes)\r\n            console.log(doc.data().classes)\r\n        })\r\n    },[currentUser.uid]) */\r\n\r\n    useEffect(() => {\r\n        return db.collection(\"users\").doc(currentUser.uid).collection(\"teacherClasses\").get()\r\n        .then((snapshot) => {\r\n            const classData = []\r\n            snapshot.forEach((doc) => {\r\n                classData.push({...doc.data(), id: doc.id})\r\n            })\r\n            setClasses(classData)\r\n            console.log(\"class data is \"+classData)\r\n        })\r\n    },[currentUser.uid])\r\n\r\n    const handleChange = (event) => {\r\n        setSelectedClass(event.target.value)\r\n        console.log('selected class id is '+event.target.value)\r\n    }\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault()\r\n        if(selectedClass.length){\r\n          console.log('planning to submit to class id '+selectedClass)\r\n          console.log('and submit selected student ids are '+selectedStudents)\r\n          db.collection('users').doc(currentUser.uid).collection('teacherClasses')\r\n          .doc(selectedClass).update({\r\n              students: firebase.firestore.FieldValue.arrayUnion(...selectedStudents)\r\n          })\r\n        } else {\r\n          alert(\"Make sure to select a class\")\r\n        }\r\n    }\r\n\r\n    if (uiLoading === true) {\r\n        return (\r\n            <main sx={{flexGrow:1, p:3}} >\r\n                <Toolbar />\r\n                {uiLoading && <CircularProgress size={150} sx={{\r\n                    position: 'fixed',\r\n                    zIndex: '1000',\r\n                    height: '31px',\r\n                    width: '31px',\r\n                    left: '50%',\r\n                    top: '35%'\r\n                }} />}\r\n            </main>\r\n        );\r\n    } else {\r\n        return (\r\n            <>\r\n                <Toolbar />\r\n                <Grid container spacing={2} alignItems='center'>\r\n                    <Grid item xs={2} key='classSelect'>\r\n                        <FormControl sx={{ m: 1, minWidth: 120 }}>\r\n                            <InputLabel id=\"demo-simple-select-label\">Classes</InputLabel>\r\n                            <Select\r\n                                labelId=\"demo-simple-select-label\"\r\n                                id=\"demo-simple-select\"\r\n                                value={selectedClass}\r\n                                label=\"Classes\"\r\n                                onChange={handleChange}\r\n                            >\r\n                                {classes.map((eachclass) => (\r\n                                    <MenuItem key={eachclass.name} value={eachclass.id}>{eachclass.name}</MenuItem>\r\n                                ))\r\n                                }\r\n                            </Select>\r\n                        </FormControl>\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                        <Typography variant='h6' align='center'>Select students below to add to class</Typography>\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                        <Button variant='contained' onClick={handleSubmit}>Submit</Button>\r\n                    </Grid>\r\n                </Grid>\r\n    \r\n                <Box sx={{flexGrow:1, p:3}} >\r\n                    <EnhancedTable rows={rows} setSelectedStudents={(selecteds) => setSelectedStudents(selecteds)} />\r\n                </Box>\r\n    \r\n            </>\r\n        )\r\n    }\r\n}\r\nexport default Students;\r\n\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n  if (b[orderBy] < a[orderBy]) {\r\n    return -1;\r\n  }\r\n  if (b[orderBy] > a[orderBy]) {\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n  return order === 'desc'\r\n    ? (a, b) => descendingComparator(a, b, orderBy)\r\n    : (a, b) => -descendingComparator(a, b, orderBy);\r\n}\r\n\r\n// This method is created for cross-browser compatibility, if you don't\r\n// need to support IE11, you can use Array.prototype.sort() directly\r\nfunction stableSort(array, comparator) {\r\n  const stabilizedThis = array.map((el, index) => [el, index]);\r\n  stabilizedThis.sort((a, b) => {\r\n    const order = comparator(a[0], b[0]);\r\n    if (order !== 0) return order;\r\n    return a[1] - b[1];\r\n  });\r\n  return stabilizedThis.map((el) => el[0]);\r\n}\r\n\r\nconst headCells = [\r\n  {\r\n    id: 'firstName',\r\n    numeric: false,\r\n    disablePadding: true,\r\n    label: 'Student Name',\r\n  },\r\n  {\r\n    id: 'year',\r\n    numeric: true,\r\n    disablePadding: false,\r\n    label: 'Graduation Year',\r\n  },\r\n  {\r\n    id: 'uid',\r\n    numeric: false,\r\n    disablePadding: false,\r\n    label: 'uid',\r\n  },\r\n];\r\n\r\nfunction EnhancedTableHead(props) {\r\n  const { onSelectAllClick, order, orderBy, numSelected, rowCount, onRequestSort } =\r\n    props;\r\n  const createSortHandler = (property) => (event) => {\r\n    onRequestSort(event, property);\r\n  };\r\n\r\n  return (\r\n    <TableHead>\r\n      <TableRow>\r\n        <TableCell padding=\"checkbox\">\r\n          <Checkbox\r\n            color=\"primary\"\r\n            indeterminate={numSelected > 0 && numSelected < rowCount}\r\n            checked={rowCount > 0 && numSelected === rowCount}\r\n            onChange={onSelectAllClick}\r\n            inputProps={{\r\n              'aria-label': 'select all desserts',\r\n            }}\r\n          />\r\n        </TableCell>\r\n        {headCells.map((headCell) => (\r\n          <TableCell\r\n            key={headCell.id}\r\n            align={headCell.numeric ? 'right' : 'left'}\r\n            padding={headCell.disablePadding ? 'none' : 'normal'}\r\n            sortDirection={orderBy === headCell.id ? order : false}\r\n            sx={{fontWeight:\"bold\"}}\r\n          >\r\n            <TableSortLabel\r\n              active={orderBy === headCell.id}\r\n              direction={orderBy === headCell.id ? order : 'asc'}\r\n              onClick={createSortHandler(headCell.id)}\r\n            >\r\n              {headCell.label}\r\n            </TableSortLabel>\r\n          </TableCell>\r\n        ))}\r\n      </TableRow>\r\n    </TableHead>\r\n  );\r\n}\r\n\r\nEnhancedTableHead.propTypes = {\r\n  numSelected: PropTypes.number.isRequired,\r\n  onRequestSort: PropTypes.func.isRequired,\r\n  onSelectAllClick: PropTypes.func.isRequired,\r\n  order: PropTypes.oneOf(['asc', 'desc']).isRequired,\r\n  orderBy: PropTypes.string.isRequired,\r\n  rowCount: PropTypes.number.isRequired,\r\n};\r\n\r\nconst EnhancedTableToolbar = (props) => {\r\n  const { numSelected, selected, handleClickOpen } = props;\r\n\r\n  return (\r\n    <Toolbar\r\n      sx={{\r\n        pl: { sm: 2 },\r\n        pr: { xs: 1, sm: 1 },\r\n        ...(numSelected > 0 && {\r\n          bgcolor: (theme) =>\r\n            alpha(theme.palette.primary.main, theme.palette.action.activatedOpacity),\r\n        }),\r\n      }}\r\n    >\r\n      {numSelected > 0 ? (\r\n        <Typography\r\n          sx={{ flex: '1 1 100%' }}\r\n          color=\"inherit\"\r\n          variant=\"subtitle1\"\r\n          component=\"div\"\r\n        >\r\n          {numSelected} selected\r\n        </Typography>\r\n      ) : (\r\n        <Typography\r\n          sx={{ flex: '1 1 100%' }}\r\n          variant=\"h6\"\r\n          id=\"tableTitle\"\r\n          component=\"div\"\r\n        >\r\n          Students\r\n        </Typography>\r\n      )}\r\n\r\n      {numSelected === 1 ? (\r\n        <>\r\n        <Tooltip title=\"Edit Record\">\r\n          <IconButton\r\n            onClick={handleClickOpen}\r\n          >\r\n            <Edit />\r\n          </IconButton>\r\n        </Tooltip>\r\n        <Tooltip title=\"View Details\">\r\n          <IconButton component={Link} to={`/students/${selected[0].uid}`} >\r\n            <AssignmentInd />\r\n          </IconButton>\r\n        </Tooltip>\r\n        </>\r\n      ) :\r\n      numSelected > 0 ? (\r\n        <Tooltip title=\"Download records\">\r\n          <IconButton>\r\n            <CloudDownload />\r\n          </IconButton>\r\n        </Tooltip>\r\n      ) : (\r\n        <Tooltip title=\"Filter list\">\r\n          <IconButton>\r\n            <FilterListIcon />\r\n          </IconButton>\r\n        </Tooltip>\r\n      )}\r\n    </Toolbar>\r\n  );\r\n};\r\n\r\nEnhancedTableToolbar.propTypes = {\r\n  numSelected: PropTypes.number.isRequired,\r\n};\r\n\r\nexport function EnhancedTable(props) {\r\n  const [order, setOrder] = useState('asc');\r\n  const [orderBy, setOrderBy] = useState('year');\r\n  const [selected, setSelected] = useState([]);\r\n  const [page, setPage] = useState(0);\r\n  const [dense, setDense] = useState(false);\r\n  const [rowsPerPage, setRowsPerPage] = useState(5);\r\n  const [clickOpen, setClickOpen] = useState(false)\r\n  const [gradYear, setGradYear] = useState(2000)\r\n  const [studentName, setStudentName] = useState(\"\")\r\n  const [errors, setErrors] = useState([])\r\n  const [studentId, setStudentId] = useState('')\r\n\r\n  const rows = props.rows\r\n\r\n  const handleClickOpen = () => {\r\n    setClickOpen(true)\r\n    setStudentName(selected[0].firstName)\r\n    setGradYear(selected[0].year)\r\n    setStudentId(selected[0].uid)\r\n  }\r\n\r\n  const handleClose = () => {\r\n    setClickOpen(false)\r\n    setSelected([])\r\n  }\r\n\r\n  const handleRequestSort = (event, property) => {\r\n    const isAsc = orderBy === property && order === 'asc';\r\n    setOrder(isAsc ? 'desc' : 'asc');\r\n    setOrderBy(property);\r\n  };\r\n\r\n  const handleSelectAllClick = (event) => {\r\n    if (event.target.checked) {\r\n      //const newSelecteds = rows.map((n) => n.uid);\r\n      const newSelecteds = rows\r\n      setSelected(newSelecteds);\r\n      props.setSelectedStudents(newSelecteds)\r\n      return;\r\n    }\r\n    setSelected([]);\r\n    props.setSelectedStudents([])\r\n  };\r\n\r\n  const handleClick = (event, name) => {\r\n    //const selectedIndex = selected.indexOf(name);\r\n    const selectedIndex = selected.findIndex(function(selection){\r\n      return selection.uid === name.uid\r\n    })\r\n    let newSelected = [];\r\n\r\n    if (selectedIndex === -1) {\r\n      newSelected = newSelected.concat(selected, name);\r\n    } else if (selectedIndex === 0) {\r\n      newSelected = newSelected.concat(selected.slice(1));\r\n    } else if (selectedIndex === selected.length - 1) {\r\n      newSelected = newSelected.concat(selected.slice(0, -1));\r\n    } else if (selectedIndex > 0) {\r\n      newSelected = newSelected.concat(\r\n        selected.slice(0, selectedIndex),\r\n        selected.slice(selectedIndex + 1),\r\n      );\r\n    }\r\n\r\n    setSelected(newSelected);\r\n    props.setSelectedStudents(newSelected)\r\n\r\n    console.log(\"newly selected are \"+newSelected)\r\n  };\r\n\r\n  const handleYearChange = (event) => setGradYear(event.target.value)\r\n\r\n  const handleNameChange = (event) => setStudentName(event.target.value)\r\n\r\n  const handleSubmit = () => {\r\n    console.log(\"Halelujiah\")\r\n    const studentUpdate = {\r\n      firstName:studentName,\r\n      uid:studentId,\r\n      year:gradYear\r\n    }\r\n    db.collection(\"adminDocs\").doc(\"studentList\").update({\r\n      students: firebase.firestore.FieldValue.arrayRemove({\r\n        firstName:selected[0].firstName,\r\n        uid:selected[0].uid,\r\n        year:selected[0].year\r\n      })\r\n    })\r\n    .then(() => {\r\n      db.collection(\"adminDocs\").doc(\"studentList\").update({\r\n        students: firebase.firestore.FieldValue.arrayUnion(studentUpdate)\r\n      })\r\n    })\r\n    .then(() => db.collection(\"users\").doc(studentUpdate.uid).update(studentUpdate))\r\n    setClickOpen(false)\r\n    setSelected([])\r\n  }\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  const handleChangeDense = (event) => {\r\n    setDense(event.target.checked);\r\n  };\r\n\r\n  //const isSelected = (name) => selected.indexOf(name) !== -1;\r\n  const isSelected = (name) => {\r\n    const index = selected.findIndex(function (selection) {\r\n      return selection.uid===name.uid\r\n    })\r\n    return index !== -1\r\n  }\r\n\r\n  // Avoid a layout jump when reaching the last page with empty rows.\r\n  const emptyRows =\r\n    page > 0 ? Math.max(0, (1 + page) * rowsPerPage - rows.length) : 0;\r\n\r\n  return (\r\n    <Box sx={{ width: '100%' }}>\r\n      <Paper sx={{ width: '100%', mb: 2 }}>\r\n        <EnhancedTableToolbar numSelected={selected.length} selected={selected} handleClickOpen={handleClickOpen} />\r\n        <TableContainer>\r\n          <Table\r\n            sx={{ minWidth: 750 }}\r\n            aria-labelledby=\"tableTitle\"\r\n            size={dense ? 'small' : 'medium'}\r\n          >\r\n            <EnhancedTableHead\r\n              numSelected={selected.length}\r\n              order={order}\r\n              orderBy={orderBy}\r\n              onSelectAllClick={handleSelectAllClick}\r\n              onRequestSort={handleRequestSort}\r\n              rowCount={rows.length}\r\n            />\r\n            <TableBody>\r\n              {/* if you don't need to support IE11, you can replace the `stableSort` call with:\r\n                 rows.slice().sort(getComparator(order, orderBy)) */}\r\n              {stableSort(rows, getComparator(order, orderBy))\r\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                .map((row, index) => {\r\n                  const isItemSelected = isSelected(row);\r\n                  const labelId = `enhanced-table-checkbox-${index}`;\r\n\r\n                  return (\r\n                    <TableRow\r\n                      hover\r\n                      onClick={(event) => handleClick(event, row)}\r\n                      role=\"checkbox\"\r\n                      aria-checked={isItemSelected}\r\n                      tabIndex={-1}\r\n                      key={row.uid}\r\n                      selected={isItemSelected}\r\n                    >\r\n                      <TableCell padding=\"checkbox\">\r\n                        <Checkbox\r\n                          color=\"primary\"\r\n                          checked={isItemSelected}\r\n                          inputProps={{\r\n                            'aria-labelledby': labelId,\r\n                          }}\r\n                        />\r\n                      </TableCell>\r\n                      <TableCell\r\n                        component=\"th\"\r\n                        id={labelId}\r\n                        scope=\"row\"\r\n                        padding=\"none\"\r\n                      >\r\n                        {row.firstName}\r\n                      </TableCell>\r\n                      <TableCell align=\"right\">{row.year}</TableCell>\r\n                      <TableCell align=\"left\">{row.uid}</TableCell>\r\n                    </TableRow>\r\n                  );\r\n                })}\r\n              {emptyRows > 0 && (\r\n                <TableRow\r\n                  style={{\r\n                    height: (dense ? 33 : 53) * emptyRows,\r\n                  }}\r\n                >\r\n                  <TableCell colSpan={6} />\r\n                </TableRow>\r\n              )}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n        <TablePagination\r\n          rowsPerPageOptions={[5, 10, 25]}\r\n          component=\"div\"\r\n          count={rows.length}\r\n          rowsPerPage={rowsPerPage}\r\n          page={page}\r\n          onPageChange={handleChangePage}\r\n          onRowsPerPageChange={handleChangeRowsPerPage}\r\n        />\r\n      </Paper>\r\n      <FormControlLabel\r\n        control={<Switch checked={dense} onChange={handleChangeDense} />}\r\n        label=\"Dense padding\"\r\n      />\r\n\r\n      <Dialog fullWidth={true} maxWidth='md' open={clickOpen} onClose={handleClose}>\r\n          <AppBar sx={{position: 'relative'}} >\r\n              <Toolbar>\r\n                  <IconButton edge=\"start\" color=\"inherit\" onClick={handleClose} aria-label=\"close\">\r\n                      <CloseIcon />\r\n                  </IconButton>\r\n                  <Typography variant=\"h6\" sx={{ml:2, flex:1}} >\r\n                      Edit Record\r\n                  </Typography>\r\n                  <Button\r\n                      autoFocus\r\n                      color=\"inherit\"\r\n                      onClick={handleSubmit}\r\n                      sx={{\r\n                          display: 'block',\r\n                          color: 'white',\r\n                          textAlign: 'center',\r\n                          position: 'absolute',\r\n                          top: 14,\r\n                          right: 10\r\n                      }}\r\n                  >\r\n                      Save\r\n                  </Button>\r\n              </Toolbar>\r\n          </AppBar>\r\n\r\n          <Box sx={{\r\n              width: '88%',\r\n              marginLeft: 2,\r\n              marginTop: 3,\r\n              marginBottom: 3\r\n          }} noValidate>\r\n              <Grid container spacing={2}>\r\n                  <Grid item xs={6} key='studentname'>\r\n                      <TextField\r\n                          variant=\"outlined\"\r\n                          required\r\n                          fullWidth\r\n                          id=\"studentName\"\r\n                          label=\"Student Name\"\r\n                          name=\"studentname\"\r\n                          autoComplete=\"studentName\"\r\n                          helperText={errors.title}\r\n                          value={studentName}\r\n                          error={errors.title ? true : false}\r\n                          onChange={handleNameChange}\r\n                      />\r\n                  </Grid>\r\n                  <Grid item xs={6} key='gradyear'>\r\n                      <TextField\r\n                          variant=\"outlined\"\r\n                          required\r\n                          fullWidth\r\n                          id=\"gradYear\"\r\n                          label=\"Grad Year\"\r\n                          name=\"gradyear\"\r\n                          autoComplete=\"gradYear\"\r\n                          helperText={errors.title}\r\n                          value={gradYear}\r\n                          error={errors.title ? true : false}\r\n                          onChange={handleYearChange}\r\n                      />\r\n                  </Grid>\r\n\r\n              </Grid>\r\n          </Box>\r\n      </Dialog>\r\n    </Box>\r\n  );\r\n}\r\n","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\studentdetails.js",["159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182"],"import React, { useEffect, useState, useContext } from 'react'\r\nimport { db } from '../firebase';\r\nimport { UserContext } from '../userContext';\r\n\r\nimport { useParams } from 'react-router-dom'\r\nimport { useForm, Controller } from \"react-hook-form\";\r\n\r\nimport Box from '@material-ui/core/Box'\r\nimport Toolbar from '@material-ui/core/Toolbar'\r\nimport { Typography } from '@material-ui/core'\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\r\nimport { Grid, Container, CssBaseline, Checkbox, TextField, Table, TableContainer, TableHead, TableRow, TableCell, TableBody, Paper, Card, CardMedia } from '@material-ui/core'\r\n\r\n\r\nexport default function StudentDetails() {\r\n\r\n    const { studentId } = useParams()\r\n    const { currentUser } = useContext(UserContext)\r\n    const [ studentDetails, setStudentDetails ] = useState({})\r\n    const [ updateStudent, setUpdateStudent ] = useState(false)\r\n    const { handleSubmit, control, reset } = useForm();\r\n    const onSubmit = data => console.log(data);\r\n    \r\n    useEffect(() => {\r\n        \r\n        if(studentId){\r\n            return db.collection(\"users\").doc(studentId).get()\r\n            .then((doc)=> {\r\n                if(doc.exists){\r\n                    let studentData = doc.data()\r\n                    setStudentDetails({...studentData, studentId: studentId})\r\n                } else {\r\n                    alert(\"I can't find that document\")\r\n                }\r\n            })\r\n        }\r\n\r\n    }, [studentId]);\r\n\r\n\r\n    console.log('reached the studentDetails component with id of '+studentId)\r\n    return (\r\n        <>\r\n            <Toolbar />\r\n            <Container maxWidth=\"lg\" sx={{ mt: 4, mb: 4 }}>\r\n                <Grid container spacing={3}>\r\n                    {/* Chart */}\r\n                    <Grid item xs={12} md={8} lg={9}>\r\n                    <Paper\r\n                        sx={{\r\n                        p: 2,\r\n                        display: 'flex',\r\n                        flexDirection: 'column',\r\n                        height: 240,\r\n                        }}\r\n                    >\r\n                        I'm going to write a lot of text to see what happens to the grid\r\n                    </Paper>\r\n                    </Grid>\r\n                    {/* Recent Deposits */}\r\n                    <Grid item xs={12} md={4} lg={3}>\r\n                    <Paper\r\n                        sx={{\r\n                        p: 2,\r\n                        display: 'flex',\r\n                        flexDirection: 'column',\r\n                        height: 240,\r\n                        }}\r\n                    >\r\n                        I'll write some more here to see what happens with this text in the corresponding paper\r\n                    </Paper>\r\n                    </Grid>\r\n                    {/* Recent Orders */}\r\n                    <Grid item xs={12}>\r\n                    <Paper sx={{ p: 2, display: 'flex', flexDirection: 'column' }}>\r\n                    </Paper>\r\n                    </Grid>\r\n                </Grid>\r\n            </Container>\r\n        </>\r\n    )\r\n}\r\n","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\badgeform.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\badgeform2.js",["183"],"import React from 'react'\r\nimport firebase, { db } from '../firebase';\r\n\r\nimport Toolbar from '@material-ui/core/Toolbar'\r\nimport { useForm, Controller, useFieldArray } from 'react-hook-form'\r\nimport { Box, Typography, Grid, TextField, Button } from '@material-ui/core';\r\n\r\nexport default function BadgeForm() {\r\n\r\n    const { handleSubmit, control } = useForm({\r\n        defaultValues: {\r\n          criteria: [{ label: \"AMI_TTM1\", crits: 10, level: 100, criterion:\"what to do\" }]\r\n        }\r\n      });\r\n\r\n    const { fields, append, remove } = useFieldArray(\r\n    {\r\n        control,\r\n        name: \"criteria\"\r\n    }\r\n    );\r\n\r\n    const onSubmit = data => {\r\n\r\n        console.log(data);\r\n        db.collection(\"badges\").add({imageUrl:\"https://upload.wikimedia.org/wikipedia/commons/c/cf/Arduino_Logo_hi.svg\",...data})\r\n        .then(doc => {\r\n            console.log(\"check to see if new badge added correctly\")\r\n        })\r\n        .catch(error => {\r\n            console.log(\"error loading new badge\", +error)\r\n        })\r\n\r\n\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Toolbar/>\r\n\r\n            <Typography>New Badge Form</Typography>\r\n            <form onSubmit={handleSubmit(onSubmit)}>\r\n                <Box sx={{px:2}}>\r\n                    <Button variant=\"contained\" sx={{m:2}}>\r\n                    Cancel\r\n                    </Button>\r\n                    <Button type=\"submit\" variant=\"contained\" color=\"primary\" sx={{m:2}}>\r\n                    Submit Badge\r\n                    </Button>\r\n                </Box>\r\n                <Grid container spacing={2}>\r\n                    <Grid item xs={10}></Grid>\r\n                    <Grid item xs={6}>\r\n                        <Controller\r\n                        name=\"badgename\"\r\n                        control={control}\r\n                        defaultValue=\"\"\r\n                        render={({ field: { onChange, value }, fieldState: { error } }) => (\r\n                        <TextField\r\n                            label=\"Badge Name\"\r\n                            variant=\"filled\"\r\n                            value={value}\r\n                            onChange={onChange}\r\n                            error={!!error}\r\n                            helperText={error ? error.message : null}\r\n                        />\r\n                        )}\r\n                        rules={{ required: 'Badge name required' }}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                        <Controller\r\n                        name=\"badgelevel\"\r\n                        control={control}\r\n                        defaultValue=\"\"\r\n                        render={({ field: { onChange, value }, fieldState: { error } }) => (\r\n                        <TextField\r\n                            label=\"Badge Level\"\r\n                            variant=\"filled\"\r\n                            value={value}\r\n                            onChange={onChange}\r\n                            error={!!error}\r\n                            helperText={error ? error.message : null}\r\n                        />\r\n                        )}\r\n                        rules={{ required: 'Bagde level required' }}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                        <Controller\r\n                        name=\"issuer\"\r\n                        control={control}\r\n                        defaultValue=\"\"\r\n                        render={({ field: { onChange, value }, fieldState: { error } }) => (\r\n                        <TextField\r\n                            label=\"Issuer\"\r\n                            variant=\"filled\"\r\n                            value={value}\r\n                            onChange={onChange}\r\n                            error={!!error}\r\n                            helperText={error ? error.message : null}\r\n                        />\r\n                        )}\r\n                        rules={{ required: 'Issuer required' }}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                        <Controller\r\n                        name=\"totalcrits\"\r\n                        control={control}\r\n                        defaultValue=\"\"\r\n                        render={({ field: { onChange, value }, fieldState: { error } }) => (\r\n                        <TextField\r\n                            label=\"Total Crits\"\r\n                            variant=\"filled\"\r\n                            value={value}\r\n                            onChange={onChange}\r\n                            error={!!error}\r\n                            helperText={error ? error.message : null}\r\n                        />\r\n                        )}\r\n                        rules={{ required: 'Total crits required' }}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={10}>\r\n                        <Controller\r\n                        name=\"description\"\r\n                        control={control}\r\n                        defaultValue=\"\"\r\n                        render={({ field: { onChange, value }, fieldState: { error } }) => (\r\n                        <TextField\r\n                            fullWidth\r\n                            multiline\r\n                            rows={4}\r\n                            label=\"Description\"\r\n                            variant=\"filled\"\r\n                            value={value}\r\n                            onChange={onChange}\r\n                            error={!!error}\r\n                            helperText={error ? error.message : null}\r\n                        />\r\n                        )}\r\n                        rules={{ required: 'Description required' }}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12}>\r\n                        <Typography>Add Criteria Below as Needed</Typography>\r\n                    </Grid>\r\n                </Grid>\r\n                \r\n                <Box sx={{m:2}}>\r\n                <Grid container spacing={2} >\r\n                {fields.map((item, index) => {\r\n                    console.log('item crits is '+item.crits)\r\n                    console.log(`criteria.${index}.crits`)\r\n                return (\r\n                    <Box key={item.id} sx={{display:'flex'}} >\r\n                    <Grid item md={2} sx={{p:0.5}}>\r\n                    <Controller\r\n                        render={({ field }) => \r\n                            <TextField {...field} \r\n                                variant=\"filled\"\r\n                                label=\"Criterion Label\"\r\n                            />}\r\n                        name={`criteria.${index}.label`}\r\n                        control={control}\r\n                        defaultValue={item.label} // make sure to set up defaultValue\r\n                    />\r\n                    </Grid>\r\n                    <Grid item md={1} sx={{p:0.5}}>\r\n                    <Controller\r\n                        render={({ field }) => \r\n                            <TextField {...field} \r\n                                variant=\"filled\"\r\n                                label=\"Level\"\r\n                            />}\r\n                        name={`criteria.${index}.level`}\r\n                        control={control}\r\n                        defaultValue={item.level} // make sure to set up defaultValue\r\n                    />\r\n                    </Grid>\r\n                    <Grid item md={1} sx={{p:0.5}}>\r\n                    <Controller\r\n                        render={({ field }) => \r\n                            <TextField {...field} \r\n                                variant=\"filled\"\r\n                                label=\"Crits\"\r\n                            />}\r\n                        name={`criteria.${index}.crits`}\r\n                        control={control}\r\n                        defaultValue={item.crits} // make sure to set up defaultValue\r\n                    />\r\n                    </Grid>\r\n                    <Grid item md={7} sx={{p:0.5}}>\r\n                    <Controller\r\n                        render={({ field }) => \r\n                            <TextField {...field} \r\n                                variant=\"filled\"\r\n                                label=\"Criterion Description\"\r\n                                fullWidth\r\n                            />}\r\n                        name={`criteria.${index}.criterion`}\r\n                        control={control}\r\n                        defaultValue=\" \" // make sure to set up defaultValue\r\n                    />\r\n                    </Grid>\r\n                    <Grid item md={1}>\r\n                    <Button type=\"button\" variant=\"outlined\" onClick={() => remove(index)}>\r\n                        Delete\r\n                    </Button>\r\n                    </Grid>\r\n                    </Box>\r\n                );\r\n                })}\r\n                </Grid>\r\n                </Box>\r\n                <Button\r\n                    type=\"button\"\r\n                    variant=\"outlined\"\r\n                    onClick={() => {\r\n                        append({ label: \"\", crits: 10, level: 100, criterion:\"what to do\" });\r\n                    }}\r\n                    >\r\n                    append\r\n                </Button>\r\n\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\mybadges.js",["184"],"import React, { useContext, useEffect, useState } from 'react'\r\nimport { db } from '../firebase'\r\nimport { UserContext } from '../userContext';\r\nimport { Link } from 'react-router-dom';\r\nimport Progress from './progressbar';\r\n\r\nimport { Toolbar, Grid, Box, CardActionArea, CardMedia, Card, CardContent, Typography } from '@material-ui/core';\r\n\r\n\r\nexport default function MyBadges() {\r\n\r\n    const { currentUser } = useContext(UserContext)\r\n    const [ badgeData, setBadgeData ] = useState([])\r\n\r\n\r\n    useEffect(() => {\r\n        \r\n        if(currentUser){\r\n            return db.collection(\"users\").doc(currentUser.uid).collection('myBadges').get()\r\n            .then((snapshot) => {\r\n                const badgeData = []\r\n                snapshot.forEach((doc) => {\r\n                    badgeData.push({...doc.data(), id: doc.id})\r\n                })\r\n                setBadgeData(badgeData)\r\n            })\r\n            .catch((error) => {\r\n                console.log(\"My badges error: \", error);\r\n            })\r\n        }\r\n\r\n    }, [currentUser]);\r\n\r\n    return (\r\n        <div>\r\n            <Toolbar />\r\n            <Grid container spacing={8} justify='center'>\r\n                {badgeData.map((studentBadge) => (\r\n                    <Grid item xs={8} sm={6} key = {studentBadge.badgename}>\r\n                        <Card sx={{width:250, height:280}} variant=\"outlined\">\r\n                            <CardActionArea component={Link} to={`/myBadges/${studentBadge.id}`}>\r\n                            <CardContent>\r\n                                <Typography variant=\"h6\" component=\"h4\" align=\"center\">\r\n                                    {studentBadge.badgename}\r\n                                </Typography>\r\n                            </CardContent>\r\n                            <CardMedia\r\n                                image=\"https://firebasestorage.googleapis.com/v0/b/progressnotes-b6fc9.appspot.com/o/ProfileCartoon100kb.png?alt=media&token=b7a9fbca-effb-49ba-8a18-361637132a11\"\r\n                                sx={{ margin:'auto', width: 150, height: 150, alignItems:'center' }}\r\n                            />\r\n                            </CardActionArea>\r\n                            <CardContent>\r\n                                <Progress done='80' />\r\n                            </CardContent>\r\n\r\n                        </Card>\r\n                    </Grid>\r\n                ))}\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\mybadgedetails.js",["185","186"],"import React, { useContext, useState, useEffect } from 'react'\r\nimport { db } from '../firebase'\r\nimport { UserContext } from '../userContext'\r\nimport { useParams } from 'react-router-dom'\r\nimport { Paper, Toolbar, Box, Card, CardMedia, Table, TableContainer, TableHead, TableBody, TableRow, TableCell } from '@material-ui/core'\r\n\r\nexport default function MyBadgeDetails() {\r\n\r\n    const { myBadgeId } = useParams()\r\n    const { currentUser } = useContext(UserContext)\r\n    const [ badgeDetails, setBadgeDetails ] = useState({})\r\n    const [ updateBadge, setUpdateBadge ] = useState(false)\r\n    \r\n    useEffect(() => {\r\n        \r\n        if(myBadgeId){\r\n            return db.collection(\"users\").doc(currentUser.uid).collection(\"myBadges\").doc(myBadgeId).get()\r\n            .then((doc)=> {\r\n                if(doc.exists){\r\n                    let badgeData = doc.data()\r\n                    setBadgeDetails({...badgeData, badgeId: myBadgeId})\r\n                    console.log('badgeData title is '+badgeData.badgename)\r\n                } else {\r\n                    alert(\"I can't find that document\")\r\n                }\r\n            })\r\n        }\r\n\r\n    }, [myBadgeId, currentUser.uid]);\r\n    return (\r\n        <>\r\n            <Toolbar />\r\n\r\n            <Box sx={{flexGrow:1, p:3}} >\r\n                <Box sx={{mx:'auto', width:180}}>\r\n                    <Card sx={{ maxWidth: 345 }}>\r\n                                <CardMedia\r\n                                    sx={{ height: 140 }}\r\n                                    image={badgeDetails.imageUrl}\r\n                                    title=\"Contemplative Reptile\"\r\n                                />\r\n                    </Card>\r\n                </Box>\r\n                {myBadgeId && badgeDetails.criteria && \r\n                <TableContainer component={Paper} sx={{borderRadius:2, m:1, maxWidth:950}}>\r\n                    <Table sx={{ minWidth: 650 }} aria-label=\"simple table\">\r\n                        <TableHead>\r\n                        <TableRow>\r\n                            <TableCell align=\"right\" sx={{fontWeight:'bold',backgroundColor:(theme)=>theme.palette.secondary.main, color: (theme)=>theme.palette.getContrastText(theme.palette.secondary.main)}}>Criterion</TableCell>\r\n                            <TableCell align=\"right\" sx={{fontWeight:'bold',backgroundColor:(theme)=>theme.palette.secondary.main, color: (theme)=>theme.palette.getContrastText(theme.palette.secondary.main)}}>Level</TableCell>\r\n                            <TableCell align=\"left\" sx={{fontWeight:'bold',backgroundColor:(theme)=>theme.palette.secondary.main, color: (theme)=>theme.palette.getContrastText(theme.palette.secondary.main)}}>Description</TableCell>\r\n                            <TableCell align=\"right\" sx={{fontWeight:'bold',backgroundColor:(theme)=>theme.palette.secondary.main, color: (theme)=>theme.palette.getContrastText(theme.palette.secondary.main)}}>Total Crits</TableCell>\r\n                        </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                        {badgeDetails.criteria.map((row) => (\r\n                            <TableRow\r\n                            key={row.label}\r\n                            sx={{ '&:last-child td, &:last-child th': { border: 0 } }}\r\n                            >\r\n                            <TableCell component=\"th\" scope=\"row\">\r\n                                {row.label}\r\n                            </TableCell>\r\n                            <TableCell align=\"right\">{row.level}</TableCell>\r\n                            <TableCell align=\"left\">{row.criterion}</TableCell>\r\n                            <TableCell align=\"right\" sx={{fontWeight:'bold'}}>{row.crits}</TableCell>\r\n                            </TableRow>\r\n                        ))}\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n                }\r\n            </Box>\r\n\r\n        </>\r\n    )\r\n}\r\n","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\mybadgeslist.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\progressbar.js",["187","188"],"import { useState } from \"react\";\r\nimport { Box } from '@material-ui/core'\r\n\r\nexport default function Progress({done}) {\r\n\r\n    console.log('done is '+done)\r\n\r\n\tconst [style, setStyle] = useState({\r\n        opacity: 0,\r\n        width:0\r\n    });\r\n\t\r\n/* \tsetTimeout(() => {\r\n\t\tconst newStyle = {\r\n\t\t\topacity: 1,\r\n\t\t\twidth: `${done}%`\r\n\t\t}\r\n\t\t\r\n\t\tsetStyle(newStyle);\r\n\t}, 200); */\r\n\t\r\n\treturn (\r\n\t\t<Box sx={{\r\n            backgroundColor: '#d8d8d8',\r\n            borderRadius: 20,\r\n            position: 'relative',\r\n            my: 1,\r\n            mx: 0,\r\n            height: 20,\r\n            width: 200,\r\n        }}>\r\n\t\t\t<Box sx={{\r\n            \tbackground: 'linear-gradient(to left, #F2709C, #FF9472)',\r\n                boxShadow: '0 3px 3px -5px #F2709C, 0 2px 5px #F2709C',\r\n                borderRadius: 20,\r\n                color: '#fff',\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n                opacity: 1,\r\n                width: `${done}%`,\r\n                justifyContent: 'center',\r\n                height: '100%',\r\n                transition: '1s ease 0.3s',\r\n            }}\r\n            >\r\n\t\t\t\t{done}%\r\n\t\t\t</Box>\r\n\t\t</Box>\r\n\t)\r\n}\r\n","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\listcards2.js",["189","190","191"],{"ruleId":"192","replacedBy":"193"},{"ruleId":"194","replacedBy":"195"},{"ruleId":"196","severity":1,"message":"197","line":27,"column":8,"nodeType":"198","messageId":"199","endLine":27,"endColumn":20},{"ruleId":"196","severity":1,"message":"200","line":28,"column":10,"nodeType":"198","messageId":"199","endLine":28,"endColumn":30},{"ruleId":"196","severity":1,"message":"201","line":39,"column":13,"nodeType":"198","messageId":"199","endLine":39,"endColumn":17},{"ruleId":"196","severity":1,"message":"202","line":53,"column":13,"nodeType":"198","messageId":"199","endLine":53,"endColumn":19},{"ruleId":"196","severity":1,"message":"201","line":103,"column":13,"nodeType":"198","messageId":"199","endLine":103,"endColumn":17},{"ruleId":"196","severity":1,"message":"202","line":119,"column":13,"nodeType":"198","messageId":"199","endLine":119,"endColumn":19},{"ruleId":"196","severity":1,"message":"203","line":11,"column":8,"nodeType":"198","messageId":"199","endLine":11,"endColumn":18},{"ruleId":"196","severity":1,"message":"204","line":78,"column":35,"nodeType":"198","messageId":"199","endLine":78,"endColumn":42},{"ruleId":"205","severity":1,"message":"206","line":142,"column":54,"nodeType":"207","messageId":"208","endLine":142,"endColumn":56},{"ruleId":"196","severity":1,"message":"209","line":8,"column":10,"nodeType":"198","messageId":"199","endLine":8,"endColumn":20},{"ruleId":"196","severity":1,"message":"203","line":11,"column":8,"nodeType":"198","messageId":"199","endLine":11,"endColumn":18},{"ruleId":"196","severity":1,"message":"210","line":29,"column":46,"nodeType":"198","messageId":"199","endLine":29,"endColumn":60},{"ruleId":"196","severity":1,"message":"211","line":36,"column":24,"nodeType":"198","messageId":"199","endLine":36,"endColumn":36},{"ruleId":"196","severity":1,"message":"212","line":325,"column":18,"nodeType":"198","messageId":"199","endLine":325,"endColumn":27},{"ruleId":"196","severity":1,"message":"213","line":6,"column":19,"nodeType":"198","messageId":"199","endLine":6,"endColumn":29},{"ruleId":"196","severity":1,"message":"214","line":8,"column":8,"nodeType":"198","messageId":"199","endLine":8,"endColumn":11},{"ruleId":"196","severity":1,"message":"209","line":10,"column":10,"nodeType":"198","messageId":"199","endLine":10,"endColumn":20},{"ruleId":"196","severity":1,"message":"215","line":11,"column":8,"nodeType":"198","messageId":"199","endLine":11,"endColumn":18},{"ruleId":"196","severity":1,"message":"216","line":12,"column":8,"nodeType":"198","messageId":"199","endLine":12,"endColumn":21},{"ruleId":"196","severity":1,"message":"217","line":13,"column":27,"nodeType":"198","messageId":"199","endLine":13,"endColumn":38},{"ruleId":"196","severity":1,"message":"218","line":13,"column":40,"nodeType":"198","messageId":"199","endLine":13,"endColumn":48},{"ruleId":"196","severity":1,"message":"219","line":13,"column":50,"nodeType":"198","messageId":"199","endLine":13,"endColumn":59},{"ruleId":"196","severity":1,"message":"220","line":13,"column":61,"nodeType":"198","messageId":"199","endLine":13,"endColumn":66},{"ruleId":"196","severity":1,"message":"221","line":13,"column":68,"nodeType":"198","messageId":"199","endLine":13,"endColumn":82},{"ruleId":"196","severity":1,"message":"222","line":13,"column":84,"nodeType":"198","messageId":"199","endLine":13,"endColumn":93},{"ruleId":"196","severity":1,"message":"223","line":13,"column":95,"nodeType":"198","messageId":"199","endLine":13,"endColumn":103},{"ruleId":"196","severity":1,"message":"224","line":13,"column":105,"nodeType":"198","messageId":"199","endLine":13,"endColumn":114},{"ruleId":"196","severity":1,"message":"225","line":13,"column":116,"nodeType":"198","messageId":"199","endLine":13,"endColumn":125},{"ruleId":"196","severity":1,"message":"226","line":13,"column":134,"nodeType":"198","messageId":"199","endLine":13,"endColumn":138},{"ruleId":"196","severity":1,"message":"227","line":13,"column":140,"nodeType":"198","messageId":"199","endLine":13,"endColumn":149},{"ruleId":"196","severity":1,"message":"228","line":19,"column":13,"nodeType":"198","messageId":"199","endLine":19,"endColumn":24},{"ruleId":"196","severity":1,"message":"229","line":20,"column":13,"nodeType":"198","messageId":"199","endLine":20,"endColumn":27},{"ruleId":"196","severity":1,"message":"230","line":21,"column":13,"nodeType":"198","messageId":"199","endLine":21,"endColumn":26},{"ruleId":"196","severity":1,"message":"231","line":21,"column":28,"nodeType":"198","messageId":"199","endLine":21,"endColumn":44},{"ruleId":"196","severity":1,"message":"232","line":22,"column":13,"nodeType":"198","messageId":"199","endLine":22,"endColumn":25},{"ruleId":"196","severity":1,"message":"233","line":22,"column":27,"nodeType":"198","messageId":"199","endLine":22,"endColumn":34},{"ruleId":"196","severity":1,"message":"234","line":22,"column":36,"nodeType":"198","messageId":"199","endLine":22,"endColumn":41},{"ruleId":"196","severity":1,"message":"235","line":23,"column":11,"nodeType":"198","messageId":"199","endLine":23,"endColumn":19},{"ruleId":"196","severity":1,"message":"236","line":2,"column":8,"nodeType":"198","messageId":"199","endLine":2,"endColumn":16},{"ruleId":"196","severity":1,"message":"214","line":7,"column":25,"nodeType":"198","messageId":"199","endLine":7,"endColumn":28},{"ruleId":"196","severity":1,"message":"237","line":12,"column":13,"nodeType":"198","messageId":"199","endLine":12,"endColumn":24},{"ruleId":"196","severity":1,"message":"238","line":12,"column":26,"nodeType":"198","messageId":"199","endLine":12,"endColumn":40},{"ruleId":"196","severity":1,"message":"239","line":8,"column":9,"nodeType":"198","messageId":"199","endLine":8,"endColumn":14},{"ruleId":"196","severity":1,"message":"240","line":8,"column":16,"nodeType":"198","messageId":"199","endLine":8,"endColumn":24},{"ruleId":"196","severity":1,"message":"241","line":4,"column":8,"nodeType":"198","messageId":"199","endLine":4,"endColumn":13},{"ruleId":"196","severity":1,"message":"242","line":11,"column":8,"nodeType":"198","messageId":"199","endLine":11,"endColumn":14},{"ruleId":"196","severity":1,"message":"243","line":15,"column":40,"nodeType":"198","messageId":"199","endLine":15,"endColumn":52},"no-native-reassign",["244"],"no-negated-in-lhs",["245"],"no-unused-vars","'MyBadgesList' is defined but never used.","Identifier","unusedVar","'PanoramaFishEyeSharp' is defined but never used.","'body' is assigned a value but never used.","'errors' is assigned a value but never used.","'CardHeader' is defined but never used.","'loading' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Typography' is defined but never used.","'SecurityUpdate' is defined but never used.","'setUiLoading' is assigned a value but never used.","'setErrors' is assigned a value but never used.","'Controller' is defined but never used.","'Box' is defined but never used.","'IconButton' is defined but never used.","'AddCircleIcon' is defined but never used.","'CssBaseline' is defined but never used.","'Checkbox' is defined but never used.","'TextField' is defined but never used.","'Table' is defined but never used.","'TableContainer' is defined but never used.","'TableHead' is defined but never used.","'TableRow' is defined but never used.","'TableCell' is defined but never used.","'TableBody' is defined but never used.","'Card' is defined but never used.","'CardMedia' is defined but never used.","'currentUser' is assigned a value but never used.","'studentDetails' is assigned a value but never used.","'updateStudent' is assigned a value but never used.","'setUpdateStudent' is assigned a value but never used.","'handleSubmit' is assigned a value but never used.","'control' is assigned a value but never used.","'reset' is assigned a value but never used.","'onSubmit' is assigned a value but never used.","'firebase' is defined but never used.","'updateBadge' is assigned a value but never used.","'setUpdateBadge' is assigned a value but never used.","'style' is assigned a value but never used.","'setStyle' is assigned a value but never used.","'Chips' is defined but never used.","'Button' is defined but never used.","'ListItemText' is defined but never used.","no-global-assign","no-unsafe-negation"]