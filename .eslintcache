[{"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\index.js":"1","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\App.js":"2","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\reportWebVitals.js":"3","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\pages\\login.js":"4","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\pages\\home.js":"5","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\firebase.js":"6","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\note.js":"7","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\chips.js":"8","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\select.js":"9","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\UserContext.js":"10","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\contextChecker.js":"11","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\userContext.js":"12","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\studentSelect.js":"13","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\classes.js":"14","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\account.js":"15","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\editortest.js":"16","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\EditorToolbar.js":"17","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\editortest2.js":"18"},{"size":500,"mtime":499162500000,"results":"19","hashOfConfig":"20"},{"size":881,"mtime":1615975291633,"results":"21","hashOfConfig":"20"},{"size":362,"mtime":499162500000,"results":"22","hashOfConfig":"20"},{"size":2549,"mtime":1616050710988,"results":"23","hashOfConfig":"20"},{"size":5753,"mtime":1616739604462,"results":"24","hashOfConfig":"20"},{"size":678,"mtime":1616045510406,"results":"25","hashOfConfig":"20"},{"size":15437,"mtime":1617886728921,"results":"26","hashOfConfig":"20"},{"size":275,"mtime":1615975291635,"results":"27","hashOfConfig":"20"},{"size":3798,"mtime":1616066967752,"results":"28","hashOfConfig":"20"},{"size":806,"mtime":1612357304510,"results":"29","hashOfConfig":"20"},{"size":311,"mtime":1612357855261,"results":"30","hashOfConfig":"20"},{"size":1864,"mtime":1616050880777,"results":"31","hashOfConfig":"20"},{"size":788,"mtime":1612954762300,"results":"32","hashOfConfig":"20"},{"size":13192,"mtime":1616131000804,"results":"33","hashOfConfig":"20"},{"size":3475,"mtime":1616050915179,"results":"34","hashOfConfig":"20"},{"size":729,"mtime":1616502391132,"results":"35","hashOfConfig":"20"},{"size":2205,"mtime":1616501075616,"results":"36","hashOfConfig":"20"},{"size":1207,"mtime":1617881868396,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"ys4om1",{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"40"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"40"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"40"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\index.js",[],["80","81"],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\App.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\reportWebVitals.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\pages\\login.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\pages\\home.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\firebase.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\note.js",["82","83","84","85","86"],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\chips.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\select.js",["87","88","89","90"],"import React, { useEffect, useState } from 'react';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport Input from '@material-ui/core/Input';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Select from '@material-ui/core/Select';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Chip from '@material-ui/core/Chip';\r\nimport Paper from '@material-ui/core/Paper'\r\nimport MultiSelect from \"react-multi-select-component\";\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n    minWidth: 120,\r\n    maxWidth: 300,\r\n  },\r\n  chips: {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n  },\r\n  chip: {\r\n    margin: 2,\r\n  },\r\n  noLabel: {\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  root: {\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    flexWrap: 'wrap',\r\n    listStyle: 'none',\r\n    padding: theme.spacing(0.5),\r\n    margin: 0,\r\n    minHeight: 50,\r\n  },\r\n  row: {\r\n    display: 'flex',\r\n    flexFlow: 'row',\r\n    justifyContent: 'left',\r\n  }\r\n}));\r\n\r\nconst ITEM_HEIGHT = 48;\r\nconst ITEM_PADDING_TOP = 8;\r\nconst MenuProps = {\r\n  PaperProps: {\r\n    style: {\r\n      maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\r\n      width: 250,\r\n    },\r\n  },\r\n  anchorOrigin: {\r\n    vertical: \"bottom\",\r\n    horizontal: \"left\"\r\n  },\r\n  transformOrigin: {\r\n    vertical: \"top\",\r\n    horizontal: \"left\"\r\n  },\r\n  getContentAnchorEl: null\r\n};\r\n\r\nfunction getStyles(name, selectedOptions, theme) {\r\n  return {\r\n    fontWeight:\r\n      selectedOptions.indexOf(name) === -1\r\n        ? theme.typography.fontWeightRegular\r\n        : theme.typography.fontWeightMedium,\r\n  };\r\n}\r\n\r\nexport default function MultipleSelect(props) {\r\n  const allOptions = props.allOptions\r\n\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const [selectedOptions, setSelectedOptions] = useState([]);\r\n  const [selected, setSelected] = useState([])\r\n\r\n  useEffect(() => {\r\n    let selectArray = selected.map(a => a.value)\r\n    console.log(`array of selected ids ${selectArray}`)\r\n  })\r\n\r\n  const handleChange = (event) => {\r\n    console.log(\"selectedOptions are \"+event.target.value)\r\n    setSelectedOptions(event.target.value);\r\n    props.getList(event.target.value)\r\n  };\r\n\r\n  return (\r\n    <div className={classes.row}>\r\n        <div style={{justifyContent: 'left'}}>\r\n        <FormControl className={classes.formControl}>\r\n            <InputLabel id=\"demo-mutiple-checkbox-label\">Add Aspirations</InputLabel>\r\n            <Select\r\n            labelId=\"demo-mutiple-checkbox-label\"\r\n            id=\"demo-mutiple-checkbox\"\r\n            multiple\r\n            value={selectedOptions}\r\n            onChange={handleChange}\r\n            input={<Input />}\r\n            //renderValue={(selected) => selected.join(', ')}\r\n            renderValue={(selected) => ''}\r\n            MenuProps={MenuProps}\r\n            >\r\n            {allOptions.map((option) => (\r\n                <MenuItem key={option.value} value={option.value}>\r\n                    <Checkbox checked={selectedOptions.indexOf(option.value) > -1} />\r\n                    <ListItemText primary={option.label} />\r\n                </MenuItem>\r\n            ))}\r\n            </Select>\r\n        </FormControl>\r\n      </div>\r\n      <div style={{justifyContent: 'center'}}>\r\n        <Paper component=\"ul\" className = {classes.root}>\r\n            {selectedOptions.map((data) => {\r\n                return (\r\n                <li key={data}>\r\n                    <Chip label={data} className={classes.chip}/>\r\n                </li>\r\n                );\r\n            })}\r\n        </Paper>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\UserContext.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\contextChecker.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\userContext.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\studentSelect.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\classes.js",["91","92"],"import React, { useState, useEffect } from 'react';\r\nimport { db, auth } from '../firebase';\r\nimport Chips from './chips';\r\nimport Datepicker from 'react-datepicker'\r\nimport 'react-datepicker/dist/react-datepicker.css'\r\n\r\nimport withStyles from '@material-ui/core/styles/withStyles';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport MuiDialogContent from '@material-ui/core/DialogContent';\r\n\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\r\n\r\nimport dayjs from 'dayjs';\r\nimport relativeTime from 'dayjs/plugin/relativeTime';\r\nimport MultipleSelect from './select';\r\nimport MultiSelect from \"react-multi-select-component\";\r\n\r\n\r\nconst styles = (theme) => ({\r\n\tcontent: {\r\n\t\tflexGrow: 1,\r\n\t\tpadding: theme.spacing(3)\r\n\t},\r\n\tappBar: {\r\n\t\tposition: 'relative'\r\n\t},\r\n\ttitle: {\r\n\t\tmarginLeft: theme.spacing(2),\r\n\t\tflex: 1\r\n\t},\r\n\tsubmitButton: {\r\n\t\tdisplay: 'block',\r\n\t\tcolor: 'white',\r\n\t\ttextAlign: 'center',\r\n\t\tposition: 'absolute',\r\n\t\ttop: 14,\r\n\t\tright: 10\r\n\t},\r\n\tfloatingButton: {\r\n\t\tposition: 'fixed',\r\n\t\tbottom: 0,\r\n\t\tright: 0\r\n\t},\r\n\tform: {\r\n\t\twidth: '98%',\r\n\t\tmarginLeft: 13,\r\n\t\tmarginTop: theme.spacing(3)\r\n\t},\r\n\ttoolbar: theme.mixins.toolbar,\r\n\troot: {\r\n\t\tminWidth: 220\r\n\t},\r\n\tbullet: {\r\n\t\tdisplay: 'inline-block',\r\n\t\tmargin: '0 2px',\r\n\t\ttransform: 'scale(0.8)'\r\n\t},\r\n\tpos: {\r\n\t\tmarginBottom: 12\r\n\t},\r\n\tuiProgess: {\r\n\t\tposition: 'fixed',\r\n\t\tzIndex: '1000',\r\n\t\theight: '31px',\r\n\t\twidth: '31px',\r\n\t\tleft: '50%',\r\n\t\ttop: '35%'\r\n\t},\r\n\tdialogeStyle: {\r\n\t\tmaxWidth: '50%'\r\n\t},\r\n\tviewRoot: {\r\n\t\tmargin: 0,\r\n\t\tpadding: theme.spacing(2)\r\n\t},\r\n\tcloseButton: {\r\n\t\tposition: 'absolute',\r\n\t\tright: theme.spacing(1),\r\n\t\ttop: theme.spacing(1),\r\n\t\tcolor: theme.palette.grey[500]\r\n\t}\r\n});\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n\treturn <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nfunction TeacherClasses(props) {\r\n\r\n    const [ user ] = useState(auth.currentUser)\r\n\r\n    const [ title, setTitle ] = useState('')\r\n    const [ body, setBody ] = useState('')\r\n    const [ selectedStudents, setSelectedStudents ] = useState([])\r\n    const [ currentClass, setCurrentClass ] = useState([])\r\n\r\n    const [ errors, setErrors ] = useState([])\r\n    const [ open, setOpen ] = useState(false)\r\n    const [ viewOpen, setViewOpen ] = useState(false)\r\n    const [ uiLoading, setUiLoading ] = useState(true)\r\n\r\n    const [ teacherClasses, setTeacherClasses ] = useState([]);\r\n    const [ notes, setNotes ] = useState([]);\r\n    const [ selectedDate, setSelectedDate ] = useState(null)\r\n\r\n    const [ selected, setSelected ] = useState([])\r\n\r\n\r\n    useEffect(() => {\r\n        \r\n        console.log(\"User\",user)\r\n        if(user){\r\n            return db.collection(\"users\").doc(user.uid).get()\r\n            .then((doc) => {\r\n                if (doc.exists) {\r\n                    let teacherData = doc.data()\r\n                    console.log(\"Document data:\", teacherData);\r\n                    setTeacherClasses(teacherData.classes)\r\n                    setUiLoading(false)\r\n                } else {\r\n                    // doc.data() will be undefined in this case\r\n                    console.log(\"No such teacher document!\");\r\n                }\r\n            })\r\n        }\r\n\r\n    }, [user]);\r\n\r\n    useEffect(() => {\r\n        console.log('selected ids are '+selected.map((student) => student.value))\r\n        setSelectedStudents(selected.map(a => a.value))\r\n    },[selected])\r\n\r\n    const DialogTitle = withStyles(styles)((props) => {\r\n        const { children, onClose, classes, ...other } = props;\r\n        return (\r\n            <MuiDialogTitle disableTypography className={classes.root} {...other}>\r\n                <Typography variant=\"h6\">{children}</Typography>\r\n                {onClose ? (\r\n                    <IconButton aria-label=\"close\" className={classes.closeButton} onClick={onClose}>\r\n                        <CloseIcon />\r\n                    </IconButton>\r\n                ) : null}\r\n            </MuiDialogTitle>\r\n        );\r\n    });\r\n\r\n    const DialogContent = withStyles((theme) => ({\r\n        viewRoot: {\r\n            padding: theme.spacing(2)\r\n        }\r\n    }))(MuiDialogContent);\r\n\r\n    dayjs.extend(relativeTime);\r\n    const { classes } = props;\r\n\r\n    const handleSelectOpen = (teacherClass) => {\r\n        setTitle(teacherClass.name)\r\n        setCurrentClass(teacherClass.students)\r\n        setOpen(true)\r\n    };\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        let recentDate = selectedDate\r\n\r\n\t\tdb.collectionGroup('notes')\r\n        .where('uid','in', selectedStudents)\r\n        .where(\"timestamp\", \">=\", recentDate)\r\n        .orderBy(\"timestamp\",\"desc\")\r\n        .get()\r\n\t\t.then((querySnapshot) => {\r\n            const notesData = [];\r\n            querySnapshot.forEach((doc) => {\r\n                notesData.push({ ...doc.data(), id: doc.id })\r\n                console.log(doc.id)\r\n            })\r\n            setNotes(notesData)\r\n\t\t\tsetOpen(false);\r\n\t\t})\r\n\t\t.catch((error) => {\r\n\t\t\tsetErrors(error)\r\n\t\t\tsetOpen(true)\r\n\t\t\tconsole.error(error);\r\n\t\t\talert('Something went wrong' );\r\n\t\t});\r\n    };\r\n\r\n    const handleViewOpen = (data) => {\r\n        setTitle(data.todo.title)\r\n        setBody(data.todo.body)\r\n        setViewOpen(true)\r\n\t}\r\n\r\n    const handleViewClose = () => setViewOpen(false);\r\n\r\n    const handleClose = (event) => setOpen(false);\r\n\r\n    if (uiLoading === true) {\r\n        return (\r\n            <main className={classes.content}>\r\n                <div className={classes.toolbar} />\r\n                {uiLoading && <CircularProgress size={150} className={classes.uiProgess} />}\r\n            </main>\r\n        );\r\n    } else {\r\n        return (\r\n            <main className={classes.content}>\r\n                <div className={classes.toolbar} />\r\n\r\n                <Dialog fullScreen open={open} onClose={handleClose} TransitionComponent={Transition}>\r\n                    <AppBar className={classes.appBar}>\r\n                        <Toolbar>\r\n                            <IconButton edge=\"start\" color=\"inherit\" onClick={handleClose} aria-label=\"close\">\r\n                                <CloseIcon />\r\n                            </IconButton>\r\n                            <Typography variant=\"h6\" className={classes.title}>\r\n                                Select students to view recent notes\r\n                            </Typography>\r\n                            <Button\r\n                                autoFocus\r\n                                color=\"inherit\"\r\n                                onClick={handleSubmit}\r\n                                className={classes.submitButton}\r\n                            >\r\n                                Submit\r\n                            </Button>\r\n                        </Toolbar>\r\n                    </AppBar>\r\n\r\n                    <form className={classes.form} noValidate>\r\n                        <Grid container spacing={2}>\r\n                            <Grid item xs={12} key='date'>\r\n                                <Typography>\r\n                                    How far back do you want to see notes?\r\n                                </Typography>\r\n                                <Datepicker \r\n                                    selected={selectedDate} \r\n                                    onChange={date => setSelectedDate(date)}\r\n                                    maxDate={new Date()}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={12} key='title'>\r\n\t\t\t\t\t\t\t\t<DialogTitle id=\"customized-dialog-title\" onClose={handleClose}>\r\n\t\t\t\t\t\t\t\t\t{title}\r\n\t\t\t\t\t\t\t\t</DialogTitle>\r\n                            </Grid>\r\n\r\n                            <Grid>\r\n                                <div>\r\n                                    <h1>Select Students</h1>\r\n                                    <pre>{JSON.stringify(selected)}</pre>\r\n                                    <MultiSelect\r\n                                    options={currentClass}\r\n                                    value={selected}\r\n                                    onChange={setSelected}\r\n                                    labelledBy={\"Select\"}\r\n                                    />\r\n                                </div>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </form>\r\n                </Dialog>\r\n\r\n                <Grid container spacing={8} justify='center'>\r\n                    {teacherClasses.map((teacherClass) => (\r\n                        <Grid item xs={8} sm={6} key = {teacherClass.name}>\r\n                            <Card className={classes.root} variant=\"outlined\">\r\n                                <CardContent>\r\n                                    <Typography variant=\"h6\" component=\"h3\">\r\n                                        {teacherClass.name}\r\n                                    </Typography>\r\n                                </CardContent>\r\n                                <CardActions>\r\n                                    <Button size=\"small\" color=\"primary\" onClick={() => handleSelectOpen( teacherClass )}>\r\n                                        {' '}\r\n                                        Select Students{' '}\r\n                                    </Button>\r\n                                </CardActions>\r\n                            </Card>\r\n                        </Grid>\r\n                    ))}\r\n                </Grid>\r\n\r\n                { notes && notes.length > 0 && \r\n                <div>\r\n                      <Grid container spacing={2}>\r\n                      {notes.map((todo) => (\r\n                          <Grid item xs={12} sm={6} key = {todo.id}>\r\n                              <Card className={classes.root} variant=\"outlined\">\r\n                                <CardHeader\r\n                                    avatar={\r\n                                        <Avatar aria-label=\"recipe\" className={classes.avatar} src={todo.avatar} />\r\n                                    }\r\n                                    title={todo.title}\r\n                                    subheader= {dayjs(todo.createdAt).fromNow()+\" by \"+todo.author}\r\n                                />\r\n                                <CardContent>\r\n                                    {todo.activities && todo.activities.length > 0 && <Chips activities={todo.activities}></Chips>}\r\n                                    <Typography variant=\"body2\" component=\"p\">\r\n                                        {todo.body.substring(0, 65)+\"...\"}\r\n                                    </Typography>\r\n                                </CardContent>\r\n                                  <CardActions>\r\n                                      <Button size=\"small\" color=\"primary\" onClick={() => handleViewOpen({ todo })}>\r\n                                          {' '}\r\n                                          View{' '}\r\n                                      </Button>\r\n                                  </CardActions>\r\n                              </Card>\r\n                          </Grid>\r\n                      ))}\r\n                  </Grid>\r\n  \r\n                  <Dialog\r\n                      onClose={handleViewClose}\r\n                      aria-labelledby=\"customized-dialog-title\"\r\n                      open={viewOpen}\r\n                      fullWidth\r\n                      classes={{ paperFullWidth: classes.dialogeStyle }}\r\n                  >\r\n                      <DialogTitle id=\"customized-dialog-title\" onClose={handleViewClose}>\r\n                          {title}\r\n                      </DialogTitle>\r\n                      <DialogContent dividers>\r\n                          <TextField\r\n                              fullWidth\r\n                              id=\"todoDetails\"\r\n                              name=\"body\"\r\n                              multiline\r\n                              readonly\r\n                              rows={1}\r\n                              rowsMax={25}\r\n                              value={body}\r\n                              InputProps={{\r\n                                  disableUnderline: true\r\n                              }}\r\n                          />\r\n                      </DialogContent>\r\n                  </Dialog>\r\n                </div>  \r\n                }\r\n\r\n            </main>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(TeacherClasses);\r\n","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\account.js",["93","94","95","96","97","98"],"import React, { useState, useEffect, useContext } from 'react';\r\nimport { db, storage } from '../firebase';\r\n\r\nimport withStyles from '@material-ui/core/styles/withStyles';\r\nimport Button from '@material-ui/core/Button';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport { UserContext } from '../userContext';\r\n\r\nconst styles = (theme) => ({\r\n\tcontent: {\r\n\t\tflexGrow: 1,\r\n\t\tpadding: theme.spacing(3)\r\n\t},\r\n\ttitle: {\r\n\t\tmarginLeft: theme.spacing(2),\r\n\t\tflex: 1\r\n\t},\r\n\tsubmitButton: {\r\n\t\tdisplay: 'block',\r\n\t\tcolor: 'white',\r\n\t\ttextAlign: 'center',\r\n\t\tposition: 'absolute',\r\n\t\ttop: 14,\r\n\t\tright: 10\r\n\t},\r\n\tfloatingButton: {\r\n\t\tposition: 'fixed',\r\n\t\tbottom: 0,\r\n\t\tright: 0\r\n\t},\r\n\tform: {\r\n\t\twidth: '98%',\r\n\t\tmarginLeft: 13,\r\n\t\tmarginTop: theme.spacing(3)\r\n\t},\r\n\ttoolbar: theme.mixins.toolbar,\r\n\troot: {\r\n\t\tminWidth: 470\r\n\t},\r\n\tbullet: {\r\n\t\tdisplay: 'inline-block',\r\n\t\tmargin: '0 2px',\r\n\t\ttransform: 'scale(0.8)'\r\n\t},\r\n\tpos: {\r\n\t\tmarginBottom: 12\r\n\t},\r\n\tuiProgess: {\r\n\t\tposition: 'fixed',\r\n\t\tzIndex: '1000',\r\n\t\theight: '31px',\r\n\t\twidth: '31px',\r\n\t\tleft: '50%',\r\n\t\ttop: '35%'\r\n\t},\r\n    avatar: {\r\n\t\theight: 330,\r\n\t\twidth: 300,\r\n\t\tflexShrink: 0,\r\n\t\tflexGrow: 0,\r\n\t\tmarginTop: 20\r\n\t},\r\n\tviewRoot: {\r\n\t\tmargin: 0,\r\n\t\tpadding: theme.spacing(2)\r\n\t}\r\n});\r\n\r\nfunction Account(props) {\r\n\r\n    const { currentUser, avatar, loading } = useContext(UserContext)\r\n\r\n    const { classes } = props;\r\n\r\n    const [fileUrl, setFileUrl] = useState(null);\r\n\tconst [ fileUpload, setFileUpload ] = useState(null)\r\n\r\n    //const db = firebase.firestore()\r\n  \r\n    const onFileChange = async (e) => {\r\n\t  setFileUpload(e.target.files[0])\r\n    };\r\n  \r\n    const onSubmit = async () => {\r\n\r\n\t  console.log('file upload name is '+fileUpload.name)\r\n\r\n \t  const storageRef = storage.ref();\r\n\t  //const storageRef = firebase.storage().ref();\r\n      const fileRef = storageRef.child(fileUpload.name);\r\n      await fileRef.put(fileUpload);\r\n\t  let downloadUrl = await fileRef.getDownloadURL()\r\n\t  console.log('waiting for download url '+await downloadUrl)\r\n      db.collection(\"users\").doc(currentUser.uid).update({\r\n\t\t  avatar: await downloadUrl\r\n\t\t});\r\n  \t  await currentUser.updateProfile({\r\n\t\t  photoURL: await downloadUrl\r\n\t  })\r\n\t  .then(function() {\r\n\t\tconsole.log(\"update appears successful\")\r\n\t  }).catch(function(error) {\r\n\t\tconsole.log('problem updating image')\r\n\t  });\r\n\r\n    };\r\n\r\n    if (loading === true) {\r\n        return (\r\n            <main className={classes.content}>\r\n                <div className={classes.toolbar} />\r\n                {loading && <CircularProgress size={150} className={classes.uiProgess} />}\r\n            </main>\r\n        );\r\n    } else {\r\n        return (\r\n            <main className={classes.content}>\r\n                <div className={classes.toolbar} />\r\n\r\n                <center>\r\n                    <Avatar alt=\"User Avatar\" src={avatar} className={classes.avatar} />\r\n                    <p>\r\n                        {' '}\r\n                        {currentUser && currentUser.displayName ? currentUser.displayName : \"Welcome!\"}\r\n                    </p>\r\n                </center>\r\n\r\n\t\t\t\t<input type=\"file\" onChange={onFileChange} />\r\n\t\t\t\t<button onClick = {onSubmit}> Submit New Image </button>\r\n\r\n            </main>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(Account);\r\n","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\editortest.js",[],["99","100"],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\EditorToolbar.js",[],["101","102"],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\editortest2.js",[],{"ruleId":"103","replacedBy":"104"},{"ruleId":"105","replacedBy":"106"},{"ruleId":"107","severity":1,"message":"108","line":4,"column":8,"nodeType":"109","messageId":"110","endLine":4,"endColumn":18},{"ruleId":"107","severity":1,"message":"111","line":5,"column":8,"nodeType":"109","messageId":"110","endLine":5,"endColumn":21},{"ruleId":"107","severity":1,"message":"112","line":5,"column":25,"nodeType":"109","messageId":"110","endLine":5,"endColumn":32},{"ruleId":"107","severity":1,"message":"113","line":5,"column":34,"nodeType":"109","messageId":"110","endLine":5,"endColumn":41},{"ruleId":"114","severity":1,"message":"115","line":154,"column":8,"nodeType":"116","endLine":154,"endColumn":10,"suggestions":"117"},{"ruleId":"107","severity":1,"message":"118","line":12,"column":8,"nodeType":"109","messageId":"110","endLine":12,"endColumn":19},{"ruleId":"107","severity":1,"message":"119","line":67,"column":10,"nodeType":"109","messageId":"110","endLine":67,"endColumn":19},{"ruleId":"107","severity":1,"message":"120","line":80,"column":9,"nodeType":"109","messageId":"110","endLine":80,"endColumn":14},{"ruleId":"107","severity":1,"message":"121","line":82,"column":20,"nodeType":"109","messageId":"110","endLine":82,"endColumn":31},{"ruleId":"107","severity":1,"message":"122","line":30,"column":8,"nodeType":"109","messageId":"110","endLine":30,"endColumn":22},{"ruleId":"107","severity":1,"message":"123","line":112,"column":13,"nodeType":"109","messageId":"110","endLine":112,"endColumn":19},{"ruleId":"107","severity":1,"message":"124","line":1,"column":27,"nodeType":"109","messageId":"110","endLine":1,"endColumn":36},{"ruleId":"107","severity":1,"message":"125","line":5,"column":8,"nodeType":"109","messageId":"110","endLine":5,"endColumn":14},{"ruleId":"107","severity":1,"message":"126","line":6,"column":8,"nodeType":"109","messageId":"110","endLine":6,"endColumn":17},{"ruleId":"107","severity":1,"message":"127","line":7,"column":8,"nodeType":"109","messageId":"110","endLine":7,"endColumn":12},{"ruleId":"107","severity":1,"message":"128","line":78,"column":12,"nodeType":"109","messageId":"110","endLine":78,"endColumn":19},{"ruleId":"107","severity":1,"message":"129","line":78,"column":21,"nodeType":"109","messageId":"110","endLine":78,"endColumn":31},{"ruleId":"103","replacedBy":"130"},{"ruleId":"105","replacedBy":"131"},{"ruleId":"103","replacedBy":"132"},{"ruleId":"105","replacedBy":"133"},"no-native-reassign",["134"],"no-negated-in-lhs",["135"],"no-unused-vars","'ReactQuill' is defined but never used.","Identifier","unusedVar","'EditorToolbar' is defined but never used.","'modules' is defined but never used.","'formats' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'currentUser'. Either include it or remove the dependency array.","ArrayExpression",["136"],"'MultiSelect' is defined but never used.","'getStyles' is defined but never used.","'theme' is assigned a value but never used.","'setSelected' is assigned a value but never used.","'MultipleSelect' is defined but never used.","'errors' is assigned a value but never used.","'useEffect' is defined but never used.","'Button' is defined but never used.","'TextField' is defined but never used.","'Grid' is defined but never used.","'fileUrl' is assigned a value but never used.","'setFileUrl' is assigned a value but never used.",["134"],["135"],["134"],["135"],"no-global-assign","no-unsafe-negation",{"desc":"137","fix":"138"},"Update the dependencies array to be: [currentUser]",{"range":"139","text":"140"},[4610,4612],"[currentUser]"]