[{"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\index.js":"1","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\App.js":"2","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\reportWebVitals.js":"3","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\pages\\login.js":"4","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\pages\\home.js":"5","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\firebase.js":"6","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\note.js":"7","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\chips.js":"8","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\select.js":"9","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\UserContext.js":"10","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\contextChecker.js":"11","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\userContext.js":"12","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\classes.js":"13","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\account.js":"14","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\editortest2.js":"15","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\listcards.js":"16","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\viewnotes.js":"17","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\temp.js":"18","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\badges.js":"19","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\App2.js":"20","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\layout.js":"21","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\badgedetails.js":"22","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\feedback.js":"23","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\students.js":"24","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\studentdetails.js":"25","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\badgeform.js":"26","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\badgeform2.js":"27","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\mybadges.js":"28","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\mybadgedetails.js":"29","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\mybadgeslist.js":"30","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\progressbar.js":"31","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\listcards2.js":"32","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\studentcontext.js":"33","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\addclass.js":"34","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\pages\\logout.js":"35","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\pages\\mybadgesredirect.js":"36","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\feedbackview.js":"37","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\addclass3.js":"38","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\listcards3.js":"39","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\listgoals.js":"40","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\listtable.js":"41"},{"size":550,"mtime":1628505507925,"results":"42","hashOfConfig":"43"},{"size":845,"mtime":1625471999625,"results":"44","hashOfConfig":"43"},{"size":362,"mtime":499162500000,"results":"45","hashOfConfig":"43"},{"size":2755,"mtime":1628743114710,"results":"46","hashOfConfig":"43"},{"size":5802,"mtime":1625471999635,"results":"47","hashOfConfig":"43"},{"size":678,"mtime":1618708206546,"results":"48","hashOfConfig":"43"},{"size":22457,"mtime":1639746907530,"results":"49","hashOfConfig":"43"},{"size":275,"mtime":1615975291635,"results":"50","hashOfConfig":"43"},{"size":2846,"mtime":1639636430014,"results":"51","hashOfConfig":"43"},{"size":806,"mtime":1612357304510,"results":"52","hashOfConfig":"43"},{"size":311,"mtime":1612357855261,"results":"53","hashOfConfig":"43"},{"size":1916,"mtime":1628505507930,"results":"54","hashOfConfig":"43"},{"size":17000,"mtime":1639980360677,"results":"55","hashOfConfig":"43"},{"size":3565,"mtime":1629289533897,"results":"56","hashOfConfig":"43"},{"size":1170,"mtime":1624461495102,"results":"57","hashOfConfig":"43"},{"size":2931,"mtime":1625471999630,"results":"58","hashOfConfig":"43"},{"size":4157,"mtime":1625471999633,"results":"59","hashOfConfig":"43"},{"size":15562,"mtime":1620273505241,"results":"60","hashOfConfig":"61"},{"size":8592,"mtime":1635645815196,"results":"62","hashOfConfig":"43"},{"size":4802,"mtime":1639979285773,"results":"63","hashOfConfig":"43"},{"size":5415,"mtime":1639721099416,"results":"64","hashOfConfig":"43"},{"size":11804,"mtime":1635645815192,"results":"65","hashOfConfig":"43"},{"size":15650,"mtime":1635645815198,"results":"66","hashOfConfig":"43"},{"size":21026,"mtime":1637624067480,"results":"67","hashOfConfig":"43"},{"size":2468,"mtime":1628505507923,"results":"68","hashOfConfig":"43"},{"size":8215,"mtime":1626665072572,"results":"69","hashOfConfig":"43"},{"size":14013,"mtime":1635645815194,"results":"70","hashOfConfig":"43"},{"size":4723,"mtime":1628824093385,"results":"71","hashOfConfig":"43"},{"size":9814,"mtime":1635645815200,"results":"72","hashOfConfig":"43"},{"size":1056,"mtime":1627037479146,"results":"73","hashOfConfig":"43"},{"size":1181,"mtime":1628505507921,"results":"74","hashOfConfig":"43"},{"size":6406,"mtime":1639478699942,"results":"75","hashOfConfig":"43"},{"size":372,"mtime":1627662620896,"results":"76","hashOfConfig":"43"},{"size":2375,"mtime":1630087686935,"results":"77","hashOfConfig":"43"},{"size":141,"mtime":1628505507929,"results":"78","hashOfConfig":"43"},{"size":467,"mtime":1628505507929,"results":"79","hashOfConfig":"43"},{"size":6403,"mtime":1635645815200,"results":"80","hashOfConfig":"43"},{"size":5677,"mtime":1635645815192,"results":"81","hashOfConfig":"43"},{"size":7780,"mtime":1639647470113,"results":"82","hashOfConfig":"43"},{"size":6485,"mtime":1639748761922,"results":"83","hashOfConfig":"43"},{"size":9470,"mtime":1639819093149,"results":"84","hashOfConfig":"43"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},"ys4om1",{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"x9ovq5",{"filePath":"122","messages":"123","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"87"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"87"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"87"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"149"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"87"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"157"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"87"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"172","usedDeprecatedRules":"87"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":35,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"87"},"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\index.js",[],["176","177"],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\App.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\reportWebVitals.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\pages\\login.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\pages\\home.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\firebase.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\note.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\chips.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\select.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\UserContext.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\contextChecker.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\userContext.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\classes.js",["178","179"],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\account.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\editortest2.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\listcards.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\viewnotes.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\temp.js",["180","181"],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\badges.js",["182","183","184","185"],"import React, { useState, useContext, useEffect } from 'react';\r\nimport { db } from '../firebase';\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport Toolbar from '@material-ui/core/Toolbar'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Card from '@material-ui/core/Card'\r\nimport CardActions from '@material-ui/core/CardActions';\r\n\r\nimport Button from '@material-ui/core/Button'\r\nimport CardMedia from '@material-ui/core/CardMedia'\r\nimport CardContent from '@material-ui/core/CardContent'\r\nimport { Box, Typography, FormControl, InputLabel, Select, MenuItem, TextField, Tooltip } from '@material-ui/core';\r\nimport { UserContext } from '../userContext';\r\n\r\nfunction Badges(props) {\r\n\r\n    const { loading, isAdmin } = useContext(UserContext)\r\n\r\n    const [ badges, setBadges ] = useState([])\r\n    const [ classesList, setClassesList ] = useState([])\r\n    const [ selectedCourse, setSelectedCourse ] = useState(\"All Badges\")\r\n    const [ searchParam ] = useState([\"badgename\"]);\r\n    const [ supportedBadgeIds, setSupportedBadgeIds ] = useState([])\r\n    const [q, setQ] = useState(\"\");\r\n\r\n    const [ uiLoading, setUiLoading ] = useState(loading)\r\n\r\n/*     useEffect(() => {\r\n        \r\n        return db.collection(\"badges\")\r\n\r\n        .onSnapshot(snapshot => {\r\n            const badgesData = [];\r\n            snapshot.forEach(doc => badgesData.push({ ...doc.data(), id: doc.id }));\r\n            setBadges(badgesData)\r\n            setUiLoading(false)\r\n            console.log('badges are '+badgesData)\r\n        })\r\n    }, []); */\r\n\r\n    useEffect(() => {\r\n        setUiLoading(true)\r\n        return db.collection(\"adminDocs\").doc(\"badgeList\")\r\n\r\n        .onSnapshot(snapshot => {\r\n            setBadges(snapshot.data().badges)\r\n            setUiLoading(false)\r\n        })\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        setUiLoading(true)\r\n        return db.collection(\"adminDocs\").doc(\"classesList\").get()\r\n\r\n        .then(doc => {\r\n            setClassesList(doc.data().classes)\r\n            setUiLoading(false)\r\n        })\r\n    }, []);\r\n\r\n    function search(badges) {\r\n        return badges.filter((badge) => {\r\n            if (supportedBadgeIds.includes(badge.id)) {\r\n                return searchParam.some((newBadge) => {\r\n                    return (\r\n                        badge[newBadge]\r\n                            .toString()\r\n                            .toLowerCase()\r\n                            .indexOf(q.toLowerCase()) > -1\r\n                    );\r\n                });\r\n                //return true\r\n            } else if (selectedCourse == \"All Badges\") {\r\n                 return searchParam.some((newBadge) => {\r\n                    return (\r\n                        badge[newBadge]\r\n                            .toString()\r\n                            .toLowerCase()\r\n                            .indexOf(q.toLowerCase()) > -1\r\n                    );\r\n                });\r\n                //return true\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    const handleCourseFilter = (event) => {\r\n\r\n        if(event.target.value == \"All Badges\"){\r\n            setSelectedCourse(event.target.value)\r\n        } else {\r\n            setSelectedCourse(event.target.value)\r\n            const oneCourseObjectInArray = classesList.filter(course => {\r\n                return course.classId === event.target.value\r\n            })\r\n            console.log(event.target.value)\r\n            const supportedBadgeArray = oneCourseObjectInArray[0].supportedBadges\r\n            setSupportedBadgeIds(supportedBadgeArray.map(badgeObj => {\r\n                return badgeObj.value\r\n            }))\r\n            console.log(\"supported badge ids are \"+JSON.stringify(supportedBadgeIds))\r\n        }\r\n    }\r\n\r\n    if (uiLoading === true) {\r\n        return (\r\n            <main sx={{flexGrow:1, p:3}} >\r\n                <Toolbar />\r\n                {uiLoading && <CircularProgress size={150} sx={{\r\n                    position: 'fixed',\r\n                    zIndex: '1000',\r\n                    height: '31px',\r\n                    width: '31px',\r\n                    left: '50%',\r\n                    top: '35%'\r\n                }} />}\r\n            </main>\r\n        );\r\n    } else {\r\n        return (\r\n            <main sx={{flexGrow:1, p:3}}>\r\n            <Toolbar />\r\n            <Grid container pb={3}>\r\n                <Grid item xs={12} pb={2}>\r\n                {isAdmin &&\r\n                    <Button component={Link} to={'/badgeForm'} size='small' variant='contained' >Add Badge</Button>\r\n                }\r\n                </Grid>\r\n                <Grid item xs={4}>\r\n                    <FormControl fullWidth>\r\n                        <TextField\r\n                            id=\"search-course\"\r\n                            label=\"Badge search\"\r\n                            type=\"search\"\r\n                            value={q}\r\n                            onChange={(e) => setQ(e.target.value)}\r\n                        />\r\n                    </FormControl> \r\n                </Grid>\r\n                <Grid item xs={3}/>\r\n                <Grid item xs={3}>\r\n\r\n                    <FormControl fullWidth sx={{ m: 1, width: 300 }}>\r\n                    <InputLabel id=\"course-label\">Course</InputLabel>\r\n                    <Select\r\n                        labelId=\"course-select-label\"\r\n                        defaultValue=\"All Badges\"\r\n                        id=\"course-select\"\r\n                        value={selectedCourse ? selectedCourse : \"All Badges\"}\r\n                        label=\"Course\"\r\n                        onChange={handleCourseFilter}\r\n                    >\r\n                            <MenuItem key={\"all courses\"} value={\"All Badges\"}>All Badges</MenuItem>    \r\n\r\n                        {classesList && classesList.map((eachClass) => (\r\n                            <MenuItem key={eachClass.name} value={eachClass.classId}>{eachClass.name}</MenuItem>    \r\n                        ))}\r\n\r\n                    </Select>\r\n                    </FormControl>\r\n                    </Grid>\r\n            </Grid>\r\n\r\n            <Grid container spacing={3} justifyContent='space-around'>\r\n                    {badges && badges.length>0 && search(badges).map((badge) => (\r\n                        <Grid item xs={12} sm={6} md={4} lg={3} key = {badge.id} p={2}>\r\n                            <Card sx={{ maxWidth: 250, minWidth: 200, backgroundColor:'#eeeeee', pt:1 }}>\r\n                                <Tooltip title={badge.description.substring(0, 200)+\"...\"}>\r\n                                    <CardMedia\r\n                                        sx={{ height: 100, width: 'auto', m:'auto' }}\r\n                                        image={badge.imageUrl}\r\n                                        component='img'\r\n                                    />\r\n                                </Tooltip>\r\n                            <CardContent sx={{width: 'auto'}}>\r\n                                <Box sx={{display: 'flex', justifyContent:'center'}}>\r\n                                    <Typography fontWeight='bold' align='center' gutterBottom variant=\"subtitle1\" component={Link} to={`/badges/${badge.id}`} >\r\n                                    {badge.badgename}\r\n                                    </Typography>\r\n                                </Box>\r\n                                <Box sx={{display: 'flex', justifyContent:'center'}}>\r\n                                    <Box padding={1}>\r\n                                        <Typography variant='subtitle2'>Lvl: {badge.badgelevel}</Typography>\r\n                                    </Box>\r\n                                    <Box padding={1}>\r\n                                        <Typography variant='subtitle2'>Crits: {badge.totalcrits}</Typography>\r\n                                    </Box>\r\n                                </Box>\r\n                                <Box sx={{display: 'flex', justifyContent:'center'}}>\r\n                                    {badge.status === \"Dev\" ? 'Development' : 'Published'}\r\n                                </Box>\r\n                            </CardContent>\r\n                                {isAdmin && \r\n                                    <Button sx={{display: 'flex', justifyContent:'center'}} component={Link} to={`/badgeForm/${badge.id}`} size=\"small\">Edit</Button>\r\n                                }\r\n                            </Card>\r\n                        </Grid>\r\n                    ))}\r\n                </Grid>\r\n\r\n            </main>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Badges;","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\App2.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\layout.js",["186"],"import { useContext, useState, useEffect } from 'react'\r\nimport { useHistory, useLocation } from \"react-router-dom\";\r\nimport { UserContext } from \"../userContext\"\r\n\r\nimport Box from '@material-ui/core/Box'\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Button from '@material-ui/core/Button'\r\nimport List from '@material-ui/core/List';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport AccountBoxIcon from '@material-ui/icons/AccountBox';\r\nimport NotesIcon from '@material-ui/icons/Notes';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\r\nimport ShieldIcon from '@material-ui/icons/Shield';\r\nimport { EmojiPeople } from '@material-ui/icons';\r\n\r\nconst drawerWidth = 200;\r\n\r\n const menuItemsUser = [\r\n    { \r\n        text: 'My Plans', \r\n        icon: <NotesIcon color=\"secondary\" />, \r\n        path: '/' \r\n    },\r\n    { \r\n        text: 'Account', \r\n        icon: <AccountBoxIcon color=\"secondary\" />, \r\n        path: '/account' \r\n    },\r\n    {\r\n        text: 'MyBadges',\r\n        icon: <ShieldIcon color=\"primary\" />,\r\n        path: '/myBadges'\r\n    }\r\n  ];\r\n\r\n  const menuItemsAdmin = [\r\n    { \r\n        text: 'My Classes', \r\n        icon: <NotesIcon color=\"secondary\" />, \r\n        path: '/classes' \r\n    },\r\n    { \r\n        text: 'Account', \r\n        icon: <AccountBoxIcon color=\"secondary\" />, \r\n        path: '/account' \r\n    },\r\n    {\r\n        text: 'Students',\r\n        icon: <EmojiPeople color=\"secondary\" />,\r\n        path: '/students'\r\n    }\r\n  ]\r\n\r\nfunction Layout({ children }) {\r\n\r\n    const { currentUser, isAdmin, loading, avatar, logout } = useContext(UserContext);\r\n    const location = useLocation()\r\n    const [ menuItems, setMenuItems ] = useState([])\r\n\r\n\r\n\r\n    let history = useHistory();\r\n\r\n    if(currentUser){\r\n        console.log('In Layout user is Admin is '+isAdmin)\r\n    } else {\r\n        history.push('/login')\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(isAdmin){\r\n            setMenuItems(menuItemsAdmin)\r\n        } else {\r\n            setMenuItems(menuItemsUser)\r\n        }\r\n    },[isAdmin])\r\n\r\n\tconst logoutHandler = async(event) => {\r\n        console.log('Logout Clicked');\r\n        await logout().then(() => {\r\n            history.push('/login')\r\n          }).catch((error) => {\r\n            console.log('Error signing out')\r\n          });;\r\n\t};\r\n\r\n    if(currentUser) {\r\n        return (\r\n            <Box sx={{display:'flex'}}>\r\n                <CssBaseline />\r\n                <AppBar position=\"fixed\" sx={{zIndex: (theme) => theme.zIndex.drawer + 1}} >\r\n                    <Toolbar>\r\n                        <Typography variant=\"h6\" noWrap>\r\n                            NotesApp\r\n                        </Typography>\r\n                        <Box sx={{flexGrow:1}}/>\r\n                        <Button color='inherit' onClick={() => history.push('/badges')} >Badges</Button>\r\n                    </Toolbar>\r\n                </AppBar>\r\n                <Drawer\r\n                    variant=\"permanent\"\r\n                    sx={{\r\n                        width: drawerWidth,\r\n                        flexShrink: 0,\r\n                        '& .MuiDrawer-paper': { boxSizing: 'border-box', width: drawerWidth },\r\n                        }}\r\n                >\r\n                    <Toolbar />\r\n                    <Divider />\r\n                    <center>\r\n                        <Avatar alt=\"User Avatar\" src={avatar} sx={{height: 110, width: 100, flexShrink: 0, flexGrow: 0, marginTop: 2}} />\r\n                        <p>\r\n                            {' '}\r\n                            {currentUser && currentUser.displayName ? currentUser.displayName : \"Welcome!\"}\r\n                        </p>\r\n                    </center>\r\n                    <Divider />\r\n                    <List>\r\n                    {menuItems.map((item) => (\r\n                        <ListItem \r\n                        button \r\n                        key={item.text} \r\n                        onClick={() => history.push(item.path)}\r\n                        className={location.pathname === item.path ? null : null}\r\n                        >\r\n                        <ListItemIcon>{item.icon}</ListItemIcon>\r\n                        <ListItemText primary={item.text} />\r\n                        </ListItem>\r\n                    ))}\r\n                        <ListItem\r\n                        button\r\n                        key='logout'\r\n                        onClick={() => logoutHandler()}\r\n                        >\r\n                            <ListItemIcon>\r\n                                {' '}\r\n                                <ExitToAppIcon />{' '}\r\n                                <ListItemText primary='Logout' />\r\n                            </ListItemIcon>\r\n                        </ListItem>\r\n                    </List>\r\n                </Drawer>\r\n                <Box sx={{width:1, m:2}} >{children}</Box>\r\n            </Box>    \r\n        )\r\n    } else {\r\n        return <div></div>\r\n    }\r\n\r\n}\r\n\r\nexport default Layout;","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\badgedetails.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\feedback.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\students.js",["187"],"import React, { useState, useContext, useEffect } from 'react';\r\nimport firebase, { db } from '../firebase';\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nimport { UserContext } from '../userContext';\r\nimport PropTypes from 'prop-types';\r\nimport { alpha } from '@material-ui/core/styles';\r\nimport Box from '@material-ui/core/Box';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport FilterListIcon from '@material-ui/icons/FilterList';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport { AssignmentInd, CloudDownload, Edit } from '@material-ui/icons';\r\nimport { AppBar, TextField, Dialog, FormControl, InputLabel, Select, MenuItem, Button, Grid } from '@material-ui/core';\r\n\r\nfunction Students(props) {\r\n\r\n    const { loading, currentUser } = useContext(UserContext)\r\n\r\n    const [ uiLoading ] = useState(loading)\r\n    const [ rows, setRows ] = useState([])\r\n    const [ classes, setClasses ] = useState([])\r\n    const [ selectedClass, setSelectedClass ] = useState()\r\n    const [ selectedStudents, setSelectedStudents ] = useState([])\r\n\r\n    const history = useHistory()\r\n\r\n    useEffect(() => {   \r\n        return db.collection(\"adminDocs\").doc(\"studentList\")\r\n        .onSnapshot((doc) => {\r\n            setRows(doc.data().students)\r\n        })\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        return db.collection(\"users\").doc(currentUser.uid).collection(\"teacherClasses\").get()\r\n        .then((snapshot) => {\r\n            const classData = []\r\n            snapshot.forEach((doc) => {\r\n                classData.push({...doc.data(), id: doc.id})\r\n            })\r\n            setClasses(classData)\r\n            console.log(\"class data is \"+classData)\r\n        })\r\n    },[currentUser.uid])\r\n\r\n    const handleChange = (event) => {\r\n        setSelectedClass(event.target.value)\r\n        console.log('selected class id is '+event.target.value)\r\n    }\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault()\r\n        if(selectedClass.length){\r\n          console.log('planning to submit to class id '+selectedClass)\r\n          console.log('and submit selected student ids are '+selectedStudents)\r\n          db.collection('users').doc(currentUser.uid).collection('teacherClasses')\r\n          .doc(selectedClass).update({\r\n              students: firebase.firestore.FieldValue.arrayUnion(...selectedStudents)\r\n          })\r\n          .then(() => {\r\n            selectedStudents.map(student => (\r\n              db.collection('users').doc(student.uid).update({\r\n                classes: firebase.firestore.FieldValue.arrayUnion(selectedClass)\r\n              })\r\n            ))\r\n          })\r\n          .then(() => {\r\n            history.push('/classes')\r\n          })\r\n        } else {\r\n          alert(\"Make sure to select a class\")\r\n        }\r\n    }\r\n\r\n    if (uiLoading === true) {\r\n        return (\r\n            <main sx={{flexGrow:1, p:3}} >\r\n                <Toolbar />\r\n                {uiLoading && <CircularProgress size={150} sx={{\r\n                    position: 'fixed',\r\n                    zIndex: '1000',\r\n                    height: '31px',\r\n                    width: '31px',\r\n                    left: '50%',\r\n                    top: '35%'\r\n                }} />}\r\n            </main>\r\n        );\r\n    } else {\r\n        return (\r\n            <>\r\n                <Toolbar />\r\n                <Grid container spacing={2} alignItems='center'>\r\n                    <Grid item xs={2} key='classSelect'>\r\n                        <FormControl sx={{ m: 1, minWidth: 120 }}>\r\n                            <InputLabel id=\"demo-simple-select-label\">Classes</InputLabel>\r\n                            <Select\r\n                                labelId=\"select class\"\r\n                                id=\"select-class\"\r\n                                value={selectedClass}\r\n                                label=\"Classes\"\r\n                                onChange={handleChange}\r\n                                defaultValue=\"\"\r\n                            >\r\n                                {classes.map((eachclass) => (\r\n                                    <MenuItem key={eachclass.name} value={eachclass.id}>{eachclass.name}</MenuItem>\r\n                                ))\r\n                                }\r\n                            </Select>\r\n                        </FormControl>\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                        <Typography variant='h6' align='center'>Select students below to add to class</Typography>\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                        <Button variant='contained' onClick={handleSubmit}>Submit</Button>\r\n                    </Grid>\r\n                </Grid>\r\n    \r\n                <Box sx={{flexGrow:1, p:3}} >\r\n                    <EnhancedTable rows={rows} setSelectedStudents={(selecteds) => setSelectedStudents(selecteds)} />\r\n                </Box>\r\n    \r\n            </>\r\n        )\r\n    }\r\n}\r\nexport default Students;\r\n\r\n//The comparator functions below allow the same functions to be used for sorting objects by different columns (different fields within the objects)\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n  if (b[orderBy] < a[orderBy]) {\r\n    return -1;\r\n  }\r\n  if (b[orderBy] > a[orderBy]) {\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n  return order === 'desc'\r\n    ? (a, b) => descendingComparator(a, b, orderBy)\r\n    : (a, b) => -descendingComparator(a, b, orderBy);\r\n}\r\n\r\n// This method is created for cross-browser compatibility, if you don't\r\n// need to support IE11, you can use Array.prototype.sort() directly\r\nfunction stableSort(array, comparator) {\r\n  const stabilizedThis = array.map((el, index) => [el, index]);\r\n  stabilizedThis.sort((a, b) => {\r\n    const order = comparator(a[0], b[0]);\r\n    if (order !== 0) return order;\r\n    return a[1] - b[1];\r\n  });\r\n  return stabilizedThis.map((el) => el[0]);\r\n}\r\n\r\nconst headCells = [\r\n  {\r\n    id: 'firstName',\r\n    numeric: false,\r\n    disablePadding: true,\r\n    label: 'Student Name',\r\n  },\r\n  {\r\n    id: 'year',\r\n    numeric: true,\r\n    disablePadding: false,\r\n    label: 'Graduation Year',\r\n  },\r\n  {\r\n    id: 'uid',\r\n    numeric: false,\r\n    disablePadding: false,\r\n    label: 'uid',\r\n  },\r\n];\r\n\r\nfunction EnhancedTableHead(props) {\r\n  const { onSelectAllClick, order, orderBy, numSelected, rowCount, onRequestSort } = props;\r\n\r\n  //an appropriate \"sortHandler\" will be created for each column (with the \"property\" being the \"id\" of the particular column header)\r\n  const createSortHandler = (property) => (event) => {\r\n    onRequestSort(event, property);\r\n  };\r\n\r\n  return (\r\n    <TableHead>\r\n      <TableRow>\r\n        <TableCell padding=\"checkbox\">\r\n          <Checkbox\r\n            color=\"primary\"\r\n            indeterminate={numSelected > 0 && numSelected < rowCount}\r\n            checked={rowCount > 0 && numSelected === rowCount}\r\n            onChange={onSelectAllClick}\r\n            inputProps={{\r\n              'aria-label': 'select all students',\r\n            }}\r\n          />\r\n        </TableCell>\r\n        {headCells.map((headCell) => (\r\n          <TableCell\r\n            key={headCell.id}\r\n            align={headCell.numeric ? 'right' : 'left'}\r\n            padding={headCell.disablePadding ? 'none' : 'normal'}\r\n            sortDirection={orderBy === headCell.id ? order : false}\r\n            sx={{fontWeight:\"bold\"}}\r\n          >\r\n            <TableSortLabel\r\n              active={orderBy === headCell.id}\r\n              direction={orderBy === headCell.id ? order : 'asc'}\r\n              onClick={createSortHandler(headCell.id)}\r\n            >\r\n              {headCell.label}\r\n            </TableSortLabel>\r\n          </TableCell>\r\n        ))}\r\n      </TableRow>\r\n    </TableHead>\r\n  );\r\n}\r\n\r\nEnhancedTableHead.propTypes = {\r\n  numSelected: PropTypes.number.isRequired,\r\n  onRequestSort: PropTypes.func.isRequired,\r\n  onSelectAllClick: PropTypes.func.isRequired,\r\n  order: PropTypes.oneOf(['asc', 'desc']).isRequired,\r\n  orderBy: PropTypes.string.isRequired,\r\n  rowCount: PropTypes.number.isRequired,\r\n};\r\n\r\nconst EnhancedTableToolbar = (props) => {\r\n  const { numSelected, selected, handleClickOpen } = props;\r\n\r\n  // <IconButton component={Link} to={`/students/${selected[0].uid}`} >\r\n  // <IconButton component={Link} to={{pathname: `/students/${selected[0].uid}`, state: {something: `${selected[0].uid}`} }} >\r\n  // <IconButton component={Link} onClick={handleStudentSelect} to={{pathname: '/myBadges', state: {selectedStudentId: `${selected[0].uid}`, selectedStudentName: `${selected[0].firstName}`} }} >\r\n\r\n  return (\r\n    <Toolbar\r\n      sx={{\r\n        pl: { sm: 2 },\r\n        pr: { xs: 1, sm: 1 },\r\n        ...(numSelected > 0 && {\r\n          bgcolor: (theme) =>\r\n            alpha(theme.palette.primary.main, theme.palette.action.activatedOpacity),\r\n        }),\r\n      }}\r\n    >\r\n      {numSelected > 0 ? (\r\n        <Typography\r\n          sx={{ flex: '1 1 100%' }}\r\n          color=\"inherit\"\r\n          variant=\"subtitle1\"\r\n          component=\"div\"\r\n        >\r\n          {numSelected} selected\r\n        </Typography>\r\n      ) : (\r\n        <Typography\r\n          sx={{ flex: '1 1 100%' }}\r\n          variant=\"h6\"\r\n          id=\"tableTitle\"\r\n          component=\"div\"\r\n        >\r\n          Students\r\n        </Typography>\r\n      )}\r\n\r\n      {numSelected === 1 ? (\r\n        <>\r\n        <Tooltip title=\"Edit Record\">\r\n          <IconButton\r\n            onClick={handleClickOpen}\r\n          >\r\n            <Edit />\r\n          </IconButton>\r\n        </Tooltip>\r\n        <Tooltip title=\"View Details\">\r\n          <IconButton component={Link} to={`/students/${selected[0].uid}/myBadges`} >\r\n            <AssignmentInd />\r\n          </IconButton>\r\n        </Tooltip>\r\n        </>\r\n      ) :\r\n      numSelected > 0 ? (\r\n        <Tooltip title=\"Download records\">\r\n          <IconButton>\r\n            <CloudDownload />\r\n          </IconButton>\r\n        </Tooltip>\r\n      ) : (\r\n        <Tooltip title=\"Filter list\">\r\n          <IconButton>\r\n            <FilterListIcon />\r\n          </IconButton>\r\n        </Tooltip>\r\n      )}\r\n    </Toolbar>\r\n  );\r\n};\r\n\r\nEnhancedTableToolbar.propTypes = {\r\n  numSelected: PropTypes.number.isRequired,\r\n};\r\n\r\nexport function EnhancedTable(props) {\r\n  const [order, setOrder] = useState('asc');\r\n  const [orderBy, setOrderBy] = useState('year');\r\n  const [selected, setSelected] = useState([]);\r\n  const [page, setPage] = useState(0);\r\n  const [dense, setDense] = useState(false);\r\n  const [rowsPerPage, setRowsPerPage] = useState(25);\r\n  const [clickOpen, setClickOpen] = useState(false)\r\n  const [gradYear, setGradYear] = useState(2000)\r\n  const [studentName, setStudentName] = useState(\"\")\r\n  const [error, setError] = useState([])\r\n  const [studentId, setStudentId] = useState('')\r\n\r\n  const rows = props.rows\r\n\r\n  const handleClickOpen = () => {\r\n    setClickOpen(true)\r\n    setStudentName(selected[0].firstName)\r\n    setGradYear(selected[0].year)\r\n    setStudentId(selected[0].uid)\r\n  }\r\n\r\n  const handleClose = () => {\r\n    setClickOpen(false)\r\n    setSelected([])\r\n  }\r\n\r\n  //this will be sent to the \"EnhancedTableHead\" component. It will toggle the order if we click on the most recently ordered header again.\r\n  const handleRequestSort = (event, property) => {\r\n    const isAsc = orderBy === property && order === 'asc';\r\n    setOrder(isAsc ? 'desc' : 'asc');\r\n    setOrderBy(property);\r\n  };\r\n\r\n  const handleSelectAllClick = (event) => {\r\n    if (event.target.checked) {\r\n      //const newSelecteds = rows.map((n) => n.uid);\r\n      const newSelecteds = rows\r\n      setSelected(newSelecteds);\r\n      props.setSelectedStudents(newSelecteds)\r\n      return;\r\n    }\r\n    setSelected([]);\r\n    props.setSelectedStudents([])\r\n  };\r\n\r\n  const handleClick = (event, name) => {\r\n    //const selectedIndex = selected.indexOf(name);\r\n    const selectedIndex = selected.findIndex(function(selection){\r\n      return selection.uid === name.uid\r\n    })\r\n    let newSelected = [];\r\n\r\n    if (selectedIndex === -1) {\r\n      newSelected = newSelected.concat(selected, name);\r\n    } else if (selectedIndex === 0) {\r\n      newSelected = newSelected.concat(selected.slice(1));\r\n    } else if (selectedIndex === selected.length - 1) {\r\n      newSelected = newSelected.concat(selected.slice(0, -1));\r\n    } else if (selectedIndex > 0) {\r\n      newSelected = newSelected.concat(\r\n        selected.slice(0, selectedIndex),\r\n        selected.slice(selectedIndex + 1),\r\n      );\r\n    }\r\n\r\n    setSelected(newSelected);\r\n    props.setSelectedStudents(newSelected)\r\n\r\n  };\r\n\r\n  const handleYearChange = (event) => setGradYear(event.target.value)\r\n\r\n  const handleNameChange = (event) => setStudentName(event.target.value)\r\n\r\n  const handleSubmit = () => {\r\n    console.log(\"Halelujiah\")\r\n    const studentUpdate = {\r\n      firstName:studentName,\r\n      uid:studentId,\r\n      year:gradYear\r\n    }\r\n    db.collection(\"adminDocs\").doc(\"studentList\").update({\r\n      students: firebase.firestore.FieldValue.arrayRemove({\r\n        firstName:selected[0].firstName,\r\n        uid:selected[0].uid,\r\n        year:selected[0].year\r\n      })\r\n    })\r\n    .then(() => {\r\n      db.collection(\"adminDocs\").doc(\"studentList\").update({\r\n        students: firebase.firestore.FieldValue.arrayUnion(studentUpdate)\r\n      })\r\n    })\r\n    .then(() => db.collection(\"users\").doc(studentUpdate.uid).update(studentUpdate))\r\n    setClickOpen(false)\r\n    setSelected([])\r\n  }\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  const handleChangeDense = (event) => {\r\n    setDense(event.target.checked);\r\n  };\r\n\r\n  //const isSelected = (name) => selected.indexOf(name) !== -1;\r\n  const isSelected = (name) => {\r\n    const index = selected.findIndex(function (selection) {\r\n      return selection.uid===name.uid\r\n    })\r\n    return index !== -1\r\n  }\r\n\r\n  // Avoid a layout jump when reaching the last page with empty rows.\r\n  const emptyRows =\r\n    page > 0 ? Math.max(0, (1 + page) * rowsPerPage - rows.length) : 0;\r\n\r\n  return (\r\n    <Box sx={{ width: '100%' }}>\r\n      <Paper sx={{ width: '100%', mb: 2 }}>\r\n        <EnhancedTableToolbar numSelected={selected.length} selected={selected} handleClickOpen={handleClickOpen} />\r\n        <TableContainer>\r\n          <Table\r\n            sx={{ minWidth: 750 }}\r\n            aria-labelledby=\"tableTitle\"\r\n            size={dense ? 'small' : 'medium'}\r\n          >\r\n            <EnhancedTableHead\r\n              numSelected={selected.length}\r\n              order={order}\r\n              orderBy={orderBy}\r\n              onSelectAllClick={handleSelectAllClick}\r\n              onRequestSort={handleRequestSort}\r\n              rowCount={rows.length}\r\n            />\r\n            <TableBody>\r\n              {/* if you don't need to support IE11, you can replace the `stableSort` call with:\r\n                 rows.slice().sort(getComparator(order, orderBy)) */}\r\n              {stableSort(rows, getComparator(order, orderBy))\r\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                .map((row, index) => {\r\n                  const isItemSelected = isSelected(row);\r\n                  const labelId = `enhanced-table-checkbox-${index}`;\r\n\r\n                  return (\r\n                    <TableRow\r\n                      hover\r\n                      onClick={(event) => handleClick(event, row)}\r\n                      role=\"checkbox\"\r\n                      aria-checked={isItemSelected}\r\n                      tabIndex={-1}\r\n                      key={row.uid}\r\n                      selected={isItemSelected}\r\n                    >\r\n                      <TableCell padding=\"checkbox\">\r\n                        <Checkbox\r\n                          color=\"primary\"\r\n                          checked={isItemSelected}\r\n                          inputProps={{\r\n                            'aria-labelledby': labelId,\r\n                          }}\r\n                        />\r\n                      </TableCell>\r\n                      <TableCell\r\n                        component=\"th\"\r\n                        id={labelId}\r\n                        scope=\"row\"\r\n                        padding=\"none\"\r\n                      >\r\n                        {row.firstName}\r\n                      </TableCell>\r\n                      <TableCell align=\"right\">{row.year}</TableCell>\r\n                      <TableCell align=\"left\">{row.uid}</TableCell>\r\n                    </TableRow>\r\n                  );\r\n                })}\r\n              {emptyRows > 0 && (\r\n                <TableRow\r\n                  style={{\r\n                    height: (dense ? 33 : 53) * emptyRows,\r\n                  }}\r\n                >\r\n                  <TableCell colSpan={6} />\r\n                </TableRow>\r\n              )}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n        <TablePagination\r\n          rowsPerPageOptions={[5, 10, 25]}\r\n          component=\"div\"\r\n          count={rows.length}\r\n          rowsPerPage={rowsPerPage}\r\n          page={page}\r\n          onPageChange={handleChangePage}\r\n          onRowsPerPageChange={handleChangeRowsPerPage}\r\n        />\r\n      </Paper>\r\n      <FormControlLabel\r\n        control={<Switch checked={dense} onChange={handleChangeDense} />}\r\n        label=\"Dense padding\"\r\n      />\r\n\r\n      <Dialog fullWidth={true} maxWidth='md' open={clickOpen} onClose={handleClose}>\r\n          <AppBar sx={{position: 'relative'}} >\r\n              <Toolbar>\r\n                  <IconButton edge=\"start\" color=\"inherit\" onClick={handleClose} aria-label=\"close\">\r\n                      <CloseIcon />\r\n                  </IconButton>\r\n                  <Typography variant=\"h6\" sx={{ml:2, flex:1}} >\r\n                      Edit Record\r\n                  </Typography>\r\n                  <Button\r\n                      autoFocus\r\n                      color=\"inherit\"\r\n                      onClick={handleSubmit}\r\n                      sx={{\r\n                          display: 'block',\r\n                          color: 'white',\r\n                          textAlign: 'center',\r\n                          position: 'absolute',\r\n                          top: 14,\r\n                          right: 10\r\n                      }}\r\n                  >\r\n                      Save\r\n                  </Button>\r\n              </Toolbar>\r\n          </AppBar>\r\n\r\n          <Box sx={{\r\n              width: '88%',\r\n              marginLeft: 2,\r\n              marginTop: 3,\r\n              marginBottom: 3\r\n          }} noValidate>\r\n              <Grid container spacing={2}>\r\n                  <Grid item xs={6} key='studentname'>\r\n                      <TextField\r\n                          variant=\"outlined\"\r\n                          required\r\n                          fullWidth\r\n                          id=\"studentName\"\r\n                          label=\"Student Name\"\r\n                          name=\"studentname\"\r\n                          autoComplete=\"studentName\"\r\n                          helperText={error.title}\r\n                          value={studentName}\r\n                          error={error.title ? true : false}\r\n                          onChange={handleNameChange}\r\n                      />\r\n                  </Grid>\r\n                  <Grid item xs={6} key='gradyear'>\r\n                      <TextField\r\n                          variant=\"outlined\"\r\n                          required\r\n                          fullWidth\r\n                          id=\"gradYear\"\r\n                          label=\"Grad Year\"\r\n                          name=\"gradyear\"\r\n                          autoComplete=\"gradYear\"\r\n                          helperText={error.title}\r\n                          value={gradYear}\r\n                          error={error.title ? true : false}\r\n                          onChange={handleYearChange}\r\n                      />\r\n                  </Grid>\r\n\r\n              </Grid>\r\n          </Box>\r\n      </Dialog>\r\n    </Box>\r\n  );\r\n}\r\n","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\studentdetails.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\badgeform.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\badgeform2.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\mybadges.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\mybadgedetails.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\mybadgeslist.js",[],["188","189"],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\progressbar.js",["190"],"import { useState } from \"react\";\r\nimport { Box } from '@material-ui/core'\r\n\r\nexport default function Progress({done}) {\r\n\r\n    console.log('done is '+done)\r\n\r\n/* \tconst [style, setStyle] = useState({\r\n        opacity: 0,\r\n        width:0\r\n    }); */\r\n\t\r\n/* \tsetTimeout(() => {\r\n\t\tconst newStyle = {\r\n\t\t\topacity: 1,\r\n\t\t\twidth: `${done}%`\r\n\t\t}\r\n\t\t\r\n\t\tsetStyle(newStyle);\r\n\t}, 200); */\r\n\t\r\n\treturn (\r\n\t\t<Box sx={{\r\n            backgroundColor: '#d8d8d8',\r\n            borderRadius: 20,\r\n            position: 'relative',\r\n            my: 1,\r\n            mx: 0,\r\n            height: 20,\r\n            width: 200,\r\n        }}>\r\n\t\t\t<Box sx={{\r\n            \tbackground: 'linear-gradient(to left, #F2709C, #FF9472)',\r\n                boxShadow: '0 3px 3px -5px #F2709C, 0 2px 5px #F2709C',\r\n                borderRadius: 20,\r\n                color: '#fff',\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n                opacity: 1,\r\n                width: `${done}%`,\r\n                justifyContent: 'center',\r\n                height: '100%',\r\n                transition: '1s ease 0.3s',\r\n            }}\r\n            >\r\n\t\t\t\t{done}%\r\n\t\t\t</Box>\r\n\t\t</Box>\r\n\t)\r\n}\r\n","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\listcards2.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\studentcontext.js",[],["191","192"],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\addclass.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\pages\\logout.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\pages\\mybadgesredirect.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\feedbackview.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\addclass3.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\listcards3.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\listgoals.js",["193","194","195","196"],"import React from 'react'\r\n/** @jsxImportSource @emotion/react */\r\n\r\nimport dayjs from 'dayjs';\r\n\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Avatar from '@material-ui/core/Avatar'\r\n//import Typography from '@material-ui/core/Typography'\r\nimport Badge from '@material-ui/core/Badge'\r\nimport Message from '@material-ui/icons/Message'\r\nimport { Box, Chip } from '@material-ui/core'\r\nimport { List, ListItem, ListItemIcon } from '@material-ui/core';\r\nimport VisibilityIcon from '@material-ui/icons/Visibility';\r\nimport EditIcon from '@material-ui/icons/Edit'\r\n//import ShieldIcon from '@material-ui/icons/Shield';\r\n\r\n//https://firebasestorage.googleapis.com/v0/b/progressnotes-b6fc9.appspot.com/o/GoalTargetEditted.png?alt=media&token=59a794c9-225a-49c9-949e-6ffa4bb7c188\r\n//https://firebasestorage.googleapis.com/v0/b/progressnotes-b6fc9.appspot.com/o/GoalToInkscapeEditted.svg?alt=media&token=e935e1c8-46fb-4015-bb76-9437294546fc\r\n\r\n\r\nexport default function ListGoals({notes, handleEditOpen, handleViewOpen, deleteNoteHandler, canEdit}) {\r\n\r\n    const PlansIcon = \"https://firebasestorage.googleapis.com/v0/b/progressnotes-b6fc9.appspot.com/o/GoalTargetEditted.png?alt=media&token=59a794c9-225a-49c9-949e-6ffa4bb7c188\"\r\n    const GoalsIcon = \"https://firebasestorage.googleapis.com/v0/b/progressnotes-b6fc9.appspot.com/o/GoalToInkscapeEditted.svg?alt=media&token=e935e1c8-46fb-4015-bb76-9437294546fc\"\r\n\r\n\r\n    function colorForStatus(status) {\r\n        switch (status) {\r\n            case \"Active\":\r\n                return \"primary\"\r\n            case \"Archived\":\r\n                return \"secondary\"\r\n            case \"Paused\":\r\n                return \"info\"\r\n            default:\r\n                return \"info\"\r\n        }\r\n    }\r\n    \r\n    return (\r\n        <div>\r\n            <Grid container spacing={{ xs: 2, md: 2, lg:2 }}>\r\n                {notes.map((note) => (\r\n                    <Grid item xs={12} md={6} lg={4} key = {note.id}>\r\n                        <Box\r\n                            sx={{\r\n                                display: 'flex',\r\n                                flexDirection: 'column',\r\n                                alignItems: 'left',\r\n                                bgcolor: 'background.paper',\r\n                                overflow: 'hidden',\r\n                                borderRadius: '12px',\r\n                                boxShadow: 1,\r\n                                fontWeight: 'bold',\r\n                                justifyContent: 'space-between',\r\n                                maxWidth:250,\r\n                                minWidth:200\r\n                            }}\r\n                        >\r\n                            <Box\r\n                                sx={{\r\n                                    display:'flex',\r\n                                    flexDirection: 'row',\r\n                                    alignItems: 'left',\r\n                                    justifyContent:'left',\r\n                                    p: 1\r\n                                }}\r\n                            >\r\n                                <Box\r\n                                    sx={{\r\n                                    height: 75,\r\n                                    width: 100,\r\n                                    maxHeight: 75,\r\n                                    maxWidth: 100,\r\n                                    ml:1\r\n                                    }}\r\n                                >\r\n                                    {note.noteType === \"TermGoals\" ? \r\n                                        <Avatar aria-label=\"recipe\" sx={{height: 75, width: 75}} src={GoalsIcon} /> :\r\n                                        <Avatar aria-label=\"recipe\" sx={{height: 75, width: 75}} src={PlansIcon} />\r\n                                    }\r\n                                    <Box sx={{ ml:0, width: 5 }}>\r\n                                        <List sx={{display:'flex', flexDirection: 'row'}}>\r\n                                            <ListItem \r\n                                            button\r\n                                            key=\"viewNoteFromLC\"\r\n                                            onClick={() => handleViewOpen( note )}\r\n                                            >\r\n                                                <ListItemIcon ><VisibilityIcon fontSize='small'/></ListItemIcon>\r\n                                            </ListItem>\r\n                                        {canEdit && <>\r\n                                            <ListItem \r\n                                            button\r\n                                            key=\"editNoteFromLC\"\r\n                                            onClick={() => handleEditOpen( note )}\r\n                                            >\r\n                                                <ListItemIcon ><EditIcon fontSize='small'/></ListItemIcon>\r\n                                            </ListItem>\r\n                                        </>}\r\n\r\n                                        </List>\r\n                                    </Box>\r\n                                </Box>\r\n                                <Box sx={{\r\n                                    display: 'flex',\r\n                                    flexDirection: 'column',\r\n                                    alignItems: 'left',\r\n                                    m: 1,\r\n                                    minWidth: { md: 125, lg: 125 },\r\n                                    width:125\r\n                                    }}\r\n                                >\r\n                                    <Box component=\"span\" sx={{ fontSize: 10, mt:0 }}>\r\n                                        {note.title}\r\n                                    </Box>\r\n                                    <Box color=\"text.secondary\" component=\"span\" sx={{ fontSize: 10, mt:0 }}>\r\n                                        {dayjs(note.createdAt).fromNow()+\" by \"+note.author}\r\n                                    </Box>\r\n                                    <Box color=\"text.secondary\" component=\"span\" sx={{ ml:1, fontSize: 10 }}>\r\n                                        {note.body.substring(0, 65)+\"...\"}\r\n                                    </Box>\r\n                                </Box>\r\n\r\n\r\n                            </Box>\r\n                        </Box>\r\n                    </Grid>\r\n                ))}\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\listtable.js",["197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213","214","215","216","217","218","219","220","221","222","223","224","225","226","227","228","229","230","231"],"import React, { useState } from 'react';\r\n/** @jsxImportSource @emotion/react */\r\nimport firebase, { db } from '../firebase';\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nimport { UserContext } from '../userContext';\r\nimport PropTypes from 'prop-types';\r\nimport { alpha } from '@material-ui/core/styles';\r\nimport Box from '@material-ui/core/Box';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport FilterListIcon from '@material-ui/icons/FilterList';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport { AssignmentInd, CloudDownload, Edit } from '@material-ui/icons';\r\nimport { AppBar, TextField, Dialog, FormControl, InputLabel, Select, MenuItem, Button, Grid } from '@material-ui/core';\r\n\r\n\r\nimport dayjs from 'dayjs';\r\n\r\nimport Avatar from '@material-ui/core/Avatar'\r\nimport Badge from '@material-ui/core/Badge'\r\nimport Message from '@material-ui/icons/Message'\r\nimport { Chip } from '@material-ui/core'\r\nimport { List, ListItem, ListItemIcon } from '@material-ui/core';\r\nimport VisibilityIcon from '@material-ui/icons/Visibility';\r\nimport EditIcon from '@material-ui/icons/Edit'\r\nimport ShieldIcon from '@material-ui/icons/Shield';\r\n\r\nexport default function ListTable({notes, handleViewOpen}) {\r\n\r\n    const rows = notes\r\n    \r\n    return (\r\n        <div>\r\n            <Box sx={{flexGrow:1, p:3}} >\r\n                <EnhancedTable rows={rows} />\r\n            </Box>            \r\n        </div>\r\n    )\r\n}\r\n\r\n//The comparator functions below allow the same functions to be used for sorting objects by different columns (different fields within the objects)\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n  if (b[orderBy] < a[orderBy]) {\r\n    return -1;\r\n  }\r\n  if (b[orderBy] > a[orderBy]) {\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n  return order === 'desc'\r\n    ? (a, b) => descendingComparator(a, b, orderBy)\r\n    : (a, b) => -descendingComparator(a, b, orderBy);\r\n}\r\n\r\n// This method is created for cross-browser compatibility, if you don't\r\n// need to support IE11, you can use Array.prototype.sort() directly\r\nfunction stableSort(array, comparator) {\r\n  const stabilizedThis = array.map((el, index) => [el, index]);\r\n  stabilizedThis.sort((a, b) => {\r\n    const order = comparator(a[0], b[0]);\r\n    if (order !== 0) return order;\r\n    return a[1] - b[1];\r\n  });\r\n  return stabilizedThis.map((el) => el[0]);\r\n}\r\n\r\nconst headCells = [\r\n  {\r\n    id: 'avatar',\r\n    numeric: false,\r\n    disablePadding: true,\r\n    label: 'Avatar',    \r\n  },\r\n  {\r\n    id: 'author',\r\n    numeric: false,\r\n    disablePadding: true,\r\n    label: 'Author',\r\n  },\r\n  {\r\n    id: 'noteType',\r\n    numeric: false,\r\n    disablePadding: false,\r\n    label: 'Note Type',\r\n  },\r\n  {\r\n    id: 'actionType',\r\n    numeric: false,\r\n    disablePadding: false,\r\n    label: 'Action Type',\r\n  },\r\n  {\r\n    id: 'plannedHrs',\r\n    numeric: false,\r\n    disablePadding: false,\r\n    label: 'Hrs Planned',\r\n  },\r\n  {\r\n    id: 'completedHrs',\r\n    numeric: false,\r\n    disablePadding: false,\r\n    label: 'Hrs Completed',\r\n  },\r\n];\r\n\r\nfunction EnhancedTableHead(props) {\r\n  const { order, orderBy, onRequestSort } = props;\r\n\r\n  //an appropriate \"sortHandler\" will be created for each column (with the \"property\" being the \"id\" of the particular column header)\r\n  const createSortHandler = (property) => (event) => {\r\n    onRequestSort(event, property);\r\n  };\r\n\r\n  return (\r\n    <TableHead>\r\n      <TableRow>\r\n        {headCells.map((headCell) => (\r\n          <TableCell\r\n            key={headCell.id}\r\n            align={headCell.numeric ? 'right' : 'left'}\r\n            padding={headCell.disablePadding ? 'none' : 'normal'}\r\n            sortDirection={orderBy === headCell.id ? order : false}\r\n            sx={{fontWeight:\"bold\"}}\r\n          >\r\n            <TableSortLabel\r\n              active={orderBy === headCell.id}\r\n              direction={orderBy === headCell.id ? order : 'asc'}\r\n              onClick={createSortHandler(headCell.id)}\r\n            >\r\n              {headCell.label}\r\n            </TableSortLabel>\r\n          </TableCell>\r\n        ))}\r\n      </TableRow>\r\n    </TableHead>\r\n  );\r\n}\r\n\r\nEnhancedTableHead.propTypes = {\r\n  onRequestSort: PropTypes.func.isRequired,\r\n  order: PropTypes.oneOf(['asc', 'desc']).isRequired,\r\n  orderBy: PropTypes.string.isRequired,\r\n};\r\n\r\nconst EnhancedTableToolbar = (props) => {\r\n\r\n  return (\r\n    <Toolbar\r\n      sx={{\r\n        pl: { sm: 2 },\r\n        pr: { xs: 1, sm: 1 },\r\n      }}\r\n    >\r\n    </Toolbar>\r\n  );\r\n};\r\n\r\n\r\nexport function EnhancedTable(props) {\r\n  const [order, setOrder] = useState('asc');\r\n  const [orderBy, setOrderBy] = useState('noteType');\r\n  const [page, setPage] = useState(0);\r\n  const [dense, setDense] = useState(false);\r\n  const [rowsPerPage, setRowsPerPage] = useState(25);\r\n\r\n  const rows = props.rows\r\n\r\n  //this will be sent to the \"EnhancedTableHead\" component. It will toggle the order if we click on the most recently ordered header again.\r\n  const handleRequestSort = (event, property) => {\r\n    const isAsc = orderBy === property && order === 'asc';\r\n    setOrder(isAsc ? 'desc' : 'asc');\r\n    setOrderBy(property);\r\n  };\r\n\r\n  const handleClick = (event, name) => {\r\n    console.log(\"Clicked a row!\")\r\n  };\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  const handleChangeDense = (event) => {\r\n    setDense(event.target.checked);\r\n  };\r\n\r\n  // Avoid a layout jump when reaching the last page with empty rows.\r\n  const emptyRows =\r\n    page > 0 ? Math.max(0, (1 + page) * rowsPerPage - rows.length) : 0;\r\n\r\n  return (\r\n    <Box sx={{ width: '100%' }}>\r\n      <Paper sx={{ width: '100%', mb: 2 }}>\r\n        <EnhancedTableToolbar />\r\n        <TableContainer>\r\n          <Table\r\n            sx={{ minWidth: 750 }}\r\n            aria-labelledby=\"tableTitle\"\r\n            size={dense ? 'small' : 'medium'}\r\n          >\r\n            <EnhancedTableHead\r\n              order={order}\r\n              orderBy={orderBy}\r\n              onRequestSort={handleRequestSort}\r\n              rowCount={rows.length}\r\n            />\r\n            <TableBody>\r\n              {/* if you don't need to support IE11, you can replace the `stableSort` call with:\r\n                 rows.slice().sort(getComparator(order, orderBy)) */}\r\n              {stableSort(rows, getComparator(order, orderBy))\r\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                .map((row, index) => {\r\n                  const labelId = `enhanced-table-checkbox-${index}`;\r\n\r\n                  return (\r\n                    <TableRow\r\n                      hover\r\n                      onClick={(event) => handleClick(event, row)}\r\n                      tabIndex={-1}\r\n                      key={row.id}\r\n                    >\r\n                      <TableCell>\r\n                        <Avatar aria-label=\"recipe\" sx={{height: 30, width: 30}} src={row.avatar} />\r\n                      </TableCell>\r\n                      <TableCell\r\n                        component=\"th\"\r\n                        id={labelId}\r\n                        scope=\"row\"\r\n                        padding=\"none\"\r\n                      >\r\n                        {row.author}\r\n                      </TableCell>\r\n                      <TableCell align=\"left\">{row.noteType}</TableCell>\r\n                      <TableCell align=\"left\">{row.actionType}</TableCell>\r\n                      <TableCell align=\"left\">{row.plannedHrs}</TableCell>\r\n                      <TableCell align=\"left\">{row.completedHrs}</TableCell>\r\n                    </TableRow>\r\n                  );\r\n                })}\r\n              {emptyRows > 0 && (\r\n                <TableRow\r\n                  style={{\r\n                    height: (dense ? 33 : 53) * emptyRows,\r\n                  }}\r\n                >\r\n                  <TableCell colSpan={6} />\r\n                </TableRow>\r\n              )}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n        <TablePagination\r\n          rowsPerPageOptions={[5, 10, 25]}\r\n          component=\"div\"\r\n          count={rows.length}\r\n          rowsPerPage={rowsPerPage}\r\n          page={page}\r\n          onPageChange={handleChangePage}\r\n          onRowsPerPageChange={handleChangeRowsPerPage}\r\n        />\r\n      </Paper>\r\n      <FormControlLabel\r\n        control={<Switch checked={dense} onChange={handleChangeDense} />}\r\n        label=\"Dense padding\"\r\n      />\r\n    </Box>\r\n  );\r\n}\r\n",{"ruleId":"232","replacedBy":"233"},{"ruleId":"234","replacedBy":"235"},{"ruleId":"236","severity":1,"message":"237","line":4,"column":8,"nodeType":"238","messageId":"239","endLine":4,"endColumn":17},{"ruleId":"236","severity":1,"message":"240","line":9,"column":8,"nodeType":"238","messageId":"239","endLine":9,"endColumn":18},{"ruleId":"236","severity":1,"message":"241","line":103,"column":13,"nodeType":"238","messageId":"239","endLine":103,"endColumn":17},{"ruleId":"236","severity":1,"message":"242","line":119,"column":13,"nodeType":"238","messageId":"239","endLine":119,"endColumn":19},{"ruleId":"236","severity":1,"message":"243","line":9,"column":8,"nodeType":"238","messageId":"239","endLine":9,"endColumn":19},{"ruleId":"244","severity":1,"message":"245","line":64,"column":38,"nodeType":"246","messageId":"247","endLine":64,"endColumn":40},{"ruleId":"248","severity":1,"message":"249","line":75,"column":39,"nodeType":"250","messageId":"251","endLine":75,"endColumn":41},{"ruleId":"248","severity":1,"message":"249","line":92,"column":31,"nodeType":"250","messageId":"251","endLine":92,"endColumn":33},{"ruleId":"236","severity":1,"message":"252","line":64,"column":35,"nodeType":"238","messageId":"239","endLine":64,"endColumn":42},{"ruleId":"236","severity":1,"message":"253","line":335,"column":17,"nodeType":"238","messageId":"239","endLine":335,"endColumn":25},{"ruleId":"232","replacedBy":"254"},{"ruleId":"234","replacedBy":"255"},{"ruleId":"236","severity":1,"message":"256","line":1,"column":10,"nodeType":"238","messageId":"239","endLine":1,"endColumn":18},{"ruleId":"232","replacedBy":"257"},{"ruleId":"234","replacedBy":"258"},{"ruleId":"236","severity":1,"message":"259","line":9,"column":8,"nodeType":"238","messageId":"239","endLine":9,"endColumn":13},{"ruleId":"236","severity":1,"message":"260","line":10,"column":8,"nodeType":"238","messageId":"239","endLine":10,"endColumn":15},{"ruleId":"236","severity":1,"message":"261","line":11,"column":15,"nodeType":"238","messageId":"239","endLine":11,"endColumn":19},{"ruleId":"236","severity":1,"message":"262","line":27,"column":14,"nodeType":"238","messageId":"239","endLine":27,"endColumn":28},{"ruleId":"236","severity":1,"message":"263","line":3,"column":8,"nodeType":"238","messageId":"239","endLine":3,"endColumn":16},{"ruleId":"236","severity":1,"message":"264","line":3,"column":20,"nodeType":"238","messageId":"239","endLine":3,"endColumn":22},{"ruleId":"236","severity":1,"message":"265","line":4,"column":10,"nodeType":"238","messageId":"239","endLine":4,"endColumn":14},{"ruleId":"236","severity":1,"message":"266","line":4,"column":16,"nodeType":"238","messageId":"239","endLine":4,"endColumn":26},{"ruleId":"236","severity":1,"message":"267","line":5,"column":8,"nodeType":"238","messageId":"239","endLine":5,"endColumn":24},{"ruleId":"236","severity":1,"message":"268","line":7,"column":10,"nodeType":"238","messageId":"239","endLine":7,"endColumn":21},{"ruleId":"236","severity":1,"message":"269","line":9,"column":10,"nodeType":"238","messageId":"239","endLine":9,"endColumn":15},{"ruleId":"236","severity":1,"message":"270","line":20,"column":8,"nodeType":"238","messageId":"239","endLine":20,"endColumn":18},{"ruleId":"236","severity":1,"message":"271","line":22,"column":8,"nodeType":"238","messageId":"239","endLine":22,"endColumn":16},{"ruleId":"236","severity":1,"message":"272","line":23,"column":8,"nodeType":"238","messageId":"239","endLine":23,"endColumn":18},{"ruleId":"236","severity":1,"message":"273","line":24,"column":8,"nodeType":"238","messageId":"239","endLine":24,"endColumn":15},{"ruleId":"236","severity":1,"message":"274","line":27,"column":8,"nodeType":"238","messageId":"239","endLine":27,"endColumn":22},{"ruleId":"236","severity":1,"message":"275","line":28,"column":8,"nodeType":"238","messageId":"239","endLine":28,"endColumn":17},{"ruleId":"236","severity":1,"message":"276","line":29,"column":10,"nodeType":"238","messageId":"239","endLine":29,"endColumn":23},{"ruleId":"236","severity":1,"message":"277","line":29,"column":25,"nodeType":"238","messageId":"239","endLine":29,"endColumn":38},{"ruleId":"236","severity":1,"message":"278","line":29,"column":40,"nodeType":"238","messageId":"239","endLine":29,"endColumn":44},{"ruleId":"236","severity":1,"message":"279","line":30,"column":10,"nodeType":"238","messageId":"239","endLine":30,"endColumn":16},{"ruleId":"236","severity":1,"message":"280","line":30,"column":18,"nodeType":"238","messageId":"239","endLine":30,"endColumn":27},{"ruleId":"236","severity":1,"message":"281","line":30,"column":29,"nodeType":"238","messageId":"239","endLine":30,"endColumn":35},{"ruleId":"236","severity":1,"message":"282","line":30,"column":37,"nodeType":"238","messageId":"239","endLine":30,"endColumn":48},{"ruleId":"236","severity":1,"message":"283","line":30,"column":50,"nodeType":"238","messageId":"239","endLine":30,"endColumn":60},{"ruleId":"236","severity":1,"message":"284","line":30,"column":62,"nodeType":"238","messageId":"239","endLine":30,"endColumn":68},{"ruleId":"236","severity":1,"message":"285","line":30,"column":70,"nodeType":"238","messageId":"239","endLine":30,"endColumn":78},{"ruleId":"236","severity":1,"message":"286","line":30,"column":80,"nodeType":"238","messageId":"239","endLine":30,"endColumn":86},{"ruleId":"236","severity":1,"message":"287","line":30,"column":88,"nodeType":"238","messageId":"239","endLine":30,"endColumn":92},{"ruleId":"236","severity":1,"message":"288","line":33,"column":8,"nodeType":"238","messageId":"239","endLine":33,"endColumn":13},{"ruleId":"236","severity":1,"message":"259","line":36,"column":8,"nodeType":"238","messageId":"239","endLine":36,"endColumn":13},{"ruleId":"236","severity":1,"message":"260","line":37,"column":8,"nodeType":"238","messageId":"239","endLine":37,"endColumn":15},{"ruleId":"236","severity":1,"message":"261","line":38,"column":10,"nodeType":"238","messageId":"239","endLine":38,"endColumn":14},{"ruleId":"236","severity":1,"message":"289","line":39,"column":10,"nodeType":"238","messageId":"239","endLine":39,"endColumn":14},{"ruleId":"236","severity":1,"message":"290","line":39,"column":16,"nodeType":"238","messageId":"239","endLine":39,"endColumn":24},{"ruleId":"236","severity":1,"message":"291","line":39,"column":26,"nodeType":"238","messageId":"239","endLine":39,"endColumn":38},{"ruleId":"236","severity":1,"message":"292","line":40,"column":8,"nodeType":"238","messageId":"239","endLine":40,"endColumn":22},{"ruleId":"236","severity":1,"message":"293","line":41,"column":8,"nodeType":"238","messageId":"239","endLine":41,"endColumn":16},{"ruleId":"236","severity":1,"message":"294","line":42,"column":8,"nodeType":"238","messageId":"239","endLine":42,"endColumn":18},"no-native-reassign",["295"],"no-negated-in-lhs",["296"],"no-unused-vars","'ListCards' is defined but never used.","Identifier","unusedVar","'Datepicker' is defined but never used.","'body' is assigned a value but never used.","'errors' is assigned a value but never used.","'CardActions' is defined but never used.","array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'loading' is assigned a value but never used.","'setError' is assigned a value but never used.",["295"],["296"],"'useState' is defined but never used.",["295"],["296"],"'Badge' is defined but never used.","'Message' is defined but never used.","'Chip' is defined but never used.","'colorForStatus' is defined but never used.","'firebase' is defined but never used.","'db' is defined but never used.","'Link' is defined but never used.","'useHistory' is defined but never used.","'CircularProgress' is defined but never used.","'UserContext' is defined but never used.","'alpha' is defined but never used.","'Typography' is defined but never used.","'Checkbox' is defined but never used.","'IconButton' is defined but never used.","'Tooltip' is defined but never used.","'FilterListIcon' is defined but never used.","'CloseIcon' is defined but never used.","'AssignmentInd' is defined but never used.","'CloudDownload' is defined but never used.","'Edit' is defined but never used.","'AppBar' is defined but never used.","'TextField' is defined but never used.","'Dialog' is defined but never used.","'FormControl' is defined but never used.","'InputLabel' is defined but never used.","'Select' is defined but never used.","'MenuItem' is defined but never used.","'Button' is defined but never used.","'Grid' is defined but never used.","'dayjs' is defined but never used.","'List' is defined but never used.","'ListItem' is defined but never used.","'ListItemIcon' is defined but never used.","'VisibilityIcon' is defined but never used.","'EditIcon' is defined but never used.","'ShieldIcon' is defined but never used.","no-global-assign","no-unsafe-negation"]