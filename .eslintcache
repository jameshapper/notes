[{"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\index.js":"1","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\App.js":"2","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\reportWebVitals.js":"3","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\pages\\login.js":"4","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\pages\\home.js":"5","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\firebase.js":"6","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\note.js":"7","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\chips.js":"8","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\select.js":"9","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\UserContext.js":"10","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\contextChecker.js":"11","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\userContext.js":"12","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\classes.js":"13","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\account.js":"14","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\editortest2.js":"15","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\listcards.js":"16","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\viewnotes.js":"17","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\temp.js":"18","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\badges.js":"19","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\App2.js":"20","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\layout.js":"21","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\badgedetails.js":"22","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\feedback.js":"23","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\students.js":"24","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\studentdetails.js":"25","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\badgeform.js":"26","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\badgeform2.js":"27","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\mybadges.js":"28","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\mybadgedetails.js":"29","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\mybadgeslist.js":"30","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\progressbar.js":"31","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\listcards2.js":"32","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\studentcontext.js":"33","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\addclass.js":"34","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\pages\\logout.js":"35","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\pages\\mybadgesredirect.js":"36","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\feedbackview.js":"37","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\addclass3.js":"38"},{"size":550,"mtime":1628505507925,"results":"39","hashOfConfig":"40"},{"size":845,"mtime":1625471999625,"results":"41","hashOfConfig":"40"},{"size":362,"mtime":499162500000,"results":"42","hashOfConfig":"40"},{"size":2755,"mtime":1628743114710,"results":"43","hashOfConfig":"40"},{"size":5802,"mtime":1625471999635,"results":"44","hashOfConfig":"40"},{"size":678,"mtime":1618708206546,"results":"45","hashOfConfig":"40"},{"size":13915,"mtime":1628505507920,"results":"46","hashOfConfig":"40"},{"size":275,"mtime":1615975291635,"results":"47","hashOfConfig":"40"},{"size":2805,"mtime":1628505507922,"results":"48","hashOfConfig":"40"},{"size":806,"mtime":1612357304510,"results":"49","hashOfConfig":"40"},{"size":311,"mtime":1612357855261,"results":"50","hashOfConfig":"40"},{"size":1916,"mtime":1628505507930,"results":"51","hashOfConfig":"40"},{"size":14156,"mtime":1630365769061,"results":"52","hashOfConfig":"40"},{"size":3565,"mtime":1629289533897,"results":"53","hashOfConfig":"40"},{"size":1170,"mtime":1624461495102,"results":"54","hashOfConfig":"40"},{"size":2931,"mtime":1625471999630,"results":"55","hashOfConfig":"40"},{"size":4157,"mtime":1625471999633,"results":"56","hashOfConfig":"40"},{"size":15562,"mtime":1620273505241,"results":"57","hashOfConfig":"58"},{"size":8533,"mtime":1630772034912,"results":"59","hashOfConfig":"40"},{"size":4596,"mtime":1630089518450,"results":"60","hashOfConfig":"40"},{"size":5406,"mtime":1628505507914,"results":"61","hashOfConfig":"40"},{"size":11479,"mtime":1629888563513,"results":"62","hashOfConfig":"40"},{"size":14226,"mtime":1628671555409,"results":"63","hashOfConfig":"40"},{"size":20606,"mtime":1630415066623,"results":"64","hashOfConfig":"40"},{"size":2468,"mtime":1628505507923,"results":"65","hashOfConfig":"40"},{"size":8215,"mtime":1626665072572,"results":"66","hashOfConfig":"40"},{"size":12699,"mtime":1630062565180,"results":"67","hashOfConfig":"40"},{"size":4723,"mtime":1628824093385,"results":"68","hashOfConfig":"40"},{"size":9177,"mtime":1628669851115,"results":"69","hashOfConfig":"40"},{"size":1056,"mtime":1627037479146,"results":"70","hashOfConfig":"40"},{"size":1181,"mtime":1628505507921,"results":"71","hashOfConfig":"40"},{"size":6407,"mtime":1629292251254,"results":"72","hashOfConfig":"40"},{"size":372,"mtime":1627662620896,"results":"73","hashOfConfig":"40"},{"size":2375,"mtime":1630087686935,"results":"74","hashOfConfig":"40"},{"size":141,"mtime":1628505507929,"results":"75","hashOfConfig":"40"},{"size":467,"mtime":1628505507929,"results":"76","hashOfConfig":"40"},{"size":5929,"mtime":1628505507914,"results":"77","hashOfConfig":"40"},{"size":5677,"mtime":1630491581112,"results":"78","hashOfConfig":"40"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},"ys4om1",{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"81"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"x9ovq5",{"filePath":"117","messages":"118","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"81"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"130","usedDeprecatedRules":"81"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"143"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"81"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"81"},"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\index.js",[],["162","163"],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\App.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\reportWebVitals.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\pages\\login.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\pages\\home.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\firebase.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\note.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\chips.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\select.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\UserContext.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\contextChecker.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\userContext.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\classes.js",["164"],"import React, { useState, useEffect, useContext } from 'react';\r\nimport firebase, { db, auth } from '../firebase';\r\nimport { UserContext } from '../userContext';\r\nimport ListCards from './listcards2'\r\nimport ViewNotes from './viewnotes'\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport Datepicker from 'react-datepicker'\r\nimport 'react-datepicker/dist/react-datepicker.css'\r\nimport dayjs from 'dayjs';\r\nimport relativeTime from 'dayjs/plugin/relativeTime';\r\nimport MultiSelect from \"react-multi-select-component\";\r\n\r\nimport Box from '@material-ui/core/Box'\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n\treturn <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nfunction TeacherClasses(props) {\r\n\r\n    const [ user ] = useState(auth.currentUser)\r\n\r\n    const [ title, setTitle ] = useState('')\r\n    const [ noteId, setNoteId ] = useState('')\r\n    const [ studentId, setStudentId ] = useState('')\r\n\r\n    const [ students10, setStudents10 ] = useState([])\r\n    const [ students20, setStudents20 ] = useState([])\r\n    const [ students30, setStudents30 ] = useState([])\r\n\r\n    const [ currentClass, setCurrentClass ] = useState([])\r\n    const [ created, setCreated ] = useState(\"\")\r\n    const [ author, setAuthor ] = useState(\"\")\r\n    const [ noteAvatar, setNoteAvatar ] = useState(\"\")\r\n    const [ classForSelect, setClassForSelect ] = useState([])\r\n\r\n    const [ errors, setErrors ] = useState([])\r\n    const [ open, setOpen ] = useState(false)\r\n    const [ viewOpen, setViewOpen ] = useState(false)\r\n    const [ uiLoading, setUiLoading ] = useState(true)\r\n\r\n    const [ teacherClasses, setTeacherClasses ] = useState([]);\r\n    const [ notes, setNotes ] = useState([]);\r\n    const [ selectedDate, setSelectedDate ] = useState(new Date(Date.now() - 604800000))\r\n\r\n    const [ selected, setSelected ] = useState([])\r\n    const [ rt, setRt ] = useState(\"\")\r\n    const [ commentBody, setCommentBody ] = useState(\"\")\r\n    const [ commentRt, setCommentRt ] = useState(\"\")\r\n    const [ comments, setComments ] = useState([])\r\n\r\n    const { avatar } = useContext(UserContext)\r\n\r\n    //get class data (if stored in teacherClasses collection?)\r\n    useEffect(() => {\r\n        \r\n        if(user){\r\n            return db.collection(\"users\").doc(user.uid).collection('teacherClasses').get()\r\n            .then((snapshot) => {\r\n                const teacherData = []\r\n                snapshot.forEach((doc) => {\r\n                    teacherData.push({...doc.data(), id: doc.id})\r\n                })\r\n                setTeacherClasses(teacherData)\r\n                setUiLoading(false)\r\n            })\r\n            .catch((error) => {\r\n                console.log(\"No classes error: \", error);\r\n            })\r\n        }\r\n\r\n    }, [user]);\r\n\r\n    useEffect(() => {\r\n        //console.log('selected ids are '+selected.map((student) => student.value))\r\n        //setSelectedStudents(selected.map(a => a.value))\r\n        setStudents10(selected.map(a=>a.value).slice(0,10))\r\n        setStudents20(selected.map(a=>a.value).slice(10,20))\r\n        setStudents30(selected.map(a=>a.value).slice(20,30))\r\n\r\n    },[selected])\r\n\r\n    dayjs.extend(relativeTime);\r\n    const { classes } = props;\r\n\r\n    const handleSelectOpen = (teacherClass) => {\r\n        setTitle(teacherClass.name)\r\n        setCurrentClass(teacherClass.students)\r\n        setOpen(true)\r\n    };\r\n\r\n    const handleSubmit = async (event) => {\r\n        event.preventDefault();\r\n        let notes10 = []\r\n        let notes20 = []\r\n        let notes30 = []\r\n\r\n        let recentDate = selectedDate\r\n        console.log('students in array groups lengths '+students10.length+students20.length+students30.length)\r\n\r\n        if(students10.length>0){\r\n            let first10 = await\r\n            db.collectionGroup('notes')\r\n            .where('uid','in', students10)\r\n            .where(\"timestamp\", \">=\", recentDate)\r\n            .orderBy(\"timestamp\",\"desc\")\r\n            .get()\r\n\r\n            first10.forEach((doc) => {\r\n                notes10.push({ ...doc.data(), id: doc.id })\r\n            })\r\n        }\r\n\r\n        if(students20.length>0){\r\n            let second10 = await\r\n            db.collectionGroup('notes')\r\n            .where('uid','in', students20)\r\n            .where(\"timestamp\", \">=\", recentDate)\r\n            .orderBy(\"timestamp\",\"desc\")\r\n            .get()\r\n\r\n            second10.forEach((doc) => {\r\n            notes20.push({ ...doc.data(), id: doc.id })\r\n            })\r\n        }\r\n\r\n        if(students30.length>0){\r\n            let third10 = await\r\n            db.collectionGroup('notes')\r\n            .where('uid','in', students30)\r\n            .where(\"timestamp\", \">=\", recentDate)\r\n            .orderBy(\"timestamp\",\"desc\")\r\n            .get()\r\n\r\n            third10.forEach((doc) => {\r\n            notes30.push({ ...doc.data(), id: doc.id })\r\n            })\r\n        }\r\n\r\n        setNotes(notes10.concat(notes20,notes30))\r\n        setOpen(false)\r\n        //console.log(\"notes10 is \"+notes10.length+\" notes20 is \"+notes20.length+\" and notes30 is \"+notes30.length)\r\n\r\n    };\r\n\r\n    const handleSubmitComment = (event) => {\r\n        event.preventDefault();\r\n\r\n        if (commentBody) {\r\n            const newComment = {\r\n                body: commentBody,\r\n                createdAt: new Date().toISOString(),\r\n                timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n                uid: user.uid,\r\n                author: user.displayName,\r\n                avatar: avatar,\r\n                rt: commentRt,\r\n                studentId: studentId,\r\n                noteId: noteId\r\n            }\r\n            db.collection('users').doc(studentId).collection('notes').doc(noteId).collection('comments').add(newComment)\r\n            .then((doc)=>{\r\n                console.log(\"New comment added to db\")\r\n                setViewOpen(false);\r\n            })\r\n            .then(() => {\r\n                let noteRef = db.collection('users').doc(studentId).collection('notes').doc(noteId)\r\n                noteRef.update({ commentNum: firebase.firestore.FieldValue.increment(1)})\r\n            })\r\n            .catch((error) => {\r\n                setErrors(error)\r\n                setOpen(true)\r\n                console.error(error);\r\n                console.log('errors in handleSubmitComment of classes '+errors)\r\n                alert('Something went wrong' );\r\n            });\r\n        } else {\r\n            alert(\"No empty comments\")\r\n        }\r\n\r\n    };\r\n\r\n    const handleViewOpen = (note) => {\r\n        setTitle(note.title)\r\n        setNoteId(note.id)\r\n        setStudentId(note.uid)\r\n        setCreated(note.createdAt)\r\n        setAuthor(note.author)\r\n        setRt(note.rt)\r\n        setNoteAvatar(note.avatar)\r\n        setViewOpen(true)\r\n\t}\r\n\r\n    useEffect(() => {\r\n        \r\n        if(noteId){\r\n            return db.collectionGroup(\"comments\")\r\n            .where(\"noteId\",\"==\",noteId)\r\n            .get()\r\n            .then((querySnapshot) => {\r\n                const commentsData = [];\r\n                querySnapshot.forEach((doc) => {\r\n                    commentsData.push({ ...doc.data(), id: doc.id })\r\n                    console.log(\"comment doc id is \"+doc.id)\r\n                })\r\n                setComments(commentsData)\r\n            })\r\n            .catch((error) => {\r\n                alert('something wrong while looking for comments')\r\n                console.log(error)\r\n            })\r\n        }\r\n    }, [noteId]);\r\n\r\n    useEffect(() => {\r\n        const toLabelValue = currentClass.map((student) => {\r\n            return {\r\n                label: student.firstName,\r\n                value: student.uid\r\n            }\r\n        })\r\n        setClassForSelect(toLabelValue)\r\n    },[currentClass])\r\n\r\n    const handleViewClose = () => setViewOpen(false);\r\n\r\n    const handleClose = (event) => setOpen(false);\r\n\r\n    if (uiLoading === true) {\r\n        return (\r\n            <main sx={{flexGrow:1, p:3}} >\r\n                <Toolbar />\r\n                {uiLoading && <CircularProgress size={150} sx={{\r\n                    position: 'fixed',\r\n                    zIndex: '1000',\r\n                    height: '31px',\r\n                    width: '31px',\r\n                    left: '50%',\r\n                    top: '35%'\r\n                }} />}\r\n            </main>\r\n        );\r\n    } else {\r\n        return (\r\n            <main sx={{flexGrow:1, p: 3}}>\r\n                <Toolbar />\r\n\r\n                <Button variant=\"contained\" component={Link} to='/addclass'>Add new class</Button>\r\n\r\n                <Dialog fullScreen open={open} onClose={handleClose} TransitionComponent={Transition}>\r\n                    <AppBar sx={{position: 'relative'}} >\r\n                        <Toolbar>\r\n                            <IconButton edge=\"start\" color=\"inherit\" onClick={handleClose} aria-label=\"close\">\r\n                                <CloseIcon />\r\n                            </IconButton>\r\n                            <Typography variant=\"h6\" sx={{ml:2, flex:1}} >\r\n                                Select students to view recent notes\r\n                            </Typography>\r\n                            <Button\r\n                                autoFocus\r\n                                color=\"inherit\"\r\n                                onClick={handleSubmit}\r\n                                sx={{\r\n                                    display: 'block',\r\n                                    color: 'white',\r\n                                    textAlign: 'center',\r\n                                    position: 'absolute',\r\n                                    top: 14,\r\n                                    right: 10\r\n                                }}\r\n                            >\r\n                                Submit\r\n                            </Button>\r\n                        </Toolbar>\r\n                    </AppBar>\r\n\r\n                    <Box component=\"form\"\r\n                    sx={{\r\n                        width: '98%',\r\n                        marginLeft: 2,\r\n                        marginTop: 3\r\n                    }} noValidate>\r\n                        <Grid container spacing={2}>\r\n                            <Grid item xs={12} key='date'>\r\n                                <Typography>\r\n                                    How far back do you want to see notes?\r\n                                </Typography>\r\n                                <Datepicker \r\n                                    selected={selectedDate} \r\n                                    onChange={date => setSelectedDate(date)}\r\n                                    maxDate={new Date()}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={12} key='title'>\r\n                                {title}\r\n                            </Grid>\r\n\r\n                            <Grid>\r\n                                <div>\r\n                                    <h1>Select Students</h1>\r\n                                    <MultiSelect\r\n                                    options={classForSelect}\r\n                                    value={selected}\r\n                                    onChange={setSelected}\r\n                                    labelledBy={\"Select\"}\r\n                                    />\r\n                                </div>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Box>\r\n                </Dialog>\r\n\r\n                <Grid container spacing={8} justify='center'>\r\n                    {teacherClasses.map((teacherClass) => (\r\n                        <Grid item xs={6} sm={4} key = {teacherClass.name}>\r\n                            <Card sx={{minWidth:220}} variant=\"outlined\">\r\n                                <CardContent>\r\n                                    <Typography variant=\"h6\" component=\"h3\">\r\n                                        {teacherClass.name}\r\n                                    </Typography>\r\n                                </CardContent>\r\n                                <CardActions>\r\n                                    <Link   to={{\r\n                                        pathname: \"/addClass\",\r\n                                        state: { classId: teacherClass.id}\r\n                                    }}>Edit</Link>\r\n                                    <Button size=\"small\" color=\"primary\" onClick={() => handleSelectOpen( teacherClass )}>\r\n                                        {' '}\r\n                                        Select Students{' '}\r\n                                    </Button>\r\n                                </CardActions>\r\n                            </Card>\r\n                        </Grid>\r\n                    ))}\r\n                </Grid>\r\n\r\n                { notes && notes.length > 0 && \r\n                    <ListCards notes={notes} handleEditOpen={()=>alert('permission denied')} handleViewOpen={handleViewOpen} deleteNoteHandler={()=>alert('permission denied')} canEdit={false}/>\r\n                }\r\n  \r\n                <ViewNotes handleViewClose={handleViewClose} viewOpen={viewOpen} title={title} author={author} created={created} avatar={noteAvatar} comments={comments} rt={rt} classes={classes} handleSubmitComment={handleSubmitComment} setCommentBody={setCommentBody} setCommentRt={setCommentRt} commentRt={commentRt}/>\r\n\r\n            </main>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TeacherClasses;\r\n","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\account.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\editortest2.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\listcards.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\viewnotes.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\temp.js",["165","166"],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\badges.js",["167","168","169","170"],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\App2.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\layout.js",["171"],"import { useContext, useState, useEffect } from 'react'\r\nimport { useHistory, useLocation } from \"react-router-dom\";\r\nimport { UserContext } from \"../userContext\"\r\n\r\nimport Box from '@material-ui/core/Box'\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Button from '@material-ui/core/Button'\r\nimport List from '@material-ui/core/List';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport AccountBoxIcon from '@material-ui/icons/AccountBox';\r\nimport NotesIcon from '@material-ui/icons/Notes';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\r\nimport ShieldIcon from '@material-ui/icons/Shield';\r\nimport { EmojiPeople } from '@material-ui/icons';\r\n\r\nconst drawerWidth = 240;\r\n\r\n const menuItemsUser = [\r\n    { \r\n        text: 'My Plans', \r\n        icon: <NotesIcon color=\"secondary\" />, \r\n        path: '/' \r\n    },\r\n    { \r\n        text: 'Account', \r\n        icon: <AccountBoxIcon color=\"secondary\" />, \r\n        path: '/account' \r\n    },\r\n    {\r\n        text: 'MyBadges',\r\n        icon: <ShieldIcon color=\"primary\" />,\r\n        path: '/myBadges'\r\n    }\r\n  ];\r\n\r\n  const menuItemsAdmin = [\r\n    { \r\n        text: 'My Classes', \r\n        icon: <NotesIcon color=\"secondary\" />, \r\n        path: '/classes' \r\n    },\r\n    { \r\n        text: 'Account', \r\n        icon: <AccountBoxIcon color=\"secondary\" />, \r\n        path: '/account' \r\n    },\r\n    {\r\n        text: 'Students',\r\n        icon: <EmojiPeople color=\"secondary\" />,\r\n        path: '/students'\r\n    }\r\n  ]\r\n\r\nfunction Layout({ children }) {\r\n\r\n    const { currentUser, isAdmin, loading, avatar, logout } = useContext(UserContext);\r\n    const location = useLocation()\r\n    const [ menuItems, setMenuItems ] = useState([])\r\n\r\n\r\n\r\n    let history = useHistory();\r\n\r\n    if(currentUser){\r\n        console.log('In Layout user is Admin is '+isAdmin)\r\n    } else {\r\n        history.push('/login')\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(isAdmin){\r\n            setMenuItems(menuItemsAdmin)\r\n        } else {\r\n            setMenuItems(menuItemsUser)\r\n        }\r\n    },[isAdmin])\r\n\r\n\tconst logoutHandler = async(event) => {\r\n        console.log('Logout Clicked');\r\n        await logout().then(() => {\r\n            history.push('/login')\r\n          }).catch((error) => {\r\n            console.log('Error signing out')\r\n          });;\r\n\t};\r\n\r\n    if(currentUser) {\r\n        return (\r\n            <Box sx={{display:'flex'}}>\r\n                <CssBaseline />\r\n                <AppBar position=\"fixed\" sx={{zIndex: (theme) => theme.zIndex.drawer + 1}} >\r\n                    <Toolbar>\r\n                        <Typography variant=\"h6\" noWrap>\r\n                            NotesApp\r\n                        </Typography>\r\n                        <Box sx={{flexGrow:1}}/>\r\n                        <Button color='inherit' onClick={() => history.push('/badges')} >Badges</Button>\r\n                    </Toolbar>\r\n                </AppBar>\r\n                <Drawer\r\n                    variant=\"permanent\"\r\n                    sx={{\r\n                        width: drawerWidth,\r\n                        flexShrink: 0,\r\n                        '& .MuiDrawer-paper': { boxSizing: 'border-box', width: drawerWidth },\r\n                        }}\r\n                >\r\n                    <Toolbar />\r\n                    <Divider />\r\n                    <center>\r\n                        <Avatar alt=\"User Avatar\" src={avatar} sx={{height: 110, width: 100, flexShrink: 0, flexGrow: 0, marginTop: 2}} />\r\n                        <p>\r\n                            {' '}\r\n                            {currentUser && currentUser.displayName ? currentUser.displayName : \"Welcome!\"}\r\n                        </p>\r\n                    </center>\r\n                    <Divider />\r\n                    <List>\r\n                    {menuItems.map((item) => (\r\n                        <ListItem \r\n                        button \r\n                        key={item.text} \r\n                        onClick={() => history.push(item.path)}\r\n                        className={location.pathname === item.path ? null : null}\r\n                        >\r\n                        <ListItemIcon>{item.icon}</ListItemIcon>\r\n                        <ListItemText primary={item.text} />\r\n                        </ListItem>\r\n                    ))}\r\n                        <ListItem\r\n                        button\r\n                        key='logout'\r\n                        onClick={() => logoutHandler()}\r\n                        >\r\n                            <ListItemIcon>\r\n                                {' '}\r\n                                <ExitToAppIcon />{' '}\r\n                                <ListItemText primary='Logout' />\r\n                            </ListItemIcon>\r\n                        </ListItem>\r\n                    </List>\r\n                </Drawer>\r\n                <Box sx={{m:2}} >{children}</Box>\r\n            </Box>    \r\n        )\r\n    } else {\r\n        return <div></div>\r\n    }\r\n\r\n}\r\n\r\nexport default Layout;","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\badgedetails.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\feedback.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\students.js",["172"],"import React, { useState, useContext, useEffect } from 'react';\r\nimport firebase, { db } from '../firebase';\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nimport { UserContext } from '../userContext';\r\nimport PropTypes from 'prop-types';\r\nimport { alpha } from '@material-ui/core/styles';\r\nimport Box from '@material-ui/core/Box';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport FilterListIcon from '@material-ui/icons/FilterList';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport { AssignmentInd, CloudDownload, Edit } from '@material-ui/icons';\r\nimport { AppBar, TextField, Dialog, FormControl, InputLabel, Select, MenuItem, Button, Grid } from '@material-ui/core';\r\n\r\nfunction Students(props) {\r\n\r\n    const { loading, currentUser } = useContext(UserContext)\r\n\r\n    const [ uiLoading ] = useState(loading)\r\n    const [ rows, setRows ] = useState([])\r\n    const [ classes, setClasses ] = useState([])\r\n    const [ selectedClass, setSelectedClass ] = useState()\r\n    const [ selectedStudents, setSelectedStudents ] = useState([])\r\n\r\n    const history = useHistory()\r\n\r\n    useEffect(() => {   \r\n        return db.collection(\"adminDocs\").doc(\"studentList\")\r\n        .onSnapshot((doc) => {\r\n            setRows(doc.data().students)\r\n        })\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        return db.collection(\"users\").doc(currentUser.uid).collection(\"teacherClasses\").get()\r\n        .then((snapshot) => {\r\n            const classData = []\r\n            snapshot.forEach((doc) => {\r\n                classData.push({...doc.data(), id: doc.id})\r\n            })\r\n            setClasses(classData)\r\n            console.log(\"class data is \"+classData)\r\n        })\r\n    },[currentUser.uid])\r\n\r\n    const handleChange = (event) => {\r\n        setSelectedClass(event.target.value)\r\n        console.log('selected class id is '+event.target.value)\r\n    }\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault()\r\n        if(selectedClass.length){\r\n          console.log('planning to submit to class id '+selectedClass)\r\n          console.log('and submit selected student ids are '+selectedStudents)\r\n          db.collection('users').doc(currentUser.uid).collection('teacherClasses')\r\n          .doc(selectedClass).update({\r\n              students: firebase.firestore.FieldValue.arrayUnion(...selectedStudents)\r\n          })\r\n          .then(() => {\r\n            selectedStudents.map(student => (\r\n              db.collection('users').doc(student.uid).update({\r\n                classes: firebase.firestore.FieldValue.arrayUnion(...selectedClass)\r\n              })\r\n            ))\r\n          })\r\n          .then(() => {\r\n            history.push('/classes')\r\n          })\r\n        } else {\r\n          alert(\"Make sure to select a class\")\r\n        }\r\n    }\r\n\r\n    if (uiLoading === true) {\r\n        return (\r\n            <main sx={{flexGrow:1, p:3}} >\r\n                <Toolbar />\r\n                {uiLoading && <CircularProgress size={150} sx={{\r\n                    position: 'fixed',\r\n                    zIndex: '1000',\r\n                    height: '31px',\r\n                    width: '31px',\r\n                    left: '50%',\r\n                    top: '35%'\r\n                }} />}\r\n            </main>\r\n        );\r\n    } else {\r\n        return (\r\n            <>\r\n                <Toolbar />\r\n                <Grid container spacing={2} alignItems='center'>\r\n                    <Grid item xs={2} key='classSelect'>\r\n                        <FormControl sx={{ m: 1, minWidth: 120 }}>\r\n                            <InputLabel id=\"demo-simple-select-label\">Classes</InputLabel>\r\n                            <Select\r\n                                labelId=\"select class\"\r\n                                id=\"select-class\"\r\n                                value={selectedClass}\r\n                                label=\"Classes\"\r\n                                onChange={handleChange}\r\n                                defaultValue=\"\"\r\n                            >\r\n                                {classes.map((eachclass) => (\r\n                                    <MenuItem key={eachclass.name} value={eachclass.id}>{eachclass.name}</MenuItem>\r\n                                ))\r\n                                }\r\n                            </Select>\r\n                        </FormControl>\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                        <Typography variant='h6' align='center'>Select students below to add to class</Typography>\r\n                    </Grid>\r\n                    <Grid item xs={4}>\r\n                        <Button variant='contained' onClick={handleSubmit}>Submit</Button>\r\n                    </Grid>\r\n                </Grid>\r\n    \r\n                <Box sx={{flexGrow:1, p:3}} >\r\n                    <EnhancedTable rows={rows} setSelectedStudents={(selecteds) => setSelectedStudents(selecteds)} />\r\n                </Box>\r\n    \r\n            </>\r\n        )\r\n    }\r\n}\r\nexport default Students;\r\n\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n  if (b[orderBy] < a[orderBy]) {\r\n    return -1;\r\n  }\r\n  if (b[orderBy] > a[orderBy]) {\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n  return order === 'desc'\r\n    ? (a, b) => descendingComparator(a, b, orderBy)\r\n    : (a, b) => -descendingComparator(a, b, orderBy);\r\n}\r\n\r\n// This method is created for cross-browser compatibility, if you don't\r\n// need to support IE11, you can use Array.prototype.sort() directly\r\nfunction stableSort(array, comparator) {\r\n  const stabilizedThis = array.map((el, index) => [el, index]);\r\n  stabilizedThis.sort((a, b) => {\r\n    const order = comparator(a[0], b[0]);\r\n    if (order !== 0) return order;\r\n    return a[1] - b[1];\r\n  });\r\n  return stabilizedThis.map((el) => el[0]);\r\n}\r\n\r\nconst headCells = [\r\n  {\r\n    id: 'firstName',\r\n    numeric: false,\r\n    disablePadding: true,\r\n    label: 'Student Name',\r\n  },\r\n  {\r\n    id: 'year',\r\n    numeric: true,\r\n    disablePadding: false,\r\n    label: 'Graduation Year',\r\n  },\r\n  {\r\n    id: 'uid',\r\n    numeric: false,\r\n    disablePadding: false,\r\n    label: 'uid',\r\n  },\r\n];\r\n\r\nfunction EnhancedTableHead(props) {\r\n  const { onSelectAllClick, order, orderBy, numSelected, rowCount, onRequestSort } =\r\n    props;\r\n  const createSortHandler = (property) => (event) => {\r\n    onRequestSort(event, property);\r\n  };\r\n\r\n  return (\r\n    <TableHead>\r\n      <TableRow>\r\n        <TableCell padding=\"checkbox\">\r\n          <Checkbox\r\n            color=\"primary\"\r\n            indeterminate={numSelected > 0 && numSelected < rowCount}\r\n            checked={rowCount > 0 && numSelected === rowCount}\r\n            onChange={onSelectAllClick}\r\n            inputProps={{\r\n              'aria-label': 'select all desserts',\r\n            }}\r\n          />\r\n        </TableCell>\r\n        {headCells.map((headCell) => (\r\n          <TableCell\r\n            key={headCell.id}\r\n            align={headCell.numeric ? 'right' : 'left'}\r\n            padding={headCell.disablePadding ? 'none' : 'normal'}\r\n            sortDirection={orderBy === headCell.id ? order : false}\r\n            sx={{fontWeight:\"bold\"}}\r\n          >\r\n            <TableSortLabel\r\n              active={orderBy === headCell.id}\r\n              direction={orderBy === headCell.id ? order : 'asc'}\r\n              onClick={createSortHandler(headCell.id)}\r\n            >\r\n              {headCell.label}\r\n            </TableSortLabel>\r\n          </TableCell>\r\n        ))}\r\n      </TableRow>\r\n    </TableHead>\r\n  );\r\n}\r\n\r\nEnhancedTableHead.propTypes = {\r\n  numSelected: PropTypes.number.isRequired,\r\n  onRequestSort: PropTypes.func.isRequired,\r\n  onSelectAllClick: PropTypes.func.isRequired,\r\n  order: PropTypes.oneOf(['asc', 'desc']).isRequired,\r\n  orderBy: PropTypes.string.isRequired,\r\n  rowCount: PropTypes.number.isRequired,\r\n};\r\n\r\nconst EnhancedTableToolbar = (props) => {\r\n  const { numSelected, selected, handleClickOpen } = props;\r\n\r\n  // <IconButton component={Link} to={`/students/${selected[0].uid}`} >\r\n  // <IconButton component={Link} to={{pathname: `/students/${selected[0].uid}`, state: {something: `${selected[0].uid}`} }} >\r\n  // <IconButton component={Link} onClick={handleStudentSelect} to={{pathname: '/myBadges', state: {selectedStudentId: `${selected[0].uid}`, selectedStudentName: `${selected[0].firstName}`} }} >\r\n\r\n  return (\r\n    <Toolbar\r\n      sx={{\r\n        pl: { sm: 2 },\r\n        pr: { xs: 1, sm: 1 },\r\n        ...(numSelected > 0 && {\r\n          bgcolor: (theme) =>\r\n            alpha(theme.palette.primary.main, theme.palette.action.activatedOpacity),\r\n        }),\r\n      }}\r\n    >\r\n      {numSelected > 0 ? (\r\n        <Typography\r\n          sx={{ flex: '1 1 100%' }}\r\n          color=\"inherit\"\r\n          variant=\"subtitle1\"\r\n          component=\"div\"\r\n        >\r\n          {numSelected} selected\r\n        </Typography>\r\n      ) : (\r\n        <Typography\r\n          sx={{ flex: '1 1 100%' }}\r\n          variant=\"h6\"\r\n          id=\"tableTitle\"\r\n          component=\"div\"\r\n        >\r\n          Students\r\n        </Typography>\r\n      )}\r\n\r\n      {numSelected === 1 ? (\r\n        <>\r\n        <Tooltip title=\"Edit Record\">\r\n          <IconButton\r\n            onClick={handleClickOpen}\r\n          >\r\n            <Edit />\r\n          </IconButton>\r\n        </Tooltip>\r\n        <Tooltip title=\"View Details\">\r\n          <IconButton component={Link} to={`/students/${selected[0].uid}/myBadges`} >\r\n            <AssignmentInd />\r\n          </IconButton>\r\n        </Tooltip>\r\n        </>\r\n      ) :\r\n      numSelected > 0 ? (\r\n        <Tooltip title=\"Download records\">\r\n          <IconButton>\r\n            <CloudDownload />\r\n          </IconButton>\r\n        </Tooltip>\r\n      ) : (\r\n        <Tooltip title=\"Filter list\">\r\n          <IconButton>\r\n            <FilterListIcon />\r\n          </IconButton>\r\n        </Tooltip>\r\n      )}\r\n    </Toolbar>\r\n  );\r\n};\r\n\r\nEnhancedTableToolbar.propTypes = {\r\n  numSelected: PropTypes.number.isRequired,\r\n};\r\n\r\nexport function EnhancedTable(props) {\r\n  const [order, setOrder] = useState('asc');\r\n  const [orderBy, setOrderBy] = useState('year');\r\n  const [selected, setSelected] = useState([]);\r\n  const [page, setPage] = useState(0);\r\n  const [dense, setDense] = useState(false);\r\n  const [rowsPerPage, setRowsPerPage] = useState(5);\r\n  const [clickOpen, setClickOpen] = useState(false)\r\n  const [gradYear, setGradYear] = useState(2000)\r\n  const [studentName, setStudentName] = useState(\"\")\r\n  const [error, setError] = useState([])\r\n  const [studentId, setStudentId] = useState('')\r\n\r\n  const rows = props.rows\r\n\r\n  const handleClickOpen = () => {\r\n    setClickOpen(true)\r\n    setStudentName(selected[0].firstName)\r\n    setGradYear(selected[0].year)\r\n    setStudentId(selected[0].uid)\r\n  }\r\n\r\n  const handleClose = () => {\r\n    setClickOpen(false)\r\n    setSelected([])\r\n  }\r\n\r\n  const handleRequestSort = (event, property) => {\r\n    const isAsc = orderBy === property && order === 'asc';\r\n    setOrder(isAsc ? 'desc' : 'asc');\r\n    setOrderBy(property);\r\n  };\r\n\r\n  const handleSelectAllClick = (event) => {\r\n    if (event.target.checked) {\r\n      //const newSelecteds = rows.map((n) => n.uid);\r\n      const newSelecteds = rows\r\n      setSelected(newSelecteds);\r\n      props.setSelectedStudents(newSelecteds)\r\n      return;\r\n    }\r\n    setSelected([]);\r\n    props.setSelectedStudents([])\r\n  };\r\n\r\n  const handleClick = (event, name) => {\r\n    //const selectedIndex = selected.indexOf(name);\r\n    const selectedIndex = selected.findIndex(function(selection){\r\n      return selection.uid === name.uid\r\n    })\r\n    let newSelected = [];\r\n\r\n    if (selectedIndex === -1) {\r\n      newSelected = newSelected.concat(selected, name);\r\n    } else if (selectedIndex === 0) {\r\n      newSelected = newSelected.concat(selected.slice(1));\r\n    } else if (selectedIndex === selected.length - 1) {\r\n      newSelected = newSelected.concat(selected.slice(0, -1));\r\n    } else if (selectedIndex > 0) {\r\n      newSelected = newSelected.concat(\r\n        selected.slice(0, selectedIndex),\r\n        selected.slice(selectedIndex + 1),\r\n      );\r\n    }\r\n\r\n    setSelected(newSelected);\r\n    props.setSelectedStudents(newSelected)\r\n\r\n  };\r\n\r\n  const handleYearChange = (event) => setGradYear(event.target.value)\r\n\r\n  const handleNameChange = (event) => setStudentName(event.target.value)\r\n\r\n  const handleSubmit = () => {\r\n    console.log(\"Halelujiah\")\r\n    const studentUpdate = {\r\n      firstName:studentName,\r\n      uid:studentId,\r\n      year:gradYear\r\n    }\r\n    db.collection(\"adminDocs\").doc(\"studentList\").update({\r\n      students: firebase.firestore.FieldValue.arrayRemove({\r\n        firstName:selected[0].firstName,\r\n        uid:selected[0].uid,\r\n        year:selected[0].year\r\n      })\r\n    })\r\n    .then(() => {\r\n      db.collection(\"adminDocs\").doc(\"studentList\").update({\r\n        students: firebase.firestore.FieldValue.arrayUnion(studentUpdate)\r\n      })\r\n    })\r\n    .then(() => db.collection(\"users\").doc(studentUpdate.uid).update(studentUpdate))\r\n    setClickOpen(false)\r\n    setSelected([])\r\n  }\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  const handleChangeDense = (event) => {\r\n    setDense(event.target.checked);\r\n  };\r\n\r\n  //const isSelected = (name) => selected.indexOf(name) !== -1;\r\n  const isSelected = (name) => {\r\n    const index = selected.findIndex(function (selection) {\r\n      return selection.uid===name.uid\r\n    })\r\n    return index !== -1\r\n  }\r\n\r\n  // Avoid a layout jump when reaching the last page with empty rows.\r\n  const emptyRows =\r\n    page > 0 ? Math.max(0, (1 + page) * rowsPerPage - rows.length) : 0;\r\n\r\n  return (\r\n    <Box sx={{ width: '100%' }}>\r\n      <Paper sx={{ width: '100%', mb: 2 }}>\r\n        <EnhancedTableToolbar numSelected={selected.length} selected={selected} handleClickOpen={handleClickOpen} />\r\n        <TableContainer>\r\n          <Table\r\n            sx={{ minWidth: 750 }}\r\n            aria-labelledby=\"tableTitle\"\r\n            size={dense ? 'small' : 'medium'}\r\n          >\r\n            <EnhancedTableHead\r\n              numSelected={selected.length}\r\n              order={order}\r\n              orderBy={orderBy}\r\n              onSelectAllClick={handleSelectAllClick}\r\n              onRequestSort={handleRequestSort}\r\n              rowCount={rows.length}\r\n            />\r\n            <TableBody>\r\n              {/* if you don't need to support IE11, you can replace the `stableSort` call with:\r\n                 rows.slice().sort(getComparator(order, orderBy)) */}\r\n              {stableSort(rows, getComparator(order, orderBy))\r\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                .map((row, index) => {\r\n                  const isItemSelected = isSelected(row);\r\n                  const labelId = `enhanced-table-checkbox-${index}`;\r\n\r\n                  return (\r\n                    <TableRow\r\n                      hover\r\n                      onClick={(event) => handleClick(event, row)}\r\n                      role=\"checkbox\"\r\n                      aria-checked={isItemSelected}\r\n                      tabIndex={-1}\r\n                      key={row.uid}\r\n                      selected={isItemSelected}\r\n                    >\r\n                      <TableCell padding=\"checkbox\">\r\n                        <Checkbox\r\n                          color=\"primary\"\r\n                          checked={isItemSelected}\r\n                          inputProps={{\r\n                            'aria-labelledby': labelId,\r\n                          }}\r\n                        />\r\n                      </TableCell>\r\n                      <TableCell\r\n                        component=\"th\"\r\n                        id={labelId}\r\n                        scope=\"row\"\r\n                        padding=\"none\"\r\n                      >\r\n                        {row.firstName}\r\n                      </TableCell>\r\n                      <TableCell align=\"right\">{row.year}</TableCell>\r\n                      <TableCell align=\"left\">{row.uid}</TableCell>\r\n                    </TableRow>\r\n                  );\r\n                })}\r\n              {emptyRows > 0 && (\r\n                <TableRow\r\n                  style={{\r\n                    height: (dense ? 33 : 53) * emptyRows,\r\n                  }}\r\n                >\r\n                  <TableCell colSpan={6} />\r\n                </TableRow>\r\n              )}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n        <TablePagination\r\n          rowsPerPageOptions={[5, 10, 25]}\r\n          component=\"div\"\r\n          count={rows.length}\r\n          rowsPerPage={rowsPerPage}\r\n          page={page}\r\n          onPageChange={handleChangePage}\r\n          onRowsPerPageChange={handleChangeRowsPerPage}\r\n        />\r\n      </Paper>\r\n      <FormControlLabel\r\n        control={<Switch checked={dense} onChange={handleChangeDense} />}\r\n        label=\"Dense padding\"\r\n      />\r\n\r\n      <Dialog fullWidth={true} maxWidth='md' open={clickOpen} onClose={handleClose}>\r\n          <AppBar sx={{position: 'relative'}} >\r\n              <Toolbar>\r\n                  <IconButton edge=\"start\" color=\"inherit\" onClick={handleClose} aria-label=\"close\">\r\n                      <CloseIcon />\r\n                  </IconButton>\r\n                  <Typography variant=\"h6\" sx={{ml:2, flex:1}} >\r\n                      Edit Record\r\n                  </Typography>\r\n                  <Button\r\n                      autoFocus\r\n                      color=\"inherit\"\r\n                      onClick={handleSubmit}\r\n                      sx={{\r\n                          display: 'block',\r\n                          color: 'white',\r\n                          textAlign: 'center',\r\n                          position: 'absolute',\r\n                          top: 14,\r\n                          right: 10\r\n                      }}\r\n                  >\r\n                      Save\r\n                  </Button>\r\n              </Toolbar>\r\n          </AppBar>\r\n\r\n          <Box sx={{\r\n              width: '88%',\r\n              marginLeft: 2,\r\n              marginTop: 3,\r\n              marginBottom: 3\r\n          }} noValidate>\r\n              <Grid container spacing={2}>\r\n                  <Grid item xs={6} key='studentname'>\r\n                      <TextField\r\n                          variant=\"outlined\"\r\n                          required\r\n                          fullWidth\r\n                          id=\"studentName\"\r\n                          label=\"Student Name\"\r\n                          name=\"studentname\"\r\n                          autoComplete=\"studentName\"\r\n                          helperText={error.title}\r\n                          value={studentName}\r\n                          error={error.title ? true : false}\r\n                          onChange={handleNameChange}\r\n                      />\r\n                  </Grid>\r\n                  <Grid item xs={6} key='gradyear'>\r\n                      <TextField\r\n                          variant=\"outlined\"\r\n                          required\r\n                          fullWidth\r\n                          id=\"gradYear\"\r\n                          label=\"Grad Year\"\r\n                          name=\"gradyear\"\r\n                          autoComplete=\"gradYear\"\r\n                          helperText={error.title}\r\n                          value={gradYear}\r\n                          error={error.title ? true : false}\r\n                          onChange={handleYearChange}\r\n                      />\r\n                  </Grid>\r\n\r\n              </Grid>\r\n          </Box>\r\n      </Dialog>\r\n    </Box>\r\n  );\r\n}\r\n","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\studentdetails.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\badgeform.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\badgeform2.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\mybadges.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\mybadgedetails.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\mybadgeslist.js",[],["173","174"],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\progressbar.js",["175"],"import { useState } from \"react\";\r\nimport { Box } from '@material-ui/core'\r\n\r\nexport default function Progress({done}) {\r\n\r\n    console.log('done is '+done)\r\n\r\n/* \tconst [style, setStyle] = useState({\r\n        opacity: 0,\r\n        width:0\r\n    }); */\r\n\t\r\n/* \tsetTimeout(() => {\r\n\t\tconst newStyle = {\r\n\t\t\topacity: 1,\r\n\t\t\twidth: `${done}%`\r\n\t\t}\r\n\t\t\r\n\t\tsetStyle(newStyle);\r\n\t}, 200); */\r\n\t\r\n\treturn (\r\n\t\t<Box sx={{\r\n            backgroundColor: '#d8d8d8',\r\n            borderRadius: 20,\r\n            position: 'relative',\r\n            my: 1,\r\n            mx: 0,\r\n            height: 20,\r\n            width: 200,\r\n        }}>\r\n\t\t\t<Box sx={{\r\n            \tbackground: 'linear-gradient(to left, #F2709C, #FF9472)',\r\n                boxShadow: '0 3px 3px -5px #F2709C, 0 2px 5px #F2709C',\r\n                borderRadius: 20,\r\n                color: '#fff',\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n                opacity: 1,\r\n                width: `${done}%`,\r\n                justifyContent: 'center',\r\n                height: '100%',\r\n                transition: '1s ease 0.3s',\r\n            }}\r\n            >\r\n\t\t\t\t{done}%\r\n\t\t\t</Box>\r\n\t\t</Box>\r\n\t)\r\n}\r\n","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\listcards2.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\studentcontext.js",[],["176","177"],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\addclass.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\pages\\logout.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\pages\\mybadgesredirect.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\feedbackview.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\addclass3.js",[],{"ruleId":"178","replacedBy":"179"},{"ruleId":"180","replacedBy":"181"},{"ruleId":"182","severity":1,"message":"183","line":28,"column":8,"nodeType":"184","messageId":"185","endLine":28,"endColumn":22},{"ruleId":"182","severity":1,"message":"186","line":103,"column":13,"nodeType":"184","messageId":"185","endLine":103,"endColumn":17},{"ruleId":"182","severity":1,"message":"187","line":119,"column":13,"nodeType":"184","messageId":"185","endLine":119,"endColumn":19},{"ruleId":"182","severity":1,"message":"188","line":9,"column":8,"nodeType":"184","messageId":"185","endLine":9,"endColumn":19},{"ruleId":"189","severity":1,"message":"190","line":64,"column":38,"nodeType":"191","messageId":"192","endLine":64,"endColumn":40},{"ruleId":"193","severity":1,"message":"194","line":75,"column":39,"nodeType":"195","messageId":"196","endLine":75,"endColumn":41},{"ruleId":"193","severity":1,"message":"194","line":92,"column":31,"nodeType":"195","messageId":"196","endLine":92,"endColumn":33},{"ruleId":"182","severity":1,"message":"197","line":64,"column":35,"nodeType":"184","messageId":"185","endLine":64,"endColumn":42},{"ruleId":"182","severity":1,"message":"198","line":333,"column":17,"nodeType":"184","messageId":"185","endLine":333,"endColumn":25},{"ruleId":"178","replacedBy":"199"},{"ruleId":"180","replacedBy":"200"},{"ruleId":"182","severity":1,"message":"201","line":1,"column":10,"nodeType":"184","messageId":"185","endLine":1,"endColumn":18},{"ruleId":"178","replacedBy":"202"},{"ruleId":"180","replacedBy":"203"},"no-native-reassign",["204"],"no-negated-in-lhs",["205"],"no-unused-vars","'MuiDialogTitle' is defined but never used.","Identifier","unusedVar","'body' is assigned a value but never used.","'errors' is assigned a value but never used.","'CardActions' is defined but never used.","array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'loading' is assigned a value but never used.","'setError' is assigned a value but never used.",["204"],["205"],"'useState' is defined but never used.",["204"],["205"],"no-global-assign","no-unsafe-negation"]