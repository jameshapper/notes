[{"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\index.js":"1","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\App.js":"2","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\reportWebVitals.js":"3","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\pages\\login.js":"4","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\pages\\home.js":"5","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\firebase.js":"6","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\note.js":"7","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\chips.js":"8","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\select.js":"9","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\UserContext.js":"10","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\contextChecker.js":"11","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\userContext.js":"12","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\classes.js":"13","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\account.js":"14","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\editortest2.js":"15","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\listcards.js":"16","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\viewnotes.js":"17","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\temp.js":"18","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\badges.js":"19","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\App2.js":"20","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\layout.js":"21","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\badgedetails.js":"22","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\feedback.js":"23","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\students.js":"24","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\studentdetails.js":"25","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\badgeform.js":"26","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\badgeform2.js":"27","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\mybadges.js":"28","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\mybadgedetails.js":"29","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\mybadgeslist.js":"30","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\progressbar.js":"31","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\listcards2.js":"32","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\studentcontext.js":"33","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\addclass.js":"34","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\pages\\logout.js":"35","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\pages\\mybadgesredirect.js":"36","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\feedbackview.js":"37","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\addclass3.js":"38","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\listcards3.js":"39","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\listgoals.js":"40","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\listtable.js":"41","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\listtable2.js":"42","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\dashboard4.js":"43","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\newnote4.js":"44","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\listgoals4.js":"45","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\listcards4.js":"46","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\viewnotes4.js":"47"},{"size":550,"mtime":1628505507925,"results":"48","hashOfConfig":"49"},{"size":845,"mtime":1625471999625,"results":"50","hashOfConfig":"49"},{"size":362,"mtime":499162500000,"results":"51","hashOfConfig":"49"},{"size":2755,"mtime":1628743114710,"results":"52","hashOfConfig":"49"},{"size":5802,"mtime":1625471999635,"results":"53","hashOfConfig":"49"},{"size":678,"mtime":1618708206546,"results":"54","hashOfConfig":"49"},{"size":30622,"mtime":1640423600792,"results":"55","hashOfConfig":"49"},{"size":275,"mtime":1615975291635,"results":"56","hashOfConfig":"49"},{"size":2846,"mtime":1640181191512,"results":"57","hashOfConfig":"49"},{"size":806,"mtime":1612357304510,"results":"58","hashOfConfig":"49"},{"size":311,"mtime":1612357855261,"results":"59","hashOfConfig":"49"},{"size":1916,"mtime":1628505507930,"results":"60","hashOfConfig":"49"},{"size":21193,"mtime":1640924874998,"results":"61","hashOfConfig":"49"},{"size":3565,"mtime":1629289533897,"results":"62","hashOfConfig":"49"},{"size":1170,"mtime":1624461495102,"results":"63","hashOfConfig":"49"},{"size":2931,"mtime":1625471999630,"results":"64","hashOfConfig":"49"},{"size":4157,"mtime":1625471999633,"results":"65","hashOfConfig":"49"},{"size":15562,"mtime":1620273505241,"results":"66","hashOfConfig":"67"},{"size":8592,"mtime":1635645815196,"results":"68","hashOfConfig":"49"},{"size":4808,"mtime":1640745247327,"results":"69","hashOfConfig":"49"},{"size":5415,"mtime":1639721099416,"results":"70","hashOfConfig":"49"},{"size":11804,"mtime":1635645815192,"results":"71","hashOfConfig":"49"},{"size":18464,"mtime":1640404716411,"results":"72","hashOfConfig":"49"},{"size":22374,"mtime":1641102611677,"results":"73","hashOfConfig":"49"},{"size":2468,"mtime":1628505507923,"results":"74","hashOfConfig":"49"},{"size":8215,"mtime":1626665072572,"results":"75","hashOfConfig":"49"},{"size":14013,"mtime":1635645815194,"results":"76","hashOfConfig":"49"},{"size":4887,"mtime":1640100371283,"results":"77","hashOfConfig":"49"},{"size":9814,"mtime":1635645815200,"results":"78","hashOfConfig":"49"},{"size":1056,"mtime":1627037479146,"results":"79","hashOfConfig":"49"},{"size":1181,"mtime":1640056410143,"results":"80","hashOfConfig":"49"},{"size":6406,"mtime":1639478699942,"results":"81","hashOfConfig":"49"},{"size":372,"mtime":1627662620896,"results":"82","hashOfConfig":"49"},{"size":2375,"mtime":1630087686935,"results":"83","hashOfConfig":"49"},{"size":141,"mtime":1628505507929,"results":"84","hashOfConfig":"49"},{"size":467,"mtime":1628505507929,"results":"85","hashOfConfig":"49"},{"size":6403,"mtime":1635645815200,"results":"86","hashOfConfig":"49"},{"size":5677,"mtime":1635645815192,"results":"87","hashOfConfig":"49"},{"size":7782,"mtime":1640053168180,"results":"88","hashOfConfig":"49"},{"size":6487,"mtime":1640052853145,"results":"89","hashOfConfig":"49"},{"size":9470,"mtime":1639819093149,"results":"90","hashOfConfig":"49"},{"size":16180,"mtime":1640922320020,"results":"91","hashOfConfig":"49"},{"size":15248,"mtime":1641127451768,"results":"92","hashOfConfig":"49"},{"size":21233,"mtime":1641127734537,"results":"93","hashOfConfig":"49"},{"size":6814,"mtime":1640751153231,"results":"94","hashOfConfig":"49"},{"size":8531,"mtime":1640750807648,"results":"95","hashOfConfig":"49"},{"size":6338,"mtime":1640828684676,"results":"96","hashOfConfig":"49"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},"ys4om1",{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"113"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"118"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"x9ovq5",{"filePath":"137","messages":"138","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"99"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"99"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"163"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"99"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"171"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"113"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":35,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189","usedDeprecatedRules":"190"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"99"},"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\index.js",[],["203","204"],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\App.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\reportWebVitals.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\pages\\login.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\pages\\home.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\firebase.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\note.js",["205"],"import React, { useState, useEffect, useContext } from 'react';\r\nimport firebase, { db } from '../firebase';\r\nimport \"react-quill/dist/quill.snow.css\";\r\nimport \"./styles.css\";\r\nimport Editor from \"./editortest2\"\r\nimport MultipleSelect from './select';\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport { UserContext } from '../userContext';\r\nimport ListCards from './listcards3'\r\nimport ListGoals from './listgoals'\r\nimport ViewNotes from './viewnotes'\r\nimport MyBadges from './mybadges'\r\n\r\nimport dayjs from 'dayjs';\r\nimport relativeTime from 'dayjs/plugin/relativeTime';\r\nimport DatePicker from '@mui/lab/DatePicker';\r\n\r\nimport Box from '@material-ui/core/Box'\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport Select from '@material-ui/core/Select'\r\nimport MenuItem from '@material-ui/core/MenuItem'\r\nimport { InputLabel, TableContainer, TableBody, TableCell, Table, TableHead, TableRow, Paper } from '@material-ui/core';\r\nimport Divider from '@material-ui/core/Divider'\r\n\r\nconst Transition = React.forwardRef(function Transition(props, ref) {\r\n\treturn <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nfunction Note(props) {\r\n\r\n    const [ title, setTitle ] = useState('')\r\n    const [ body, setBody ] = useState('')\r\n    const [ noteId, setNoteId ] = useState('')\r\n    const [ studentId, setStudentId ] = useState('')\r\n\r\n    const [ newActivities, setNewActivities ] = useState([])\r\n    const [ newEvidence, setNewEvidence ] = useState([])\r\n    const [ summaryEvidence, setSummaryEvidence ] = useState([])\r\n\r\n    const [ created, setCreated ] = useState(\"\")\r\n    const [ author, setAuthor ] = useState(\"\")\r\n\r\n    const [ errors, setErrors ] = useState([])\r\n    const [ open, setOpen ] = useState(false)\r\n    const [ uiLoading, setUiLoading ] = useState(true)\r\n    const [ buttonType, setButtonType ] = useState('')\r\n    const [ viewOpen, setViewOpen ] = useState(false)\r\n\r\n    const [ notes, setNotes ] = useState([]);\r\n    const [ pausedItems, setPausedItems ] = useState([]);\r\n    const [ termGoals, setTermGoals ] = useState([]);\r\n    const [ currentPlans, setCurrentPlans ] = useState([]);\r\n\r\n\r\n    const [ rt, setRt ] = useState(\"\")\r\n    const [ commentRt, setCommentRt ] = useState(\"\")\r\n    const [ comments, setComments ] = useState([])\r\n    const [ commentBody, setCommentBody ] = useState(\"\")\r\n\r\n    const [ status, setStatus ] = useState(\"Active\")\r\n    const [ noteType, setNoteType ] = useState(\"ActionItem\")\r\n    const [ targetDate, setTargetDate ] = useState(new Date(Date.now() - 604800000))\r\n    const [ actionType, setActionType ] = useState(\"ProblemSolving\")\r\n    const [ plannedHrs, setPlannedHrs ] = useState(\"2\")\r\n    const [ hrs, setHrs ] = useState(\"0\")\r\n    const [ crits, setCrits ] = useState(\"0\")\r\n\r\n\r\n    const { currentUser, avatar } = useContext(UserContext)\r\n\r\n    const dataList = [\r\n        {label:'Arduino_101',value: 'Arduino_101'},\r\n        {label:'IGCSE_Bio', value: 'IGCSE_Bio'},\r\n        {label:'IGCSE_Phys', value: 'IGCSE_Phys'}\r\n      ];\r\n\r\n    const evidenceList = [\r\n        {label:'Notebook-Notes',value: 'Notebook-Notes'},\r\n        {label:'Video', value: 'Video'},\r\n        {label:'Report', value: 'Report'},\r\n        {label:'TestQuiz', value: 'Test/Quiz'}\r\n    ];\r\n\r\n    dayjs.extend(relativeTime);\r\n\r\n    const { classes } = props;\r\n\r\n    useEffect(() => {\r\n        // const fetchData = async () => {\r\n        //     const db = firebase.firestore();\r\n        //     const data = await db.collection(\"notes\").get();\r\n        //     setNotes(data.docs.map(doc => ({ ...doc.data(), id: doc.id })));\r\n        //     setUiLoading(false);\r\n        // };\r\n        // fetchData()\r\n\r\n        let recentDate = new Date('2021-04-29')\r\n        \r\n        console.log(\"user from firebase auth\", currentUser)\r\n        return db.collectionGroup(\"notes\").where(\"uid\", \"==\", currentUser.uid)\r\n        .where(\"timestamp\", \">=\", recentDate)\r\n        .where(\"status\", \"==\",\"Active\")\r\n        .where(\"noteType\",\"==\",\"ActionItem\")\r\n        .orderBy(\"timestamp\",\"desc\")\r\n        .onSnapshot(snapshot => {\r\n            const notesData = [];\r\n            snapshot.forEach(doc => notesData.push({ ...doc.data(), id: doc.id }));\r\n            setNotes(notesData)\r\n            setUiLoading(false)\r\n        })\r\n    }, [currentUser]);\r\n\r\n    useEffect(() => {\r\n\r\n        let recentDate = new Date('2021-04-29')\r\n        \r\n        return db.collectionGroup(\"notes\").where(\"uid\", \"==\", currentUser.uid)\r\n        .where(\"timestamp\", \">=\", recentDate)\r\n        .where(\"status\", \"==\",\"Paused\")\r\n        .orderBy(\"timestamp\",\"desc\")\r\n        .onSnapshot(snapshot => {\r\n            const notesData = [];\r\n            snapshot.forEach(doc => notesData.push({ ...doc.data(), id: doc.id }));\r\n            setPausedItems(notesData)\r\n            setUiLoading(false)\r\n        })\r\n    }, [currentUser]);\r\n\r\n    useEffect(() => {\r\n\r\n        let recentDate = new Date('2021-04-29')\r\n        \r\n        return db.collectionGroup(\"notes\").where(\"uid\", \"==\", currentUser.uid)\r\n        .where(\"timestamp\", \">=\", recentDate)\r\n        .where(\"status\", \"==\",\"Active\")\r\n        .where(\"noteType\",\"==\",\"TermGoals\")\r\n        .orderBy(\"timestamp\",\"desc\")\r\n        .onSnapshot(snapshot => {\r\n            const notesData = [];\r\n            snapshot.forEach(doc => notesData.push({ ...doc.data(), id: doc.id }));\r\n            setTermGoals(notesData)\r\n            setUiLoading(false)\r\n        })\r\n    }, [currentUser]);\r\n\r\n    useEffect(() => {\r\n\r\n        let recentDate = new Date('2021-04-29')\r\n        \r\n        return db.collectionGroup(\"notes\").where(\"uid\", \"==\", currentUser.uid)\r\n        .where(\"timestamp\", \">=\", recentDate)\r\n        .where(\"status\", \"==\",\"Active\")\r\n        .where(\"noteType\",\"==\",\"Plan\")\r\n        .orderBy(\"timestamp\",\"desc\")\r\n        .onSnapshot(snapshot => {\r\n            const notesData = [];\r\n            snapshot.forEach(doc => notesData.push({ ...doc.data(), id: doc.id }));\r\n            setCurrentPlans(notesData)\r\n            setUiLoading(false)\r\n        })\r\n    }, [currentUser]);\r\n\r\n    useEffect(() => {\r\n        console.log('status changed to '+status)\r\n    }, [status])\r\n\r\n    useEffect(() => {\r\n        db.collection('users').doc(currentUser.uid).get()\r\n        .then(doc => {\r\n            setSummaryEvidence(doc.data().evidence)\r\n            //console.log(\"summary evidence max crits for first item is \"+doc.data().evidence[0].sumCritsMax)\r\n        })\r\n    }, [currentUser])\r\n\r\n    const handleTitleChange = (event) => setTitle(event.target.value);\r\n    //const handleBodyChange = (event) => setBody(event.target.value);\r\n\r\n\tconst deleteNoteHandler = (data) => {\r\n        const document = db.collection('users').doc(currentUser.uid).collection('notes').doc(data.note.id)\r\n        document.delete()\r\n        .then(() => alert(\"Document deleted\"))\r\n        .then(() => setNoteId(''))\r\n        .catch((error) => console.error(\"Error deleting document\", error));\r\n    }\r\n\r\n\tconst handleEditOpen = (note) => {\r\n        setTitle(note.title)\r\n        setBody(note.body)\r\n        setNoteId(note.id)\r\n        setRt(note.rt)\r\n        setButtonType('Edit')\r\n        setOpen(true)\r\n        setStatus(note.status)\r\n        setNewActivities(note.activities)\r\n        setNewEvidence(note.evidence)\r\n        setPlannedHrs(note.plannedHrs)\r\n        setHrs(note.completedHrs)\r\n        setActionType(note.actionType)\r\n        setNoteType(note.noteType)\r\n\t}\r\n\r\n    const handleViewOpen = (note) => {\r\n        setTitle(note.title)\r\n        setBody(note.body)\r\n        setNoteId(note.id)\r\n        setStudentId(currentUser.uid)\r\n        setRt(note.rt)\r\n        setViewOpen(true)\r\n        setCreated(note.createdAt)\r\n        setAuthor(note.author)\r\n        setStatus(note.status)\r\n        setNewActivities(note.activities)\r\n        setNewEvidence(note.evidence)\r\n        setPlannedHrs(note.plannedHrs)\r\n        setHrs(note.hrs)\r\n        setActionType(note.actionType)\r\n        setNoteType(note.noteType)\r\n\t}\r\n\r\n    useEffect(() => {\r\n        \r\n        if(noteId && studentId){\r\n            return db.collectionGroup(\"comments\")\r\n            .where(\"studentId\", \"==\", studentId)\r\n            .where(\"noteId\",\"==\",noteId)\r\n            .get()\r\n            .then((querySnapshot) => {\r\n                const commentsData = [];\r\n                querySnapshot.forEach((doc) => {\r\n                    commentsData.push({ ...doc.data(), id: doc.id })\r\n                    console.log(\"comment doc id is \"+doc.id)\r\n                })\r\n                setComments(commentsData)\r\n            })\r\n            .catch((error) => {\r\n                alert('something wrong while looking for comments')\r\n                console.log(error)\r\n            })\r\n        }\r\n\r\n    }, [noteId, studentId]);\r\n\r\n\r\n    const handleClickOpen = () => {\r\n        setTitle('')\r\n        setBody('')\r\n        setNoteId('')\r\n        setButtonType('')\r\n        setRt('')\r\n        setOpen(true)\r\n    };\r\n\r\n    const handleViewClose = () => setViewOpen(false);\r\n    const handleClose = (event) => setOpen(false);\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n\r\n        if (buttonType === 'Edit') {\r\n            let document = db.collection('users').doc(currentUser.uid).collection('notes').doc(noteId);\r\n            document.update( {title : title, body : body, activities: newActivities, rt:rt, status:status, evidence:newEvidence, plannedHrs:plannedHrs, completedHrs:hrs, actionType:actionType, noteType:noteType} )\r\n            .then((doc)=>{\r\n                console.log(\"Note edited\")\r\n                setOpen(false);\r\n                setRt(\"\")\r\n                setTitle(\"\")\r\n                setBody(\"\")\r\n            })\r\n        } else {\r\n            const newNote = {\r\n                title: title,\r\n                body: body,\r\n                createdAt: new Date().toISOString(),\r\n                timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n                uid: currentUser.uid,\r\n                activities: newActivities,\r\n                author: currentUser.displayName,\r\n                avatar: avatar,\r\n                rt: rt,\r\n                status: status,\r\n                evidence:newEvidence,\r\n                plannedHrs:plannedHrs,\r\n                completedHrs:hrs,\r\n                actionType:actionType,\r\n                noteType:noteType\r\n            }\r\n            db.collection('users').doc(currentUser.uid).collection('notes').add(newNote)\r\n            .then((doc)=>{\r\n                console.log(\"New note added to db\")\r\n                setOpen(false);\r\n                setRt(\"\")\r\n                setTitle(\"\")\r\n                setBody(\"\")\r\n            })\r\n            .catch((error) => {\r\n                setErrors(error)\r\n                setOpen(true)\r\n                console.error(error);\r\n                alert('Something went wrong' );\r\n            });\r\n        }\r\n    };\r\n\r\n    const handleSubmitComment = (event) => {\r\n        event.preventDefault();\r\n\r\n        if (false) {\r\n\r\n        } else {\r\n            const newComment = {\r\n                body: commentBody,\r\n                createdAt: new Date().toISOString(),\r\n                timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n                uid: currentUser.uid,\r\n                author: currentUser.displayName,\r\n                avatar: avatar,\r\n                rt: commentRt,\r\n                studentId: studentId,\r\n                noteId: noteId\r\n            }\r\n            db.collection('users').doc(studentId).collection('notes').doc(noteId).collection('comments').add(newComment)\r\n            .then((doc)=>{\r\n                console.log(\"New comment added to db\")\r\n                setViewOpen(false);\r\n                setCommentRt(\"\")\r\n            })\r\n            .catch((error) => {\r\n                setErrors(error)\r\n                setOpen(true)\r\n                console.error(error);\r\n                alert('Something went wrong' );\r\n            });\r\n        }\r\n    };\r\n\r\n    if (uiLoading === true) {\r\n        return (\r\n            <main sx={{flexGrow:1, p:3}}>\r\n                <Toolbar />\r\n                {uiLoading && <CircularProgress size={150} sx={{\r\n                    position: 'fixed',\r\n                    zIndex: '1000',\r\n                    height: '31px',\r\n                    width: '31px',\r\n                    left: '50%',\r\n                    top: '35%'\r\n                }} />}\r\n            </main>\r\n        );\r\n    } else {\r\n        return (\r\n            <main sx={{p:3}} >\r\n                <Toolbar />\r\n\r\n                <Box sx={{\r\n                        width: '98%',\r\n                        marginLeft: 2,\r\n                        marginTop: 3\r\n                    }} noValidate>\r\n                    <Grid container spacing={2}>\r\n                        <Grid item xs={11}>\r\n                            <Typography variant='h6' sx={{mb:0}}>Student Dashboard</Typography>\r\n                        </Grid>\r\n                        \r\n                        <Grid item xs={1} key=\"addNoteIcon\">\r\n                            <IconButton\r\n                                sx={{\r\n                                }}\r\n                                color=\"primary\"\r\n                                aria-label=\"Add Note\"\r\n                                onClick={handleClickOpen}\r\n                                size='small'\r\n                            >\r\n                                <AddCircleIcon sx={{ fontSize: 30 }} />\r\n                            </IconButton>\r\n                        </Grid>\r\n                    </Grid>\r\n                </Box>\r\n                \r\n                <Dialog fullScreen open={open} onClose={handleClose} TransitionComponent={Transition}>\r\n                    <AppBar sx={{position: 'relative'}} >\r\n                        <Toolbar>\r\n                            <IconButton edge=\"start\" color=\"inherit\" onClick={handleClose} aria-label=\"close\">\r\n                                <CloseIcon />\r\n                            </IconButton>\r\n                            <Typography variant=\"h6\" sx={{ml:2, flex:1}} >\r\n                                {buttonType === 'Edit' ? 'Edit Note' : 'Create a new Note '}\r\n                            </Typography>\r\n                            <Button\r\n                                autoFocus\r\n                                color=\"inherit\"\r\n                                onClick={handleSubmit}\r\n                                sx={{\r\n                                    display: 'block',\r\n                                    color: 'white',\r\n                                    textAlign: 'center',\r\n                                    position: 'absolute',\r\n                                    top: 14,\r\n                                    right: 10\r\n                                }}\r\n                            >\r\n                                {buttonType === 'Edit' ? 'Save' : 'Submit'}\r\n                            </Button>\r\n                        </Toolbar>\r\n                    </AppBar>\r\n\r\n                    <Box sx={{\r\n                        width: '98%',\r\n                        marginLeft: 2,\r\n                        marginTop: 3\r\n                    }} noValidate>\r\n                        <Grid container spacing={2}>\r\n                            \r\n                            <Grid item xs={4} key=\"status\">\r\n                                <InputLabel id=\"status\">Status</InputLabel>\r\n                                <Select\r\n                                    labelId=\"status\"\r\n                                    id=\"status\"\r\n                                    value={status}\r\n                                    label=\"Status\"\r\n                                    onChange={(e) => setStatus(e.target.value)}\r\n                                >\r\n                                    <MenuItem value={\"Active\"}>Active</MenuItem>\r\n                                    <MenuItem value={\"Archived\"}>Archived</MenuItem>\r\n                                    <MenuItem value={\"Paused\"}>Paused</MenuItem>\r\n                                </Select>\r\n                            </Grid>\r\n                            <Grid item xs={4} key=\"noteType\">\r\n                                <InputLabel id=\"noteType label\">Note Type</InputLabel>\r\n                                <Select\r\n                                    labelId=\"noteType label\"\r\n                                    id=\"noteType\"\r\n                                    value={noteType}\r\n                                    label=\"Note Type\"\r\n                                    onChange={(e) => setNoteType(e.target.value)}\r\n                                >\r\n                                    <MenuItem value={\"ActionItem\"}>Action Item</MenuItem>\r\n                                    <MenuItem value={\"Assessment\"}>Assessment</MenuItem>\r\n                                    <MenuItem value={\"Plan\"}>Current Plans</MenuItem>\r\n                                    <MenuItem value={\"TermGoals\"}>Term Goals</MenuItem>\r\n                                </Select>\r\n                            </Grid>\r\n                            <Grid item xs={4} sm={4} key='date' sx={{mt:1}}>\r\n                                <InputLabel id=\"date label\">Target Date</InputLabel>\r\n                                <DatePicker\r\n                                    value={targetDate}\r\n                                    onChange={(newValue) => {\r\n                                    setTargetDate(newValue);\r\n                                    }}\r\n                                    renderInput={(params) => <TextField {...params} />}\r\n                                />\r\n                            </Grid>\r\n                            <Grid item xs={4} key='planned-hrs'>\r\n                                <Box sx={{display: noteType === 'ActionItem' || noteType === 'Plan' ? 'block' : 'none'}}>\r\n\r\n                                    <TextField\r\n                                        variant=\"outlined\"\r\n                                        required\r\n                                        id=\"plannedHrs\"\r\n                                        label=\"Planned Hours\"\r\n                                        name=\"plannedHrs\"\r\n                                        autoComplete=\"plannedHrs\"\r\n                                        value={plannedHrs}\r\n                                        onChange={(e) => setPlannedHrs(e.target.value)}\r\n                                    />\r\n                                </Box>\r\n                            </Grid>\r\n                            <Grid item xs={4} key='hrs'>\r\n                                <Box sx={{display: noteType === 'ActionItem' || noteType === 'Plan' ? 'block' : 'none'}}>\r\n                                    <TextField\r\n                                        variant=\"outlined\"\r\n                                        required\r\n                                        id=\"hrs\"\r\n                                        label=\"Completed Hours\"\r\n                                        name=\"hrs\"\r\n                                        autoComplete=\"hrs\"\r\n                                        value={hrs}\r\n                                        onChange={(e) => setHrs(e.target.value)}\r\n                                    />\r\n                                </Box>\r\n                            </Grid>\r\n                            <Grid item xs={4} key='crits'>\r\n                                <Box sx={{display: noteType === 'TermGoals' || noteType === 'Assessment' ? 'block' : 'none'}}>\r\n                                    <TextField\r\n                                        variant=\"outlined\"\r\n                                        required\r\n                                        id=\"crits\"\r\n                                        label=\"crits Target\"\r\n                                        name=\"crits\"\r\n                                        autoComplete=\"crits\"\r\n                                        value={crits}\r\n                                        onChange={(e) => setCrits(e.target.value)}\r\n                                    />\r\n                                </Box>\r\n                            </Grid>\r\n                            <Grid item xs={4} key=\"actionType\">\r\n                                <Box sx={{display: noteType === 'ActionItem' ? 'block' : 'none'}}>\r\n                                    <InputLabel id=\"action-type-label\">Action Type</InputLabel>\r\n                                    <Select\r\n                                        labelId=\"action-type-label\"\r\n                                        id=\"action-type\"\r\n                                        value={actionType}\r\n                                        label=\"Action Type\"\r\n                                        onChange={(e) => setActionType(e.target.value)}\r\n                                    >\r\n                                        <MenuItem value={\"ProblemSolving\"}>Problem Solving</MenuItem>\r\n                                        <MenuItem value={\"ResearchStudy\"}>Research Study</MenuItem>\r\n                                        <MenuItem value={\"HandsOn\"}>Hands On</MenuItem>\r\n                                        <MenuItem value={\"DataAnalysis\"}>Data Analysis</MenuItem>\r\n                                        <MenuItem value={\"Communicating\"}>Communicating</MenuItem>\r\n                                    </Select>\r\n                                </Box>\r\n                            </Grid>\r\n\r\n                            <Grid item xs={4} key=\"chipsBadges\">\r\n                                <MultipleSelect itemsTitle=\"Badges\" allOptions={dataList} getList={activities => setNewActivities(activities)} currentActivities={newActivities}></MultipleSelect>\r\n                            </Grid>\r\n\r\n                            <Grid item xs={4} key=\"chipsEvidence\">\r\n                                <Box sx={{display: noteType === 'ActionItem' || noteType === 'Assessment' ? 'block' : 'none'}}>\r\n                                    <MultipleSelect itemsTitle=\"Evidence\" allOptions={evidenceList} getList={evidence => setNewEvidence(evidence)} currentActivities={newEvidence}></MultipleSelect>\r\n                                </Box>\r\n                            </Grid>\r\n\r\n                            <Grid item xs={12} key='title'>\r\n                                <TextField\r\n                                    variant=\"outlined\"\r\n                                    required\r\n                                    fullWidth\r\n                                    id=\"noteTitle\"\r\n                                    label=\"Note Title\"\r\n                                    name=\"title\"\r\n                                    autoComplete=\"noteTitle\"\r\n                                    helperText={errors.title}\r\n                                    value={title}\r\n                                    error={errors.title ? true : false}\r\n                                    onChange={handleTitleChange}\r\n                                />\r\n                            </Grid>\r\n\r\n                            <Grid item xs={12} sm={6}>\r\n                                <Editor initText={rt} setRt={rt => setRt(rt)} setBody={body => setBody(body)}/>\r\n                            </Grid>\r\n\r\n                        </Grid>\r\n                    </Box>\r\n                </Dialog>\r\n\r\n                <Divider sx={{mt:1}}/>\r\n\r\n                <Box sx={{\r\n                    display: 'flex',\r\n                    flexDirection: { xs: 'column', md: 'row' },\r\n                    p:1\r\n                    }}>\r\n\r\n                    <Box sx={{mr:1}}>\r\n\r\n                        <Box sx={{\r\n                            bgcolor: '#eeeeee',\r\n                            boxShadow: 1,\r\n                            borderRadius: 1,\r\n                            p: 1,\r\n                            minWidth: 300,\r\n                            maxWidth: 500\r\n                            }}>\r\n                            <Typography variant='h6' sx={{mb:0}}>Active Items</Typography>\r\n                            <Divider sx={{mb:1}}/>\r\n                            <ListCards notes={notes} handleEditOpen={handleEditOpen} handleViewOpen={handleViewOpen} deleteNoteHandler={deleteNoteHandler} canEdit={true}/>\r\n                        </Box>\r\n\r\n                        <Divider sx={{mt:1}}/>\r\n\r\n                        <Box sx={{\r\n                            bgcolor: '#eeeeee',\r\n                            boxShadow: 1,\r\n                            borderRadius: 1,\r\n                            p: 1,\r\n                            minWidth: 300,\r\n                            maxWidth: 500\r\n                            }}>\r\n                            <Typography variant='h6' sx={{mb:0}}>Paused Items</Typography>\r\n                            <Divider sx={{mb:1}}/>\r\n                            <ListCards notes={pausedItems} handleEditOpen={handleEditOpen} handleViewOpen={handleViewOpen} deleteNoteHandler={deleteNoteHandler} canEdit={true}/>\r\n                        </Box>\r\n\r\n                        <Divider sx={{mt:1}}/>\r\n\r\n                        <Box sx={{\r\n                            bgcolor: '#eeeeee',\r\n                            boxShadow: 1,\r\n                            borderRadius: 1,\r\n                            p: 1,\r\n                            minWidth: 300,\r\n                            maxWidth: 500\r\n                            }}>\r\n\r\n                            <Typography variant=\"h6\" sx={{mb:0}}>Evidence and Feedback</Typography>\r\n\r\n                            <Box sx={{flexGrow:1}} >\r\n                                <>\r\n                                <TableContainer component={Paper} sx={{borderRadius:2, m:0, maxWidth:550}}>\r\n                                    <Table sx={{ minWidth: 450 }} aria-label=\"simple table\">\r\n                                        <TableHead>\r\n                                        <TableRow>\r\n                                            <TableCell align=\"left\" sx={{fontWeight:'bold',backgroundColor:(theme)=>theme.palette.secondary.main, color: (theme)=>theme.palette.getContrastText(theme.palette.secondary.main)}}>Date</TableCell>\r\n                                            <TableCell align=\"left\" sx={{fontWeight:'bold',backgroundColor:(theme)=>theme.palette.secondary.main, color: (theme)=>theme.palette.getContrastText(theme.palette.secondary.main)}}>Badge</TableCell>\r\n                                            <TableCell align=\"left\" sx={{fontWeight:'bold',backgroundColor:(theme)=>theme.palette.secondary.main, color: (theme)=>theme.palette.getContrastText(theme.palette.secondary.main)}}>Max Available</TableCell>\r\n                                            <TableCell align=\"left\" sx={{fontWeight:'bold',backgroundColor:(theme)=>theme.palette.secondary.main, color: (theme)=>theme.palette.getContrastText(theme.palette.secondary.main)}}>Crits Awarded</TableCell>\r\n                                        </TableRow>\r\n                                        </TableHead>\r\n                                        <TableBody>\r\n                                        {summaryEvidence && summaryEvidence.map(evidenceItem => (\r\n                                            <TableRow key={evidenceItem.feedbackId}>\r\n                                            <TableCell>\r\n                                                {evidenceItem.createdAt.slice(0,10)}\r\n                                            </TableCell>\r\n                                            <TableCell>\r\n                                                {evidenceItem.badgeName}\r\n                                            </TableCell>\r\n                                            <TableCell>\r\n                                                {evidenceItem.sumCritsMax}\r\n                                            </TableCell>\r\n                                            <TableCell>\r\n                                                {evidenceItem.sumCritsForAssessment}\r\n                                            </TableCell>\r\n                                            </TableRow>\r\n                                        ))\r\n                                        }\r\n                                        </TableBody>\r\n                                    </Table>\r\n                                </TableContainer>\r\n                                </>\r\n                            </Box>\r\n                        </Box>\r\n\r\n                    </Box>\r\n\r\n                    <Box>\r\n                        <Box sx={{\r\n                            bgcolor: '#eeeeee',\r\n                            boxShadow: 1,\r\n                            borderRadius: 1,\r\n                            p:1,\r\n                            minWidth: 300,\r\n                            maxWidth: 500\r\n                            }}>\r\n                            <Typography variant='h6' sx={{mb:0}}>Current Goals</Typography>\r\n                            <Divider sx={{mb:1}}/>\r\n                            <ListGoals notes={termGoals.concat(currentPlans)} handleEditOpen={handleEditOpen} handleViewOpen={handleViewOpen} deleteNoteHandler={deleteNoteHandler} canEdit={true}/>\r\n                        </Box>\r\n                        <Divider sx={{mt:1}}/>\r\n\r\n                        <Box sx={{\r\n                            bgcolor: '#eeeeee',\r\n                            boxShadow: 1,\r\n                            borderRadius: 1,\r\n                            p: 1,\r\n                            minWidth: 300,\r\n                            maxWidth: 500\r\n                            }}>\r\n                            <MyBadges toolbar='false'/>\r\n                        </Box>\r\n                    </Box>\r\n\r\n                </Box>\r\n\r\n                <ViewNotes handleViewClose={handleViewClose} viewOpen={viewOpen} title={title} author={author} created={created} avatar={avatar} comments={comments} rt={rt} classes={classes} handleSubmitComment={handleSubmitComment} setCommentBody={setCommentBody} setCommentRt={setCommentRt} commentRt={commentRt}/>\r\n\r\n            </main>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Note;\r\n",["206","207"],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\chips.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\select.js",[],["208","209"],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\UserContext.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\contextChecker.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\userContext.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\classes.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\account.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\editortest2.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\listcards.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\viewnotes.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\temp.js",["210","211"],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\badges.js",["212","213","214","215"],"import React, { useState, useContext, useEffect } from 'react';\r\nimport { db } from '../firebase';\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport Toolbar from '@material-ui/core/Toolbar'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Card from '@material-ui/core/Card'\r\nimport CardActions from '@material-ui/core/CardActions';\r\n\r\nimport Button from '@material-ui/core/Button'\r\nimport CardMedia from '@material-ui/core/CardMedia'\r\nimport CardContent from '@material-ui/core/CardContent'\r\nimport { Box, Typography, FormControl, InputLabel, Select, MenuItem, TextField, Tooltip } from '@material-ui/core';\r\nimport { UserContext } from '../userContext';\r\n\r\nfunction Badges(props) {\r\n\r\n    const { loading, isAdmin } = useContext(UserContext)\r\n\r\n    const [ badges, setBadges ] = useState([])\r\n    const [ classesList, setClassesList ] = useState([])\r\n    const [ selectedCourse, setSelectedCourse ] = useState(\"All Badges\")\r\n    const [ searchParam ] = useState([\"badgename\"]);\r\n    const [ supportedBadgeIds, setSupportedBadgeIds ] = useState([])\r\n    const [q, setQ] = useState(\"\");\r\n\r\n    const [ uiLoading, setUiLoading ] = useState(loading)\r\n\r\n/*     useEffect(() => {\r\n        \r\n        return db.collection(\"badges\")\r\n\r\n        .onSnapshot(snapshot => {\r\n            const badgesData = [];\r\n            snapshot.forEach(doc => badgesData.push({ ...doc.data(), id: doc.id }));\r\n            setBadges(badgesData)\r\n            setUiLoading(false)\r\n            console.log('badges are '+badgesData)\r\n        })\r\n    }, []); */\r\n\r\n    useEffect(() => {\r\n        setUiLoading(true)\r\n        return db.collection(\"adminDocs\").doc(\"badgeList\")\r\n\r\n        .onSnapshot(snapshot => {\r\n            setBadges(snapshot.data().badges)\r\n            setUiLoading(false)\r\n        })\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        setUiLoading(true)\r\n        return db.collection(\"adminDocs\").doc(\"classesList\").get()\r\n\r\n        .then(doc => {\r\n            setClassesList(doc.data().classes)\r\n            setUiLoading(false)\r\n        })\r\n    }, []);\r\n\r\n    function search(badges) {\r\n        return badges.filter((badge) => {\r\n            if (supportedBadgeIds.includes(badge.id)) {\r\n                return searchParam.some((newBadge) => {\r\n                    return (\r\n                        badge[newBadge]\r\n                            .toString()\r\n                            .toLowerCase()\r\n                            .indexOf(q.toLowerCase()) > -1\r\n                    );\r\n                });\r\n                //return true\r\n            } else if (selectedCourse == \"All Badges\") {\r\n                 return searchParam.some((newBadge) => {\r\n                    return (\r\n                        badge[newBadge]\r\n                            .toString()\r\n                            .toLowerCase()\r\n                            .indexOf(q.toLowerCase()) > -1\r\n                    );\r\n                });\r\n                //return true\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    const handleCourseFilter = (event) => {\r\n\r\n        if(event.target.value == \"All Badges\"){\r\n            setSelectedCourse(event.target.value)\r\n        } else {\r\n            setSelectedCourse(event.target.value)\r\n            const oneCourseObjectInArray = classesList.filter(course => {\r\n                return course.classId === event.target.value\r\n            })\r\n            console.log(event.target.value)\r\n            const supportedBadgeArray = oneCourseObjectInArray[0].supportedBadges\r\n            setSupportedBadgeIds(supportedBadgeArray.map(badgeObj => {\r\n                return badgeObj.value\r\n            }))\r\n            console.log(\"supported badge ids are \"+JSON.stringify(supportedBadgeIds))\r\n        }\r\n    }\r\n\r\n    if (uiLoading === true) {\r\n        return (\r\n            <main sx={{flexGrow:1, p:3}} >\r\n                <Toolbar />\r\n                {uiLoading && <CircularProgress size={150} sx={{\r\n                    position: 'fixed',\r\n                    zIndex: '1000',\r\n                    height: '31px',\r\n                    width: '31px',\r\n                    left: '50%',\r\n                    top: '35%'\r\n                }} />}\r\n            </main>\r\n        );\r\n    } else {\r\n        return (\r\n            <main sx={{flexGrow:1, p:3}}>\r\n            <Toolbar />\r\n            <Grid container pb={3}>\r\n                <Grid item xs={12} pb={2}>\r\n                {isAdmin &&\r\n                    <Button component={Link} to={'/badgeForm'} size='small' variant='contained' >Add Badge</Button>\r\n                }\r\n                </Grid>\r\n                <Grid item xs={4}>\r\n                    <FormControl fullWidth>\r\n                        <TextField\r\n                            id=\"search-course\"\r\n                            label=\"Badge search\"\r\n                            type=\"search\"\r\n                            value={q}\r\n                            onChange={(e) => setQ(e.target.value)}\r\n                        />\r\n                    </FormControl> \r\n                </Grid>\r\n                <Grid item xs={3}/>\r\n                <Grid item xs={3}>\r\n\r\n                    <FormControl fullWidth sx={{ m: 1, width: 300 }}>\r\n                    <InputLabel id=\"course-label\">Course</InputLabel>\r\n                    <Select\r\n                        labelId=\"course-select-label\"\r\n                        defaultValue=\"All Badges\"\r\n                        id=\"course-select\"\r\n                        value={selectedCourse ? selectedCourse : \"All Badges\"}\r\n                        label=\"Course\"\r\n                        onChange={handleCourseFilter}\r\n                    >\r\n                            <MenuItem key={\"all courses\"} value={\"All Badges\"}>All Badges</MenuItem>    \r\n\r\n                        {classesList && classesList.map((eachClass) => (\r\n                            <MenuItem key={eachClass.name} value={eachClass.classId}>{eachClass.name}</MenuItem>    \r\n                        ))}\r\n\r\n                    </Select>\r\n                    </FormControl>\r\n                    </Grid>\r\n            </Grid>\r\n\r\n            <Grid container spacing={3} justifyContent='space-around'>\r\n                    {badges && badges.length>0 && search(badges).map((badge) => (\r\n                        <Grid item xs={12} sm={6} md={4} lg={3} key = {badge.id} p={2}>\r\n                            <Card sx={{ maxWidth: 250, minWidth: 200, backgroundColor:'#eeeeee', pt:1 }}>\r\n                                <Tooltip title={badge.description.substring(0, 200)+\"...\"}>\r\n                                    <CardMedia\r\n                                        sx={{ height: 100, width: 'auto', m:'auto' }}\r\n                                        image={badge.imageUrl}\r\n                                        component='img'\r\n                                    />\r\n                                </Tooltip>\r\n                            <CardContent sx={{width: 'auto'}}>\r\n                                <Box sx={{display: 'flex', justifyContent:'center'}}>\r\n                                    <Typography fontWeight='bold' align='center' gutterBottom variant=\"subtitle1\" component={Link} to={`/badges/${badge.id}`} >\r\n                                    {badge.badgename}\r\n                                    </Typography>\r\n                                </Box>\r\n                                <Box sx={{display: 'flex', justifyContent:'center'}}>\r\n                                    <Box padding={1}>\r\n                                        <Typography variant='subtitle2'>Lvl: {badge.badgelevel}</Typography>\r\n                                    </Box>\r\n                                    <Box padding={1}>\r\n                                        <Typography variant='subtitle2'>Crits: {badge.totalcrits}</Typography>\r\n                                    </Box>\r\n                                </Box>\r\n                                <Box sx={{display: 'flex', justifyContent:'center'}}>\r\n                                    {badge.status === \"Dev\" ? 'Development' : 'Published'}\r\n                                </Box>\r\n                            </CardContent>\r\n                                {isAdmin && \r\n                                    <Button sx={{display: 'flex', justifyContent:'center'}} component={Link} to={`/badgeForm/${badge.id}`} size=\"small\">Edit</Button>\r\n                                }\r\n                            </Card>\r\n                        </Grid>\r\n                    ))}\r\n                </Grid>\r\n\r\n            </main>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Badges;","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\App2.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\layout.js",["216"],"import { useContext, useState, useEffect } from 'react'\r\nimport { useHistory, useLocation } from \"react-router-dom\";\r\nimport { UserContext } from \"../userContext\"\r\n\r\nimport Box from '@material-ui/core/Box'\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Button from '@material-ui/core/Button'\r\nimport List from '@material-ui/core/List';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport AccountBoxIcon from '@material-ui/icons/AccountBox';\r\nimport NotesIcon from '@material-ui/icons/Notes';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport ExitToAppIcon from '@material-ui/icons/ExitToApp';\r\nimport ShieldIcon from '@material-ui/icons/Shield';\r\nimport { EmojiPeople } from '@material-ui/icons';\r\n\r\nconst drawerWidth = 200;\r\n\r\n const menuItemsUser = [\r\n    { \r\n        text: 'My Plans', \r\n        icon: <NotesIcon color=\"secondary\" />, \r\n        path: '/' \r\n    },\r\n    { \r\n        text: 'Account', \r\n        icon: <AccountBoxIcon color=\"secondary\" />, \r\n        path: '/account' \r\n    },\r\n    {\r\n        text: 'MyBadges',\r\n        icon: <ShieldIcon color=\"primary\" />,\r\n        path: '/myBadges'\r\n    }\r\n  ];\r\n\r\n  const menuItemsAdmin = [\r\n    { \r\n        text: 'My Classes', \r\n        icon: <NotesIcon color=\"secondary\" />, \r\n        path: '/classes' \r\n    },\r\n    { \r\n        text: 'Account', \r\n        icon: <AccountBoxIcon color=\"secondary\" />, \r\n        path: '/account' \r\n    },\r\n    {\r\n        text: 'Students',\r\n        icon: <EmojiPeople color=\"secondary\" />,\r\n        path: '/students'\r\n    }\r\n  ]\r\n\r\nfunction Layout({ children }) {\r\n\r\n    const { currentUser, isAdmin, loading, avatar, logout } = useContext(UserContext);\r\n    const location = useLocation()\r\n    const [ menuItems, setMenuItems ] = useState([])\r\n\r\n\r\n\r\n    let history = useHistory();\r\n\r\n    if(currentUser){\r\n        console.log('In Layout user is Admin is '+isAdmin)\r\n    } else {\r\n        history.push('/login')\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(isAdmin){\r\n            setMenuItems(menuItemsAdmin)\r\n        } else {\r\n            setMenuItems(menuItemsUser)\r\n        }\r\n    },[isAdmin])\r\n\r\n\tconst logoutHandler = async(event) => {\r\n        console.log('Logout Clicked');\r\n        await logout().then(() => {\r\n            history.push('/login')\r\n          }).catch((error) => {\r\n            console.log('Error signing out')\r\n          });;\r\n\t};\r\n\r\n    if(currentUser) {\r\n        return (\r\n            <Box sx={{display:'flex'}}>\r\n                <CssBaseline />\r\n                <AppBar position=\"fixed\" sx={{zIndex: (theme) => theme.zIndex.drawer + 1}} >\r\n                    <Toolbar>\r\n                        <Typography variant=\"h6\" noWrap>\r\n                            NotesApp\r\n                        </Typography>\r\n                        <Box sx={{flexGrow:1}}/>\r\n                        <Button color='inherit' onClick={() => history.push('/badges')} >Badges</Button>\r\n                    </Toolbar>\r\n                </AppBar>\r\n                <Drawer\r\n                    variant=\"permanent\"\r\n                    sx={{\r\n                        width: drawerWidth,\r\n                        flexShrink: 0,\r\n                        '& .MuiDrawer-paper': { boxSizing: 'border-box', width: drawerWidth },\r\n                        }}\r\n                >\r\n                    <Toolbar />\r\n                    <Divider />\r\n                    <center>\r\n                        <Avatar alt=\"User Avatar\" src={avatar} sx={{height: 110, width: 100, flexShrink: 0, flexGrow: 0, marginTop: 2}} />\r\n                        <p>\r\n                            {' '}\r\n                            {currentUser && currentUser.displayName ? currentUser.displayName : \"Welcome!\"}\r\n                        </p>\r\n                    </center>\r\n                    <Divider />\r\n                    <List>\r\n                    {menuItems.map((item) => (\r\n                        <ListItem \r\n                        button \r\n                        key={item.text} \r\n                        onClick={() => history.push(item.path)}\r\n                        className={location.pathname === item.path ? null : null}\r\n                        >\r\n                        <ListItemIcon>{item.icon}</ListItemIcon>\r\n                        <ListItemText primary={item.text} />\r\n                        </ListItem>\r\n                    ))}\r\n                        <ListItem\r\n                        button\r\n                        key='logout'\r\n                        onClick={() => logoutHandler()}\r\n                        >\r\n                            <ListItemIcon>\r\n                                {' '}\r\n                                <ExitToAppIcon />{' '}\r\n                                <ListItemText primary='Logout' />\r\n                            </ListItemIcon>\r\n                        </ListItem>\r\n                    </List>\r\n                </Drawer>\r\n                <Box sx={{width:1, m:2}} >{children}</Box>\r\n            </Box>    \r\n        )\r\n    } else {\r\n        return <div></div>\r\n    }\r\n\r\n}\r\n\r\nexport default Layout;","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\badgedetails.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\feedback.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\students.js",["217"],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\studentdetails.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\badgeform.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\badgeform2.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\mybadges.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\mybadgedetails.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\mybadgeslist.js",[],["218","219"],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\progressbar.js",["220"],"import { useState } from \"react\";\r\nimport { Box } from '@material-ui/core'\r\n\r\nexport default function Progress({done}) {\r\n\r\n    console.log('done is '+done)\r\n\r\n/* \tconst [style, setStyle] = useState({\r\n        opacity: 0,\r\n        width:0\r\n    }); */\r\n\t\r\n/* \tsetTimeout(() => {\r\n\t\tconst newStyle = {\r\n\t\t\topacity: 1,\r\n\t\t\twidth: `${done}%`\r\n\t\t}\r\n\t\t\r\n\t\tsetStyle(newStyle);\r\n\t}, 200); */\r\n\t\r\n\treturn (\r\n\t\t<Box sx={{\r\n            backgroundColor: '#d8d8d8',\r\n            borderRadius: 20,\r\n            position: 'relative',\r\n            my: 1,\r\n            mx: 0,\r\n            height: 20,\r\n            width: 150,\r\n        }}>\r\n\t\t\t<Box sx={{\r\n            \tbackground: 'linear-gradient(to left, #F2709C, #FF9472)',\r\n                boxShadow: '0 3px 3px -5px #F2709C, 0 2px 5px #F2709C',\r\n                borderRadius: 20,\r\n                color: '#fff',\r\n                display: 'flex',\r\n                alignItems: 'center',\r\n                opacity: 1,\r\n                width: `${done}%`,\r\n                justifyContent: 'center',\r\n                height: '100%',\r\n                transition: '1s ease 0.3s',\r\n            }}\r\n            >\r\n\t\t\t\t{done}%\r\n\t\t\t</Box>\r\n\t\t</Box>\r\n\t)\r\n}\r\n","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\listcards2.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\studentcontext.js",[],["221","222"],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\addclass.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\pages\\logout.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\pages\\mybadgesredirect.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\feedbackview.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\addclass3.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\listcards3.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\listgoals.js",["223","224","225","226"],"import React from 'react'\r\n/** @jsxImportSource @emotion/react */\r\n\r\nimport dayjs from 'dayjs';\r\n\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Avatar from '@material-ui/core/Avatar'\r\n//import Typography from '@material-ui/core/Typography'\r\nimport Badge from '@material-ui/core/Badge'\r\nimport Message from '@material-ui/icons/Message'\r\nimport { Box, Chip } from '@material-ui/core'\r\nimport { List, ListItem, ListItemIcon } from '@material-ui/core';\r\nimport VisibilityIcon from '@material-ui/icons/Visibility';\r\nimport EditIcon from '@material-ui/icons/Edit'\r\n//import ShieldIcon from '@material-ui/icons/Shield';\r\n\r\n//https://firebasestorage.googleapis.com/v0/b/progressnotes-b6fc9.appspot.com/o/GoalTargetEditted.png?alt=media&token=59a794c9-225a-49c9-949e-6ffa4bb7c188\r\n//https://firebasestorage.googleapis.com/v0/b/progressnotes-b6fc9.appspot.com/o/GoalToInkscapeEditted.svg?alt=media&token=e935e1c8-46fb-4015-bb76-9437294546fc\r\n\r\n\r\nexport default function ListGoals({notes, handleEditOpen, handleViewOpen, deleteNoteHandler, canEdit}) {\r\n\r\n    const PlansIcon = \"https://firebasestorage.googleapis.com/v0/b/progressnotes-b6fc9.appspot.com/o/GoalTargetEditted.png?alt=media&token=59a794c9-225a-49c9-949e-6ffa4bb7c188\"\r\n    const GoalsIcon = \"https://firebasestorage.googleapis.com/v0/b/progressnotes-b6fc9.appspot.com/o/GoalToInkscapeEditted.svg?alt=media&token=e935e1c8-46fb-4015-bb76-9437294546fc\"\r\n\r\n\r\n    function colorForStatus(status) {\r\n        switch (status) {\r\n            case \"Active\":\r\n                return \"primary\"\r\n            case \"Archived\":\r\n                return \"secondary\"\r\n            case \"Paused\":\r\n                return \"info\"\r\n            default:\r\n                return \"info\"\r\n        }\r\n    }\r\n    \r\n    return (\r\n        <div>\r\n            <Grid container spacing={{ xs: 2, md: 2, lg:2 }}>\r\n                {notes.map((note) => (\r\n                    <Grid item xs={12} md={12} lg={12} key = {note.id}>\r\n                        <Box\r\n                            sx={{\r\n                                display: 'flex',\r\n                                flexDirection: 'column',\r\n                                alignItems: 'left',\r\n                                bgcolor: 'background.paper',\r\n                                overflow: 'hidden',\r\n                                borderRadius: '12px',\r\n                                boxShadow: 1,\r\n                                fontWeight: 'bold',\r\n                                justifyContent: 'space-between',\r\n                                maxWidth:250,\r\n                                minWidth:200\r\n                            }}\r\n                        >\r\n                            <Box\r\n                                sx={{\r\n                                    display:'flex',\r\n                                    flexDirection: 'row',\r\n                                    alignItems: 'left',\r\n                                    justifyContent:'left',\r\n                                    p: 1\r\n                                }}\r\n                            >\r\n                                <Box\r\n                                    sx={{\r\n                                    height: 75,\r\n                                    width: 100,\r\n                                    maxHeight: 75,\r\n                                    maxWidth: 100,\r\n                                    ml:1\r\n                                    }}\r\n                                >\r\n                                    {note.noteType === \"TermGoals\" ? \r\n                                        <Avatar aria-label=\"recipe\" sx={{height: 75, width: 75}} src={GoalsIcon} /> :\r\n                                        <Avatar aria-label=\"recipe\" sx={{height: 75, width: 75}} src={PlansIcon} />\r\n                                    }\r\n                                    <Box sx={{ ml:0, width: 5 }}>\r\n                                        <List sx={{display:'flex', flexDirection: 'row'}}>\r\n                                            <ListItem \r\n                                            button\r\n                                            key=\"viewNoteFromLC\"\r\n                                            onClick={() => handleViewOpen( note )}\r\n                                            >\r\n                                                <ListItemIcon ><VisibilityIcon fontSize='small'/></ListItemIcon>\r\n                                            </ListItem>\r\n                                        {canEdit && <>\r\n                                            <ListItem \r\n                                            button\r\n                                            key=\"editNoteFromLC\"\r\n                                            onClick={() => handleEditOpen( note )}\r\n                                            >\r\n                                                <ListItemIcon ><EditIcon fontSize='small'/></ListItemIcon>\r\n                                            </ListItem>\r\n                                        </>}\r\n\r\n                                        </List>\r\n                                    </Box>\r\n                                </Box>\r\n                                <Box sx={{\r\n                                    display: 'flex',\r\n                                    flexDirection: 'column',\r\n                                    alignItems: 'left',\r\n                                    m: 1,\r\n                                    minWidth: { md: 125, lg: 125 },\r\n                                    width:125\r\n                                    }}\r\n                                >\r\n                                    <Box component=\"span\" sx={{ fontSize: 10, mt:0 }}>\r\n                                        {note.title}\r\n                                    </Box>\r\n                                    <Box color=\"text.secondary\" component=\"span\" sx={{ fontSize: 10, mt:0 }}>\r\n                                        {dayjs(note.createdAt).fromNow()+\" by \"+note.author}\r\n                                    </Box>\r\n                                    <Box color=\"text.secondary\" component=\"span\" sx={{ ml:1, fontSize: 10 }}>\r\n                                        {note.body.substring(0, 65)+\"...\"}\r\n                                    </Box>\r\n                                </Box>\r\n\r\n\r\n                            </Box>\r\n                        </Box>\r\n                    </Grid>\r\n                ))}\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\listtable.js",["227","228","229","230","231","232","233","234","235","236","237","238","239","240","241","242","243","244","245","246","247","248","249","250","251","252","253","254","255","256","257","258","259","260","261"],"import React, { useState } from 'react';\r\n/** @jsxImportSource @emotion/react */\r\nimport firebase, { db } from '../firebase';\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nimport { UserContext } from '../userContext';\r\nimport PropTypes from 'prop-types';\r\nimport { alpha } from '@material-ui/core/styles';\r\nimport Box from '@material-ui/core/Box';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableSortLabel from '@material-ui/core/TableSortLabel';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport FilterListIcon from '@material-ui/icons/FilterList';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport { AssignmentInd, CloudDownload, Edit } from '@material-ui/icons';\r\nimport { AppBar, TextField, Dialog, FormControl, InputLabel, Select, MenuItem, Button, Grid } from '@material-ui/core';\r\n\r\n\r\nimport dayjs from 'dayjs';\r\n\r\nimport Avatar from '@material-ui/core/Avatar'\r\nimport Badge from '@material-ui/core/Badge'\r\nimport Message from '@material-ui/icons/Message'\r\nimport { Chip } from '@material-ui/core'\r\nimport { List, ListItem, ListItemIcon } from '@material-ui/core';\r\nimport VisibilityIcon from '@material-ui/icons/Visibility';\r\nimport EditIcon from '@material-ui/icons/Edit'\r\nimport ShieldIcon from '@material-ui/icons/Shield';\r\n\r\nexport default function ListTable({notes, handleViewOpen}) {\r\n\r\n    const rows = notes\r\n    \r\n    return (\r\n        <div>\r\n            <Box sx={{flexGrow:1, p:3}} >\r\n                <EnhancedTable rows={rows} />\r\n            </Box>            \r\n        </div>\r\n    )\r\n}\r\n\r\n//The comparator functions below allow the same functions to be used for sorting objects by different columns (different fields within the objects)\r\n\r\nfunction descendingComparator(a, b, orderBy) {\r\n  if (b[orderBy] < a[orderBy]) {\r\n    return -1;\r\n  }\r\n  if (b[orderBy] > a[orderBy]) {\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\nfunction getComparator(order, orderBy) {\r\n  return order === 'desc'\r\n    ? (a, b) => descendingComparator(a, b, orderBy)\r\n    : (a, b) => -descendingComparator(a, b, orderBy);\r\n}\r\n\r\n// This method is created for cross-browser compatibility, if you don't\r\n// need to support IE11, you can use Array.prototype.sort() directly\r\nfunction stableSort(array, comparator) {\r\n  const stabilizedThis = array.map((el, index) => [el, index]);\r\n  stabilizedThis.sort((a, b) => {\r\n    const order = comparator(a[0], b[0]);\r\n    if (order !== 0) return order;\r\n    return a[1] - b[1];\r\n  });\r\n  return stabilizedThis.map((el) => el[0]);\r\n}\r\n\r\nconst headCells = [\r\n  {\r\n    id: 'avatar',\r\n    numeric: false,\r\n    disablePadding: true,\r\n    label: 'Avatar',    \r\n  },\r\n  {\r\n    id: 'author',\r\n    numeric: false,\r\n    disablePadding: true,\r\n    label: 'Author',\r\n  },\r\n  {\r\n    id: 'noteType',\r\n    numeric: false,\r\n    disablePadding: false,\r\n    label: 'Note Type',\r\n  },\r\n  {\r\n    id: 'actionType',\r\n    numeric: false,\r\n    disablePadding: false,\r\n    label: 'Action Type',\r\n  },\r\n  {\r\n    id: 'plannedHrs',\r\n    numeric: false,\r\n    disablePadding: false,\r\n    label: 'Hrs Planned',\r\n  },\r\n  {\r\n    id: 'completedHrs',\r\n    numeric: false,\r\n    disablePadding: false,\r\n    label: 'Hrs Completed',\r\n  },\r\n];\r\n\r\nfunction EnhancedTableHead(props) {\r\n  const { order, orderBy, onRequestSort } = props;\r\n\r\n  //an appropriate \"sortHandler\" will be created for each column (with the \"property\" being the \"id\" of the particular column header)\r\n  const createSortHandler = (property) => (event) => {\r\n    onRequestSort(event, property);\r\n  };\r\n\r\n  return (\r\n    <TableHead>\r\n      <TableRow>\r\n        {headCells.map((headCell) => (\r\n          <TableCell\r\n            key={headCell.id}\r\n            align={headCell.numeric ? 'right' : 'left'}\r\n            padding={headCell.disablePadding ? 'none' : 'normal'}\r\n            sortDirection={orderBy === headCell.id ? order : false}\r\n            sx={{fontWeight:\"bold\"}}\r\n          >\r\n            <TableSortLabel\r\n              active={orderBy === headCell.id}\r\n              direction={orderBy === headCell.id ? order : 'asc'}\r\n              onClick={createSortHandler(headCell.id)}\r\n            >\r\n              {headCell.label}\r\n            </TableSortLabel>\r\n          </TableCell>\r\n        ))}\r\n      </TableRow>\r\n    </TableHead>\r\n  );\r\n}\r\n\r\nEnhancedTableHead.propTypes = {\r\n  onRequestSort: PropTypes.func.isRequired,\r\n  order: PropTypes.oneOf(['asc', 'desc']).isRequired,\r\n  orderBy: PropTypes.string.isRequired,\r\n};\r\n\r\nconst EnhancedTableToolbar = (props) => {\r\n\r\n  return (\r\n    <Toolbar\r\n      sx={{\r\n        pl: { sm: 2 },\r\n        pr: { xs: 1, sm: 1 },\r\n      }}\r\n    >\r\n    </Toolbar>\r\n  );\r\n};\r\n\r\n\r\nexport function EnhancedTable(props) {\r\n  const [order, setOrder] = useState('asc');\r\n  const [orderBy, setOrderBy] = useState('noteType');\r\n  const [page, setPage] = useState(0);\r\n  const [dense, setDense] = useState(false);\r\n  const [rowsPerPage, setRowsPerPage] = useState(25);\r\n\r\n  const rows = props.rows\r\n\r\n  //this will be sent to the \"EnhancedTableHead\" component. It will toggle the order if we click on the most recently ordered header again.\r\n  const handleRequestSort = (event, property) => {\r\n    const isAsc = orderBy === property && order === 'asc';\r\n    setOrder(isAsc ? 'desc' : 'asc');\r\n    setOrderBy(property);\r\n  };\r\n\r\n  const handleClick = (event, name) => {\r\n    console.log(\"Clicked a row!\")\r\n  };\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  const handleChangeDense = (event) => {\r\n    setDense(event.target.checked);\r\n  };\r\n\r\n  // Avoid a layout jump when reaching the last page with empty rows.\r\n  const emptyRows =\r\n    page > 0 ? Math.max(0, (1 + page) * rowsPerPage - rows.length) : 0;\r\n\r\n  return (\r\n    <Box sx={{ width: '100%' }}>\r\n      <Paper sx={{ width: '100%', mb: 2 }}>\r\n        <EnhancedTableToolbar />\r\n        <TableContainer>\r\n          <Table\r\n            sx={{ minWidth: 750 }}\r\n            aria-labelledby=\"tableTitle\"\r\n            size={dense ? 'small' : 'medium'}\r\n          >\r\n            <EnhancedTableHead\r\n              order={order}\r\n              orderBy={orderBy}\r\n              onRequestSort={handleRequestSort}\r\n              rowCount={rows.length}\r\n            />\r\n            <TableBody>\r\n              {/* if you don't need to support IE11, you can replace the `stableSort` call with:\r\n                 rows.slice().sort(getComparator(order, orderBy)) */}\r\n              {stableSort(rows, getComparator(order, orderBy))\r\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                .map((row, index) => {\r\n                  const labelId = `enhanced-table-checkbox-${index}`;\r\n\r\n                  return (\r\n                    <TableRow\r\n                      hover\r\n                      onClick={(event) => handleClick(event, row)}\r\n                      tabIndex={-1}\r\n                      key={row.id}\r\n                    >\r\n                      <TableCell>\r\n                        <Avatar aria-label=\"recipe\" sx={{height: 30, width: 30}} src={row.avatar} />\r\n                      </TableCell>\r\n                      <TableCell\r\n                        component=\"th\"\r\n                        id={labelId}\r\n                        scope=\"row\"\r\n                        padding=\"none\"\r\n                      >\r\n                        {row.author}\r\n                      </TableCell>\r\n                      <TableCell align=\"left\">{row.noteType}</TableCell>\r\n                      <TableCell align=\"left\">{row.actionType}</TableCell>\r\n                      <TableCell align=\"left\">{row.plannedHrs}</TableCell>\r\n                      <TableCell align=\"left\">{row.completedHrs}</TableCell>\r\n                    </TableRow>\r\n                  );\r\n                })}\r\n              {emptyRows > 0 && (\r\n                <TableRow\r\n                  style={{\r\n                    height: (dense ? 33 : 53) * emptyRows,\r\n                  }}\r\n                >\r\n                  <TableCell colSpan={6} />\r\n                </TableRow>\r\n              )}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n        <TablePagination\r\n          rowsPerPageOptions={[5, 10, 25]}\r\n          component=\"div\"\r\n          count={rows.length}\r\n          rowsPerPage={rowsPerPage}\r\n          page={page}\r\n          onPageChange={handleChangePage}\r\n          onRowsPerPageChange={handleChangeRowsPerPage}\r\n        />\r\n      </Paper>\r\n      <FormControlLabel\r\n        control={<Switch checked={dense} onChange={handleChangeDense} />}\r\n        label=\"Dense padding\"\r\n      />\r\n    </Box>\r\n  );\r\n}\r\n",["262","263"],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\listtable2.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\dashboard4.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\newnote4.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\listgoals4.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\listcards4.js",[],"C:\\Users\\happe\\Documents\\AppProjects\\progress_notes\\src\\components\\viewnotes4.js",[],{"ruleId":"264","replacedBy":"265"},{"ruleId":"266","replacedBy":"267"},{"ruleId":"268","severity":1,"message":"269","line":7,"column":10,"nodeType":"270","messageId":"271","endLine":7,"endColumn":14},{"ruleId":"264","replacedBy":"272"},{"ruleId":"266","replacedBy":"273"},{"ruleId":"264","replacedBy":"274"},{"ruleId":"266","replacedBy":"275"},{"ruleId":"268","severity":1,"message":"276","line":103,"column":13,"nodeType":"270","messageId":"271","endLine":103,"endColumn":17},{"ruleId":"268","severity":1,"message":"277","line":119,"column":13,"nodeType":"270","messageId":"271","endLine":119,"endColumn":19},{"ruleId":"268","severity":1,"message":"278","line":9,"column":8,"nodeType":"270","messageId":"271","endLine":9,"endColumn":19},{"ruleId":"279","severity":1,"message":"280","line":64,"column":38,"nodeType":"281","messageId":"282","endLine":64,"endColumn":40},{"ruleId":"283","severity":1,"message":"284","line":75,"column":39,"nodeType":"285","messageId":"286","endLine":75,"endColumn":41},{"ruleId":"283","severity":1,"message":"284","line":92,"column":31,"nodeType":"285","messageId":"286","endLine":92,"endColumn":33},{"ruleId":"268","severity":1,"message":"287","line":64,"column":35,"nodeType":"270","messageId":"271","endLine":64,"endColumn":42},{"ruleId":"268","severity":1,"message":"288","line":371,"column":17,"nodeType":"270","messageId":"271","endLine":371,"endColumn":25},{"ruleId":"264","replacedBy":"289"},{"ruleId":"266","replacedBy":"290"},{"ruleId":"268","severity":1,"message":"291","line":1,"column":10,"nodeType":"270","messageId":"271","endLine":1,"endColumn":18},{"ruleId":"264","replacedBy":"292"},{"ruleId":"266","replacedBy":"293"},{"ruleId":"268","severity":1,"message":"294","line":9,"column":8,"nodeType":"270","messageId":"271","endLine":9,"endColumn":13},{"ruleId":"268","severity":1,"message":"295","line":10,"column":8,"nodeType":"270","messageId":"271","endLine":10,"endColumn":15},{"ruleId":"268","severity":1,"message":"296","line":11,"column":15,"nodeType":"270","messageId":"271","endLine":11,"endColumn":19},{"ruleId":"268","severity":1,"message":"297","line":27,"column":14,"nodeType":"270","messageId":"271","endLine":27,"endColumn":28},{"ruleId":"268","severity":1,"message":"298","line":3,"column":8,"nodeType":"270","messageId":"271","endLine":3,"endColumn":16},{"ruleId":"268","severity":1,"message":"299","line":3,"column":20,"nodeType":"270","messageId":"271","endLine":3,"endColumn":22},{"ruleId":"268","severity":1,"message":"269","line":4,"column":10,"nodeType":"270","messageId":"271","endLine":4,"endColumn":14},{"ruleId":"268","severity":1,"message":"300","line":4,"column":16,"nodeType":"270","messageId":"271","endLine":4,"endColumn":26},{"ruleId":"268","severity":1,"message":"301","line":5,"column":8,"nodeType":"270","messageId":"271","endLine":5,"endColumn":24},{"ruleId":"268","severity":1,"message":"302","line":7,"column":10,"nodeType":"270","messageId":"271","endLine":7,"endColumn":21},{"ruleId":"268","severity":1,"message":"303","line":9,"column":10,"nodeType":"270","messageId":"271","endLine":9,"endColumn":15},{"ruleId":"268","severity":1,"message":"304","line":20,"column":8,"nodeType":"270","messageId":"271","endLine":20,"endColumn":18},{"ruleId":"268","severity":1,"message":"305","line":22,"column":8,"nodeType":"270","messageId":"271","endLine":22,"endColumn":16},{"ruleId":"268","severity":1,"message":"306","line":23,"column":8,"nodeType":"270","messageId":"271","endLine":23,"endColumn":18},{"ruleId":"268","severity":1,"message":"307","line":24,"column":8,"nodeType":"270","messageId":"271","endLine":24,"endColumn":15},{"ruleId":"268","severity":1,"message":"308","line":27,"column":8,"nodeType":"270","messageId":"271","endLine":27,"endColumn":22},{"ruleId":"268","severity":1,"message":"309","line":28,"column":8,"nodeType":"270","messageId":"271","endLine":28,"endColumn":17},{"ruleId":"268","severity":1,"message":"310","line":29,"column":10,"nodeType":"270","messageId":"271","endLine":29,"endColumn":23},{"ruleId":"268","severity":1,"message":"311","line":29,"column":25,"nodeType":"270","messageId":"271","endLine":29,"endColumn":38},{"ruleId":"268","severity":1,"message":"312","line":29,"column":40,"nodeType":"270","messageId":"271","endLine":29,"endColumn":44},{"ruleId":"268","severity":1,"message":"313","line":30,"column":10,"nodeType":"270","messageId":"271","endLine":30,"endColumn":16},{"ruleId":"268","severity":1,"message":"314","line":30,"column":18,"nodeType":"270","messageId":"271","endLine":30,"endColumn":27},{"ruleId":"268","severity":1,"message":"315","line":30,"column":29,"nodeType":"270","messageId":"271","endLine":30,"endColumn":35},{"ruleId":"268","severity":1,"message":"316","line":30,"column":37,"nodeType":"270","messageId":"271","endLine":30,"endColumn":48},{"ruleId":"268","severity":1,"message":"317","line":30,"column":50,"nodeType":"270","messageId":"271","endLine":30,"endColumn":60},{"ruleId":"268","severity":1,"message":"318","line":30,"column":62,"nodeType":"270","messageId":"271","endLine":30,"endColumn":68},{"ruleId":"268","severity":1,"message":"319","line":30,"column":70,"nodeType":"270","messageId":"271","endLine":30,"endColumn":78},{"ruleId":"268","severity":1,"message":"320","line":30,"column":80,"nodeType":"270","messageId":"271","endLine":30,"endColumn":86},{"ruleId":"268","severity":1,"message":"321","line":30,"column":88,"nodeType":"270","messageId":"271","endLine":30,"endColumn":92},{"ruleId":"268","severity":1,"message":"322","line":33,"column":8,"nodeType":"270","messageId":"271","endLine":33,"endColumn":13},{"ruleId":"268","severity":1,"message":"294","line":36,"column":8,"nodeType":"270","messageId":"271","endLine":36,"endColumn":13},{"ruleId":"268","severity":1,"message":"295","line":37,"column":8,"nodeType":"270","messageId":"271","endLine":37,"endColumn":15},{"ruleId":"268","severity":1,"message":"296","line":38,"column":10,"nodeType":"270","messageId":"271","endLine":38,"endColumn":14},{"ruleId":"268","severity":1,"message":"323","line":39,"column":10,"nodeType":"270","messageId":"271","endLine":39,"endColumn":14},{"ruleId":"268","severity":1,"message":"324","line":39,"column":16,"nodeType":"270","messageId":"271","endLine":39,"endColumn":24},{"ruleId":"268","severity":1,"message":"325","line":39,"column":26,"nodeType":"270","messageId":"271","endLine":39,"endColumn":38},{"ruleId":"268","severity":1,"message":"326","line":40,"column":8,"nodeType":"270","messageId":"271","endLine":40,"endColumn":22},{"ruleId":"268","severity":1,"message":"327","line":41,"column":8,"nodeType":"270","messageId":"271","endLine":41,"endColumn":16},{"ruleId":"268","severity":1,"message":"328","line":42,"column":8,"nodeType":"270","messageId":"271","endLine":42,"endColumn":18},{"ruleId":"264","replacedBy":"329"},{"ruleId":"266","replacedBy":"330"},"no-native-reassign",["331"],"no-negated-in-lhs",["332"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar",["331"],["332"],["331"],["332"],"'body' is assigned a value but never used.","'errors' is assigned a value but never used.","'CardActions' is defined but never used.","array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'loading' is assigned a value but never used.","'setError' is assigned a value but never used.",["331"],["332"],"'useState' is defined but never used.",["331"],["332"],"'Badge' is defined but never used.","'Message' is defined but never used.","'Chip' is defined but never used.","'colorForStatus' is defined but never used.","'firebase' is defined but never used.","'db' is defined but never used.","'useHistory' is defined but never used.","'CircularProgress' is defined but never used.","'UserContext' is defined but never used.","'alpha' is defined but never used.","'Typography' is defined but never used.","'Checkbox' is defined but never used.","'IconButton' is defined but never used.","'Tooltip' is defined but never used.","'FilterListIcon' is defined but never used.","'CloseIcon' is defined but never used.","'AssignmentInd' is defined but never used.","'CloudDownload' is defined but never used.","'Edit' is defined but never used.","'AppBar' is defined but never used.","'TextField' is defined but never used.","'Dialog' is defined but never used.","'FormControl' is defined but never used.","'InputLabel' is defined but never used.","'Select' is defined but never used.","'MenuItem' is defined but never used.","'Button' is defined but never used.","'Grid' is defined but never used.","'dayjs' is defined but never used.","'List' is defined but never used.","'ListItem' is defined but never used.","'ListItemIcon' is defined but never used.","'VisibilityIcon' is defined but never used.","'EditIcon' is defined but never used.","'ShieldIcon' is defined but never used.",["331"],["332"],"no-global-assign","no-unsafe-negation"]